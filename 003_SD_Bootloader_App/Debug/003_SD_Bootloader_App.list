
003_SD_Bootloader_App.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075d8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000634  08007768  08007768  00008768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d9c  08007d9c  00009078  2**0
                  CONTENTS
  4 .ARM          00000008  08007d9c  08007d9c  00008d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007da4  08007da4  00009078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007da4  08007da4  00008da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007da8  08007da8  00008da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08007dac  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009078  2**0
                  CONTENTS
 10 .bss          000053d4  20000078  20000078  00009078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000544c  2000544c  00009078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ef28  00000000  00000000  000090a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a26  00000000  00000000  00017fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd8  00000000  00000000  0001a9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a92  00000000  00000000  0001b7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021873  00000000  00000000  0001c262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013d19  00000000  00000000  0003dad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6a91  00000000  00000000  000517ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011827f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c7c  00000000  00000000  001182c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0011bf40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007750 	.word	0x08007750

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08007750 	.word	0x08007750

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <SELECT>:



/* SPI Chip Select */
static void SELECT(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000574:	2200      	movs	r2, #0
 8000576:	2101      	movs	r1, #1
 8000578:	4802      	ldr	r0, [pc, #8]	@ (8000584 <SELECT+0x14>)
 800057a:	f001 ffcd 	bl	8002518 <HAL_GPIO_WritePin>
}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40020400 	.word	0x40020400

08000588 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800058c:	2201      	movs	r2, #1
 800058e:	2101      	movs	r1, #1
 8000590:	4802      	ldr	r0, [pc, #8]	@ (800059c <DESELECT+0x14>)
 8000592:	f001 ffc1 	bl	8002518 <HAL_GPIO_WritePin>
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40020400 	.word	0x40020400

080005a0 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80005aa:	bf00      	nop
 80005ac:	4808      	ldr	r0, [pc, #32]	@ (80005d0 <SPI_TxByte+0x30>)
 80005ae:	f002 ffb9 	bl	8003524 <HAL_SPI_GetState>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d1f9      	bne.n	80005ac <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80005b8:	1df9      	adds	r1, r7, #7
 80005ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005be:	2201      	movs	r2, #1
 80005c0:	4803      	ldr	r0, [pc, #12]	@ (80005d0 <SPI_TxByte+0x30>)
 80005c2:	f002 fcbc 	bl	8002f3e <HAL_SPI_Transmit>
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20004ffc 	.word	0x20004ffc

080005d4 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80005da:	23ff      	movs	r3, #255	@ 0xff
 80005dc:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80005e2:	bf00      	nop
 80005e4:	4809      	ldr	r0, [pc, #36]	@ (800060c <SPI_RxByte+0x38>)
 80005e6:	f002 ff9d 	bl	8003524 <HAL_SPI_GetState>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d1f9      	bne.n	80005e4 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80005f0:	1dba      	adds	r2, r7, #6
 80005f2:	1df9      	adds	r1, r7, #7
 80005f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	2301      	movs	r3, #1
 80005fc:	4803      	ldr	r0, [pc, #12]	@ (800060c <SPI_RxByte+0x38>)
 80005fe:	f002 fde1 	bl	80031c4 <HAL_SPI_TransmitReceive>

  return data;
 8000602:	79bb      	ldrb	r3, [r7, #6]
}
 8000604:	4618      	mov	r0, r3
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20004ffc 	.word	0x20004ffc

08000610 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000618:	f7ff ffdc 	bl	80005d4 <SPI_RxByte>
 800061c:	4603      	mov	r3, r0
 800061e:	461a      	mov	r2, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	701a      	strb	r2, [r3, #0]
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8000632:	4b0b      	ldr	r3, [pc, #44]	@ (8000660 <SD_ReadyWait+0x34>)
 8000634:	2232      	movs	r2, #50	@ 0x32
 8000636:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000638:	f7ff ffcc 	bl	80005d4 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 800063c:	f7ff ffca 	bl	80005d4 <SPI_RxByte>
 8000640:	4603      	mov	r3, r0
 8000642:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	2bff      	cmp	r3, #255	@ 0xff
 8000648:	d004      	beq.n	8000654 <SD_ReadyWait+0x28>
 800064a:	4b05      	ldr	r3, [pc, #20]	@ (8000660 <SD_ReadyWait+0x34>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	b2db      	uxtb	r3, r3
 8000650:	2b00      	cmp	r3, #0
 8000652:	d1f3      	bne.n	800063c <SD_ReadyWait+0x10>

  return res;
 8000654:	79fb      	ldrb	r3, [r7, #7]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	2000509e 	.word	0x2000509e

08000664 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800066a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800066e:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8000670:	f7ff ff8a 	bl	8000588 <DESELECT>

  for(int i = 0; i < 10; i++)
 8000674:	2300      	movs	r3, #0
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	e005      	b.n	8000686 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800067a:	20ff      	movs	r0, #255	@ 0xff
 800067c:	f7ff ff90 	bl	80005a0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000680:	693b      	ldr	r3, [r7, #16]
 8000682:	3301      	adds	r3, #1
 8000684:	613b      	str	r3, [r7, #16]
 8000686:	693b      	ldr	r3, [r7, #16]
 8000688:	2b09      	cmp	r3, #9
 800068a:	ddf6      	ble.n	800067a <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 800068c:	f7ff ff70 	bl	8000570 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000690:	2340      	movs	r3, #64	@ 0x40
 8000692:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80006a4:	2395      	movs	r3, #149	@ 0x95
 80006a6:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 80006a8:	2300      	movs	r3, #0
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	e009      	b.n	80006c2 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80006ae:	1d3a      	adds	r2, r7, #4
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	4413      	add	r3, r2
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff ff72 	bl	80005a0 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	3301      	adds	r3, #1
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	2b05      	cmp	r3, #5
 80006c6:	ddf2      	ble.n	80006ae <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80006c8:	e002      	b.n	80006d0 <SD_PowerOn+0x6c>
  {
    Count--;
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	3b01      	subs	r3, #1
 80006ce:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80006d0:	f7ff ff80 	bl	80005d4 <SPI_RxByte>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d002      	beq.n	80006e0 <SD_PowerOn+0x7c>
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d1f4      	bne.n	80006ca <SD_PowerOn+0x66>
  }

  DESELECT();
 80006e0:	f7ff ff52 	bl	8000588 <DESELECT>
  SPI_TxByte(0XFF);
 80006e4:	20ff      	movs	r0, #255	@ 0xff
 80006e6:	f7ff ff5b 	bl	80005a0 <SPI_TxByte>

  PowerFlag = 1;
 80006ea:	4b03      	ldr	r3, [pc, #12]	@ (80006f8 <SD_PowerOn+0x94>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	701a      	strb	r2, [r3, #0]
}
 80006f0:	bf00      	nop
 80006f2:	3718      	adds	r7, #24
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000095 	.word	0x20000095

080006fc <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000700:	4b03      	ldr	r3, [pc, #12]	@ (8000710 <SD_PowerOff+0x14>)
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]
}
 8000706:	bf00      	nop
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	20000095 	.word	0x20000095

08000714 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000718:	4b03      	ldr	r3, [pc, #12]	@ (8000728 <SD_CheckPower+0x14>)
 800071a:	781b      	ldrb	r3, [r3, #0]
}
 800071c:	4618      	mov	r0, r3
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20000095 	.word	0x20000095

0800072c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8000736:	4b17      	ldr	r3, [pc, #92]	@ (8000794 <SD_RxDataBlock+0x68>)
 8000738:	220a      	movs	r2, #10
 800073a:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 800073c:	f7ff ff4a 	bl	80005d4 <SPI_RxByte>
 8000740:	4603      	mov	r3, r0
 8000742:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	2bff      	cmp	r3, #255	@ 0xff
 8000748:	d104      	bne.n	8000754 <SD_RxDataBlock+0x28>
 800074a:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <SD_RxDataBlock+0x68>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	2b00      	cmp	r3, #0
 8000752:	d1f3      	bne.n	800073c <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000754:	7bfb      	ldrb	r3, [r7, #15]
 8000756:	2bfe      	cmp	r3, #254	@ 0xfe
 8000758:	d001      	beq.n	800075e <SD_RxDataBlock+0x32>
    return FALSE;
 800075a:	2300      	movs	r3, #0
 800075c:	e016      	b.n	800078c <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	1c5a      	adds	r2, r3, #1
 8000762:	607a      	str	r2, [r7, #4]
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ff53 	bl	8000610 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	1c5a      	adds	r2, r3, #1
 800076e:	607a      	str	r2, [r7, #4]
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff ff4d 	bl	8000610 <SPI_RxBytePtr>
  } while(btr -= 2);
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	3b02      	subs	r3, #2
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d1ed      	bne.n	800075e <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8000782:	f7ff ff27 	bl	80005d4 <SPI_RxByte>
  SPI_RxByte();
 8000786:	f7ff ff25 	bl	80005d4 <SPI_RxByte>

  return TRUE;
 800078a:	2301      	movs	r3, #1
}
 800078c:	4618      	mov	r0, r3
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	2000509d 	.word	0x2000509d

08000798 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	460b      	mov	r3, r1
 80007a2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80007a8:	f7ff ff40 	bl	800062c <SD_ReadyWait>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2bff      	cmp	r3, #255	@ 0xff
 80007b0:	d001      	beq.n	80007b6 <SD_TxDataBlock+0x1e>
    return FALSE;
 80007b2:	2300      	movs	r3, #0
 80007b4:	e040      	b.n	8000838 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 80007b6:	78fb      	ldrb	r3, [r7, #3]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff fef1 	bl	80005a0 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 80007be:	78fb      	ldrb	r3, [r7, #3]
 80007c0:	2bfd      	cmp	r3, #253	@ 0xfd
 80007c2:	d031      	beq.n	8000828 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	1c5a      	adds	r2, r3, #1
 80007cc:	607a      	str	r2, [r7, #4]
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff fee5 	bl	80005a0 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	1c5a      	adds	r2, r3, #1
 80007da:	607a      	str	r2, [r7, #4]
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff fede 	bl	80005a0 <SPI_TxByte>
    } while (--wc);
 80007e4:	7bbb      	ldrb	r3, [r7, #14]
 80007e6:	3b01      	subs	r3, #1
 80007e8:	73bb      	strb	r3, [r7, #14]
 80007ea:	7bbb      	ldrb	r3, [r7, #14]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d1eb      	bne.n	80007c8 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 80007f0:	f7ff fef0 	bl	80005d4 <SPI_RxByte>
    SPI_RxByte();
 80007f4:	f7ff feee 	bl	80005d4 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 80007f8:	e00b      	b.n	8000812 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 80007fa:	f7ff feeb 	bl	80005d4 <SPI_RxByte>
 80007fe:	4603      	mov	r3, r0
 8000800:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8000802:	7bfb      	ldrb	r3, [r7, #15]
 8000804:	f003 031f 	and.w	r3, r3, #31
 8000808:	2b05      	cmp	r3, #5
 800080a:	d006      	beq.n	800081a <SD_TxDataBlock+0x82>
        break;

      i++;
 800080c:	7b7b      	ldrb	r3, [r7, #13]
 800080e:	3301      	adds	r3, #1
 8000810:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8000812:	7b7b      	ldrb	r3, [r7, #13]
 8000814:	2b40      	cmp	r3, #64	@ 0x40
 8000816:	d9f0      	bls.n	80007fa <SD_TxDataBlock+0x62>
 8000818:	e000      	b.n	800081c <SD_TxDataBlock+0x84>
        break;
 800081a:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 800081c:	bf00      	nop
 800081e:	f7ff fed9 	bl	80005d4 <SPI_RxByte>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d0fa      	beq.n	800081e <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8000828:	7bfb      	ldrb	r3, [r7, #15]
 800082a:	f003 031f 	and.w	r3, r3, #31
 800082e:	2b05      	cmp	r3, #5
 8000830:	d101      	bne.n	8000836 <SD_TxDataBlock+0x9e>
    return TRUE;
 8000832:	2301      	movs	r3, #1
 8000834:	e000      	b.n	8000838 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000836:	2300      	movs	r3, #0
}
 8000838:	4618      	mov	r0, r3
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	6039      	str	r1, [r7, #0]
 800084a:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 800084c:	f7ff feee 	bl	800062c <SD_ReadyWait>
 8000850:	4603      	mov	r3, r0
 8000852:	2bff      	cmp	r3, #255	@ 0xff
 8000854:	d001      	beq.n	800085a <SD_SendCmd+0x1a>
    return 0xFF;
 8000856:	23ff      	movs	r3, #255	@ 0xff
 8000858:	e040      	b.n	80008dc <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fe9f 	bl	80005a0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	0e1b      	lsrs	r3, r3, #24
 8000866:	b2db      	uxtb	r3, r3
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff fe99 	bl	80005a0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	0c1b      	lsrs	r3, r3, #16
 8000872:	b2db      	uxtb	r3, r3
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff fe93 	bl	80005a0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	0a1b      	lsrs	r3, r3, #8
 800087e:	b2db      	uxtb	r3, r3
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff fe8d 	bl	80005a0 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	b2db      	uxtb	r3, r3
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff fe88 	bl	80005a0 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	2b40      	cmp	r3, #64	@ 0x40
 8000898:	d101      	bne.n	800089e <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 800089a:	2395      	movs	r3, #149	@ 0x95
 800089c:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	2b48      	cmp	r3, #72	@ 0x48
 80008a2:	d101      	bne.n	80008a8 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80008a4:	2387      	movs	r3, #135	@ 0x87
 80008a6:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff fe78 	bl	80005a0 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	2b4c      	cmp	r3, #76	@ 0x4c
 80008b4:	d101      	bne.n	80008ba <SD_SendCmd+0x7a>
    SPI_RxByte();
 80008b6:	f7ff fe8d 	bl	80005d4 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 80008ba:	230a      	movs	r3, #10
 80008bc:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80008be:	f7ff fe89 	bl	80005d4 <SPI_RxByte>
 80008c2:	4603      	mov	r3, r0
 80008c4:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80008c6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	da05      	bge.n	80008da <SD_SendCmd+0x9a>
 80008ce:	7bbb      	ldrb	r3, [r7, #14]
 80008d0:	3b01      	subs	r3, #1
 80008d2:	73bb      	strb	r3, [r7, #14]
 80008d4:	7bbb      	ldrb	r3, [r7, #14]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d1f1      	bne.n	80008be <SD_SendCmd+0x7e>

  return res;
 80008da:	7b7b      	ldrb	r3, [r7, #13]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 80008f4:	2301      	movs	r3, #1
 80008f6:	e0d5      	b.n	8000aa4 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80008f8:	4b6c      	ldr	r3, [pc, #432]	@ (8000aac <SD_disk_initialize+0x1c8>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	2b00      	cmp	r3, #0
 8000904:	d003      	beq.n	800090e <SD_disk_initialize+0x2a>
    return Stat;
 8000906:	4b69      	ldr	r3, [pc, #420]	@ (8000aac <SD_disk_initialize+0x1c8>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	b2db      	uxtb	r3, r3
 800090c:	e0ca      	b.n	8000aa4 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 800090e:	f7ff fea9 	bl	8000664 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8000912:	f7ff fe2d 	bl	8000570 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 800091a:	2100      	movs	r1, #0
 800091c:	2040      	movs	r0, #64	@ 0x40
 800091e:	f7ff ff8f 	bl	8000840 <SD_SendCmd>
 8000922:	4603      	mov	r3, r0
 8000924:	2b01      	cmp	r3, #1
 8000926:	f040 80a5 	bne.w	8000a74 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800092a:	4b61      	ldr	r3, [pc, #388]	@ (8000ab0 <SD_disk_initialize+0x1cc>)
 800092c:	2264      	movs	r2, #100	@ 0x64
 800092e:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000930:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000934:	2048      	movs	r0, #72	@ 0x48
 8000936:	f7ff ff83 	bl	8000840 <SD_SendCmd>
 800093a:	4603      	mov	r3, r0
 800093c:	2b01      	cmp	r3, #1
 800093e:	d158      	bne.n	80009f2 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000940:	2300      	movs	r3, #0
 8000942:	73fb      	strb	r3, [r7, #15]
 8000944:	e00c      	b.n	8000960 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8000946:	7bfc      	ldrb	r4, [r7, #15]
 8000948:	f7ff fe44 	bl	80005d4 <SPI_RxByte>
 800094c:	4603      	mov	r3, r0
 800094e:	461a      	mov	r2, r3
 8000950:	f104 0310 	add.w	r3, r4, #16
 8000954:	443b      	add	r3, r7
 8000956:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800095a:	7bfb      	ldrb	r3, [r7, #15]
 800095c:	3301      	adds	r3, #1
 800095e:	73fb      	strb	r3, [r7, #15]
 8000960:	7bfb      	ldrb	r3, [r7, #15]
 8000962:	2b03      	cmp	r3, #3
 8000964:	d9ef      	bls.n	8000946 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000966:	7abb      	ldrb	r3, [r7, #10]
 8000968:	2b01      	cmp	r3, #1
 800096a:	f040 8083 	bne.w	8000a74 <SD_disk_initialize+0x190>
 800096e:	7afb      	ldrb	r3, [r7, #11]
 8000970:	2baa      	cmp	r3, #170	@ 0xaa
 8000972:	d17f      	bne.n	8000a74 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000974:	2100      	movs	r1, #0
 8000976:	2077      	movs	r0, #119	@ 0x77
 8000978:	f7ff ff62 	bl	8000840 <SD_SendCmd>
 800097c:	4603      	mov	r3, r0
 800097e:	2b01      	cmp	r3, #1
 8000980:	d807      	bhi.n	8000992 <SD_disk_initialize+0xae>
 8000982:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000986:	2069      	movs	r0, #105	@ 0x69
 8000988:	f7ff ff5a 	bl	8000840 <SD_SendCmd>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d005      	beq.n	800099e <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8000992:	4b47      	ldr	r3, [pc, #284]	@ (8000ab0 <SD_disk_initialize+0x1cc>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	2b00      	cmp	r3, #0
 800099a:	d1eb      	bne.n	8000974 <SD_disk_initialize+0x90>
 800099c:	e000      	b.n	80009a0 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 800099e:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80009a0:	4b43      	ldr	r3, [pc, #268]	@ (8000ab0 <SD_disk_initialize+0x1cc>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d064      	beq.n	8000a74 <SD_disk_initialize+0x190>
 80009aa:	2100      	movs	r1, #0
 80009ac:	207a      	movs	r0, #122	@ 0x7a
 80009ae:	f7ff ff47 	bl	8000840 <SD_SendCmd>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d15d      	bne.n	8000a74 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80009b8:	2300      	movs	r3, #0
 80009ba:	73fb      	strb	r3, [r7, #15]
 80009bc:	e00c      	b.n	80009d8 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80009be:	7bfc      	ldrb	r4, [r7, #15]
 80009c0:	f7ff fe08 	bl	80005d4 <SPI_RxByte>
 80009c4:	4603      	mov	r3, r0
 80009c6:	461a      	mov	r2, r3
 80009c8:	f104 0310 	add.w	r3, r4, #16
 80009cc:	443b      	add	r3, r7
 80009ce:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	3301      	adds	r3, #1
 80009d6:	73fb      	strb	r3, [r7, #15]
 80009d8:	7bfb      	ldrb	r3, [r7, #15]
 80009da:	2b03      	cmp	r3, #3
 80009dc:	d9ef      	bls.n	80009be <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 80009de:	7a3b      	ldrb	r3, [r7, #8]
 80009e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SD_disk_initialize+0x108>
 80009e8:	2306      	movs	r3, #6
 80009ea:	e000      	b.n	80009ee <SD_disk_initialize+0x10a>
 80009ec:	2302      	movs	r3, #2
 80009ee:	73bb      	strb	r3, [r7, #14]
 80009f0:	e040      	b.n	8000a74 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80009f2:	2100      	movs	r1, #0
 80009f4:	2077      	movs	r0, #119	@ 0x77
 80009f6:	f7ff ff23 	bl	8000840 <SD_SendCmd>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d808      	bhi.n	8000a12 <SD_disk_initialize+0x12e>
 8000a00:	2100      	movs	r1, #0
 8000a02:	2069      	movs	r0, #105	@ 0x69
 8000a04:	f7ff ff1c 	bl	8000840 <SD_SendCmd>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d801      	bhi.n	8000a12 <SD_disk_initialize+0x12e>
 8000a0e:	2302      	movs	r3, #2
 8000a10:	e000      	b.n	8000a14 <SD_disk_initialize+0x130>
 8000a12:	2301      	movs	r3, #1
 8000a14:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8000a16:	7bbb      	ldrb	r3, [r7, #14]
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	d10e      	bne.n	8000a3a <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	2077      	movs	r0, #119	@ 0x77
 8000a20:	f7ff ff0e 	bl	8000840 <SD_SendCmd>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d80e      	bhi.n	8000a48 <SD_disk_initialize+0x164>
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	2069      	movs	r0, #105	@ 0x69
 8000a2e:	f7ff ff07 	bl	8000840 <SD_SendCmd>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d107      	bne.n	8000a48 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000a38:	e00d      	b.n	8000a56 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2041      	movs	r0, #65	@ 0x41
 8000a3e:	f7ff feff 	bl	8000840 <SD_SendCmd>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d005      	beq.n	8000a54 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000a48:	4b19      	ldr	r3, [pc, #100]	@ (8000ab0 <SD_disk_initialize+0x1cc>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d1e1      	bne.n	8000a16 <SD_disk_initialize+0x132>
 8000a52:	e000      	b.n	8000a56 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8000a54:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8000a56:	4b16      	ldr	r3, [pc, #88]	@ (8000ab0 <SD_disk_initialize+0x1cc>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d007      	beq.n	8000a70 <SD_disk_initialize+0x18c>
 8000a60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a64:	2050      	movs	r0, #80	@ 0x50
 8000a66:	f7ff feeb 	bl	8000840 <SD_SendCmd>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8000a74:	4a0f      	ldr	r2, [pc, #60]	@ (8000ab4 <SD_disk_initialize+0x1d0>)
 8000a76:	7bbb      	ldrb	r3, [r7, #14]
 8000a78:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8000a7a:	f7ff fd85 	bl	8000588 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000a7e:	f7ff fda9 	bl	80005d4 <SPI_RxByte>

  if (type)
 8000a82:	7bbb      	ldrb	r3, [r7, #14]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d008      	beq.n	8000a9a <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8000a88:	4b08      	ldr	r3, [pc, #32]	@ (8000aac <SD_disk_initialize+0x1c8>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	f023 0301 	bic.w	r3, r3, #1
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	4b05      	ldr	r3, [pc, #20]	@ (8000aac <SD_disk_initialize+0x1c8>)
 8000a96:	701a      	strb	r2, [r3, #0]
 8000a98:	e001      	b.n	8000a9e <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000a9a:	f7ff fe2f 	bl	80006fc <SD_PowerOff>
  }

  return Stat;
 8000a9e:	4b03      	ldr	r3, [pc, #12]	@ (8000aac <SD_disk_initialize+0x1c8>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	b2db      	uxtb	r3, r3
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd90      	pop	{r4, r7, pc}
 8000aac:	20000000 	.word	0x20000000
 8000ab0:	2000509d 	.word	0x2000509d
 8000ab4:	20000094 	.word	0x20000094

08000ab8 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <SD_disk_status+0x14>
    return STA_NOINIT;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	e002      	b.n	8000ad2 <SD_disk_status+0x1a>

  return Stat;
 8000acc:	4b04      	ldr	r3, [pc, #16]	@ (8000ae0 <SD_disk_status+0x28>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	b2db      	uxtb	r3, r3
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	20000000 	.word	0x20000000

08000ae4 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60b9      	str	r1, [r7, #8]
 8000aec:	607a      	str	r2, [r7, #4]
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	4603      	mov	r3, r0
 8000af2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d102      	bne.n	8000b00 <SD_disk_read+0x1c>
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d101      	bne.n	8000b04 <SD_disk_read+0x20>
    return RES_PARERR;
 8000b00:	2304      	movs	r3, #4
 8000b02:	e051      	b.n	8000ba8 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8000b04:	4b2a      	ldr	r3, [pc, #168]	@ (8000bb0 <SD_disk_read+0xcc>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8000b12:	2303      	movs	r3, #3
 8000b14:	e048      	b.n	8000ba8 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8000b16:	4b27      	ldr	r3, [pc, #156]	@ (8000bb4 <SD_disk_read+0xd0>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	f003 0304 	and.w	r3, r3, #4
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d102      	bne.n	8000b28 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	025b      	lsls	r3, r3, #9
 8000b26:	607b      	str	r3, [r7, #4]

  SELECT();
 8000b28:	f7ff fd22 	bl	8000570 <SELECT>

  if (count == 1)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d111      	bne.n	8000b56 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	2051      	movs	r0, #81	@ 0x51
 8000b36:	f7ff fe83 	bl	8000840 <SD_SendCmd>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d129      	bne.n	8000b94 <SD_disk_read+0xb0>
 8000b40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b44:	68b8      	ldr	r0, [r7, #8]
 8000b46:	f7ff fdf1 	bl	800072c <SD_RxDataBlock>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d021      	beq.n	8000b94 <SD_disk_read+0xb0>
      count = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	e01e      	b.n	8000b94 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	2052      	movs	r0, #82	@ 0x52
 8000b5a:	f7ff fe71 	bl	8000840 <SD_SendCmd>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d117      	bne.n	8000b94 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000b64:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b68:	68b8      	ldr	r0, [r7, #8]
 8000b6a:	f7ff fddf 	bl	800072c <SD_RxDataBlock>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d00a      	beq.n	8000b8a <SD_disk_read+0xa6>
          break;

        buff += 512;
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000b7a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	603b      	str	r3, [r7, #0]
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d1ed      	bne.n	8000b64 <SD_disk_read+0x80>
 8000b88:	e000      	b.n	8000b8c <SD_disk_read+0xa8>
          break;
 8000b8a:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	204c      	movs	r0, #76	@ 0x4c
 8000b90:	f7ff fe56 	bl	8000840 <SD_SendCmd>
    }
  }

  DESELECT();
 8000b94:	f7ff fcf8 	bl	8000588 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8000b98:	f7ff fd1c 	bl	80005d4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	bf14      	ite	ne
 8000ba2:	2301      	movne	r3, #1
 8000ba4:	2300      	moveq	r3, #0
 8000ba6:	b2db      	uxtb	r3, r3
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3710      	adds	r7, #16
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	20000094 	.word	0x20000094

08000bb8 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60b9      	str	r1, [r7, #8]
 8000bc0:	607a      	str	r2, [r7, #4]
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000bc8:	7bfb      	ldrb	r3, [r7, #15]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d102      	bne.n	8000bd4 <SD_disk_write+0x1c>
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d101      	bne.n	8000bd8 <SD_disk_write+0x20>
    return RES_PARERR;
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	e06b      	b.n	8000cb0 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8000bd8:	4b37      	ldr	r3, [pc, #220]	@ (8000cb8 <SD_disk_write+0x100>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <SD_disk_write+0x32>
    return RES_NOTRDY;
 8000be6:	2303      	movs	r3, #3
 8000be8:	e062      	b.n	8000cb0 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8000bea:	4b33      	ldr	r3, [pc, #204]	@ (8000cb8 <SD_disk_write+0x100>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	f003 0304 	and.w	r3, r3, #4
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <SD_disk_write+0x44>
    return RES_WRPRT;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	e059      	b.n	8000cb0 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8000bfc:	4b2f      	ldr	r3, [pc, #188]	@ (8000cbc <SD_disk_write+0x104>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	f003 0304 	and.w	r3, r3, #4
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d102      	bne.n	8000c0e <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	025b      	lsls	r3, r3, #9
 8000c0c:	607b      	str	r3, [r7, #4]

  SELECT();
 8000c0e:	f7ff fcaf 	bl	8000570 <SELECT>

  if (count == 1)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d110      	bne.n	8000c3a <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c18:	6879      	ldr	r1, [r7, #4]
 8000c1a:	2058      	movs	r0, #88	@ 0x58
 8000c1c:	f7ff fe10 	bl	8000840 <SD_SendCmd>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d13a      	bne.n	8000c9c <SD_disk_write+0xe4>
 8000c26:	21fe      	movs	r1, #254	@ 0xfe
 8000c28:	68b8      	ldr	r0, [r7, #8]
 8000c2a:	f7ff fdb5 	bl	8000798 <SD_TxDataBlock>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d033      	beq.n	8000c9c <SD_disk_write+0xe4>
      count = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	e030      	b.n	8000c9c <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8000c3a:	4b20      	ldr	r3, [pc, #128]	@ (8000cbc <SD_disk_write+0x104>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d007      	beq.n	8000c56 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000c46:	2100      	movs	r1, #0
 8000c48:	2077      	movs	r0, #119	@ 0x77
 8000c4a:	f7ff fdf9 	bl	8000840 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c4e:	6839      	ldr	r1, [r7, #0]
 8000c50:	2057      	movs	r0, #87	@ 0x57
 8000c52:	f7ff fdf5 	bl	8000840 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	2059      	movs	r0, #89	@ 0x59
 8000c5a:	f7ff fdf1 	bl	8000840 <SD_SendCmd>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d11b      	bne.n	8000c9c <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000c64:	21fc      	movs	r1, #252	@ 0xfc
 8000c66:	68b8      	ldr	r0, [r7, #8]
 8000c68:	f7ff fd96 	bl	8000798 <SD_TxDataBlock>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d00a      	beq.n	8000c88 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000c78:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d1ee      	bne.n	8000c64 <SD_disk_write+0xac>
 8000c86:	e000      	b.n	8000c8a <SD_disk_write+0xd2>
          break;
 8000c88:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8000c8a:	21fd      	movs	r1, #253	@ 0xfd
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f7ff fd83 	bl	8000798 <SD_TxDataBlock>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d101      	bne.n	8000c9c <SD_disk_write+0xe4>
      {
        count = 1;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8000c9c:	f7ff fc74 	bl	8000588 <DESELECT>
  SPI_RxByte();
 8000ca0:	f7ff fc98 	bl	80005d4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	bf14      	ite	ne
 8000caa:	2301      	movne	r3, #1
 8000cac:	2300      	moveq	r3, #0
 8000cae:	b2db      	uxtb	r3, r3
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	20000094 	.word	0x20000094

08000cc0 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b08b      	sub	sp, #44	@ 0x2c
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	603a      	str	r2, [r7, #0]
 8000cca:	71fb      	strb	r3, [r7, #7]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8000cda:	2304      	movs	r3, #4
 8000cdc:	e119      	b.n	8000f12 <SD_disk_ioctl+0x252>

  res = RES_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8000ce4:	79bb      	ldrb	r3, [r7, #6]
 8000ce6:	2b05      	cmp	r3, #5
 8000ce8:	d129      	bne.n	8000d3e <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8000cea:	6a3b      	ldr	r3, [r7, #32]
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d017      	beq.n	8000d22 <SD_disk_ioctl+0x62>
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	dc1f      	bgt.n	8000d36 <SD_disk_ioctl+0x76>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d002      	beq.n	8000d00 <SD_disk_ioctl+0x40>
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d00b      	beq.n	8000d16 <SD_disk_ioctl+0x56>
 8000cfe:	e01a      	b.n	8000d36 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8000d00:	f7ff fd08 	bl	8000714 <SD_CheckPower>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8000d0a:	f7ff fcf7 	bl	80006fc <SD_PowerOff>
      res = RES_OK;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000d14:	e0fb      	b.n	8000f0e <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 8000d16:	f7ff fca5 	bl	8000664 <SD_PowerOn>
      res = RES_OK;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000d20:	e0f5      	b.n	8000f0e <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8000d22:	6a3b      	ldr	r3, [r7, #32]
 8000d24:	1c5c      	adds	r4, r3, #1
 8000d26:	f7ff fcf5 	bl	8000714 <SD_CheckPower>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8000d2e:	2300      	movs	r3, #0
 8000d30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000d34:	e0eb      	b.n	8000f0e <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 8000d36:	2304      	movs	r3, #4
 8000d38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000d3c:	e0e7      	b.n	8000f0e <SD_disk_ioctl+0x24e>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8000d3e:	4b77      	ldr	r3, [pc, #476]	@ (8000f1c <SD_disk_ioctl+0x25c>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	e0e0      	b.n	8000f12 <SD_disk_ioctl+0x252>

    SELECT();
 8000d50:	f7ff fc0e 	bl	8000570 <SELECT>

    switch (ctrl)
 8000d54:	79bb      	ldrb	r3, [r7, #6]
 8000d56:	2b0d      	cmp	r3, #13
 8000d58:	f200 80ca 	bhi.w	8000ef0 <SD_disk_ioctl+0x230>
 8000d5c:	a201      	add	r2, pc, #4	@ (adr r2, 8000d64 <SD_disk_ioctl+0xa4>)
 8000d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d62:	bf00      	nop
 8000d64:	08000e5b 	.word	0x08000e5b
 8000d68:	08000d9d 	.word	0x08000d9d
 8000d6c:	08000e4b 	.word	0x08000e4b
 8000d70:	08000ef1 	.word	0x08000ef1
 8000d74:	08000ef1 	.word	0x08000ef1
 8000d78:	08000ef1 	.word	0x08000ef1
 8000d7c:	08000ef1 	.word	0x08000ef1
 8000d80:	08000ef1 	.word	0x08000ef1
 8000d84:	08000ef1 	.word	0x08000ef1
 8000d88:	08000ef1 	.word	0x08000ef1
 8000d8c:	08000ef1 	.word	0x08000ef1
 8000d90:	08000e6d 	.word	0x08000e6d
 8000d94:	08000e91 	.word	0x08000e91
 8000d98:	08000eb5 	.word	0x08000eb5
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	2049      	movs	r0, #73	@ 0x49
 8000da0:	f7ff fd4e 	bl	8000840 <SD_SendCmd>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f040 80a6 	bne.w	8000ef8 <SD_disk_ioctl+0x238>
 8000dac:	f107 030c 	add.w	r3, r7, #12
 8000db0:	2110      	movs	r1, #16
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fcba 	bl	800072c <SD_RxDataBlock>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f000 809c 	beq.w	8000ef8 <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1)
 8000dc0:	7b3b      	ldrb	r3, [r7, #12]
 8000dc2:	099b      	lsrs	r3, r3, #6
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d10d      	bne.n	8000de6 <SD_disk_ioctl+0x126>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000dca:	7d7b      	ldrb	r3, [r7, #21]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	7d3b      	ldrb	r3, [r7, #20]
 8000dd0:	021b      	lsls	r3, r3, #8
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	4413      	add	r3, r2
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	3301      	adds	r3, #1
 8000dda:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000ddc:	8bfb      	ldrh	r3, [r7, #30]
 8000dde:	029a      	lsls	r2, r3, #10
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	e02d      	b.n	8000e42 <SD_disk_ioctl+0x182>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000de6:	7c7b      	ldrb	r3, [r7, #17]
 8000de8:	f003 030f 	and.w	r3, r3, #15
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	7dbb      	ldrb	r3, [r7, #22]
 8000df0:	09db      	lsrs	r3, r3, #7
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	4413      	add	r3, r2
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	7d7b      	ldrb	r3, [r7, #21]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	f003 0306 	and.w	r3, r3, #6
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	4413      	add	r3, r2
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	3302      	adds	r3, #2
 8000e0a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e0e:	7d3b      	ldrb	r3, [r7, #20]
 8000e10:	099b      	lsrs	r3, r3, #6
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	461a      	mov	r2, r3
 8000e16:	7cfb      	ldrb	r3, [r7, #19]
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	4413      	add	r3, r2
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	7cbb      	ldrb	r3, [r7, #18]
 8000e22:	029b      	lsls	r3, r3, #10
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	4413      	add	r3, r2
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	3301      	adds	r3, #1
 8000e32:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e34:	8bfa      	ldrh	r2, [r7, #30]
 8000e36:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e3a:	3b09      	subs	r3, #9
 8000e3c:	409a      	lsls	r2, r3
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8000e48:	e056      	b.n	8000ef8 <SD_disk_ioctl+0x238>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e50:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000e58:	e055      	b.n	8000f06 <SD_disk_ioctl+0x246>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8000e5a:	f7ff fbe7 	bl	800062c <SD_ReadyWait>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2bff      	cmp	r3, #255	@ 0xff
 8000e62:	d14b      	bne.n	8000efc <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8000e64:	2300      	movs	r3, #0
 8000e66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000e6a:	e047      	b.n	8000efc <SD_disk_ioctl+0x23c>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	2049      	movs	r0, #73	@ 0x49
 8000e70:	f7ff fce6 	bl	8000840 <SD_SendCmd>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d142      	bne.n	8000f00 <SD_disk_ioctl+0x240>
 8000e7a:	2110      	movs	r1, #16
 8000e7c:	6a38      	ldr	r0, [r7, #32]
 8000e7e:	f7ff fc55 	bl	800072c <SD_RxDataBlock>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d03b      	beq.n	8000f00 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000e8e:	e037      	b.n	8000f00 <SD_disk_ioctl+0x240>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000e90:	2100      	movs	r1, #0
 8000e92:	204a      	movs	r0, #74	@ 0x4a
 8000e94:	f7ff fcd4 	bl	8000840 <SD_SendCmd>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d132      	bne.n	8000f04 <SD_disk_ioctl+0x244>
 8000e9e:	2110      	movs	r1, #16
 8000ea0:	6a38      	ldr	r0, [r7, #32]
 8000ea2:	f7ff fc43 	bl	800072c <SD_RxDataBlock>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d02b      	beq.n	8000f04 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8000eac:	2300      	movs	r3, #0
 8000eae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000eb2:	e027      	b.n	8000f04 <SD_disk_ioctl+0x244>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	207a      	movs	r0, #122	@ 0x7a
 8000eb8:	f7ff fcc2 	bl	8000840 <SD_SendCmd>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d116      	bne.n	8000ef0 <SD_disk_ioctl+0x230>
      {
        for (n = 0; n < 4; n++)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000ec8:	e00b      	b.n	8000ee2 <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 8000eca:	6a3c      	ldr	r4, [r7, #32]
 8000ecc:	1c63      	adds	r3, r4, #1
 8000ece:	623b      	str	r3, [r7, #32]
 8000ed0:	f7ff fb80 	bl	80005d4 <SPI_RxByte>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000ed8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000edc:	3301      	adds	r3, #1
 8000ede:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000ee2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000ee6:	2b03      	cmp	r3, #3
 8000ee8:	d9ef      	bls.n	8000eca <SD_disk_ioctl+0x20a>
        }

        res = RES_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }

    default:
      res = RES_PARERR;
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000ef6:	e006      	b.n	8000f06 <SD_disk_ioctl+0x246>
      break;
 8000ef8:	bf00      	nop
 8000efa:	e004      	b.n	8000f06 <SD_disk_ioctl+0x246>
      break;
 8000efc:	bf00      	nop
 8000efe:	e002      	b.n	8000f06 <SD_disk_ioctl+0x246>
      break;
 8000f00:	bf00      	nop
 8000f02:	e000      	b.n	8000f06 <SD_disk_ioctl+0x246>
      break;
 8000f04:	bf00      	nop
    }

    DESELECT();
 8000f06:	f7ff fb3f 	bl	8000588 <DESELECT>
    SPI_RxByte();
 8000f0a:	f7ff fb63 	bl	80005d4 <SPI_RxByte>
  }

  return res;
 8000f0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	372c      	adds	r7, #44	@ 0x2c
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd90      	pop	{r4, r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000000 	.word	0x20000000

08000f20 <GetSector>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 7 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	uint32_t sector = 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60fb      	str	r3, [r7, #12]

	if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a44      	ldr	r2, [pc, #272]	@ (8001040 <GetSector+0x120>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d806      	bhi.n	8000f42 <GetSector+0x22>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000f3a:	d302      	bcc.n	8000f42 <GetSector+0x22>
	{
		sector = FLASH_SECTOR_0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	e077      	b.n	8001032 <GetSector+0x112>
	}
	else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a3f      	ldr	r2, [pc, #252]	@ (8001044 <GetSector+0x124>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d806      	bhi.n	8000f58 <GetSector+0x38>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a3e      	ldr	r2, [pc, #248]	@ (8001048 <GetSector+0x128>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d302      	bcc.n	8000f58 <GetSector+0x38>
	{
		sector = FLASH_SECTOR_1;
 8000f52:	2301      	movs	r3, #1
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	e06c      	b.n	8001032 <GetSector+0x112>
	}
	else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a3c      	ldr	r2, [pc, #240]	@ (800104c <GetSector+0x12c>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d806      	bhi.n	8000f6e <GetSector+0x4e>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a3b      	ldr	r2, [pc, #236]	@ (8001050 <GetSector+0x130>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d302      	bcc.n	8000f6e <GetSector+0x4e>
	{
		sector = FLASH_SECTOR_2;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	e061      	b.n	8001032 <GetSector+0x112>
	}
	else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a38      	ldr	r2, [pc, #224]	@ (8001054 <GetSector+0x134>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d206      	bcs.n	8000f84 <GetSector+0x64>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a37      	ldr	r2, [pc, #220]	@ (8001058 <GetSector+0x138>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d302      	bcc.n	8000f84 <GetSector+0x64>
	{
		sector = FLASH_SECTOR_3;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	e056      	b.n	8001032 <GetSector+0x112>
	}
	else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a35      	ldr	r2, [pc, #212]	@ (800105c <GetSector+0x13c>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d206      	bcs.n	8000f9a <GetSector+0x7a>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a31      	ldr	r2, [pc, #196]	@ (8001054 <GetSector+0x134>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d902      	bls.n	8000f9a <GetSector+0x7a>
	{
		sector = FLASH_SECTOR_4;
 8000f94:	2304      	movs	r3, #4
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	e04b      	b.n	8001032 <GetSector+0x112>
	}
	else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a30      	ldr	r2, [pc, #192]	@ (8001060 <GetSector+0x140>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d206      	bcs.n	8000fb0 <GetSector+0x90>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a2d      	ldr	r2, [pc, #180]	@ (800105c <GetSector+0x13c>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d902      	bls.n	8000fb0 <GetSector+0x90>
	{
		sector = FLASH_SECTOR_5;
 8000faa:	2305      	movs	r3, #5
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	e040      	b.n	8001032 <GetSector+0x112>
	}
	else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a2c      	ldr	r2, [pc, #176]	@ (8001064 <GetSector+0x144>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d206      	bcs.n	8000fc6 <GetSector+0xa6>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a29      	ldr	r2, [pc, #164]	@ (8001060 <GetSector+0x140>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d902      	bls.n	8000fc6 <GetSector+0xa6>
	{
		sector = FLASH_SECTOR_6;
 8000fc0:	2306      	movs	r3, #6
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	e035      	b.n	8001032 <GetSector+0x112>
	}
	else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a27      	ldr	r2, [pc, #156]	@ (8001068 <GetSector+0x148>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d206      	bcs.n	8000fdc <GetSector+0xbc>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a24      	ldr	r2, [pc, #144]	@ (8001064 <GetSector+0x144>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d902      	bls.n	8000fdc <GetSector+0xbc>
	{
		sector = FLASH_SECTOR_7;
 8000fd6:	2307      	movs	r3, #7
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	e02a      	b.n	8001032 <GetSector+0x112>
	}
	else if((Address < 0x0809FFFF) && (Address >= 0x08080000))
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a23      	ldr	r2, [pc, #140]	@ (800106c <GetSector+0x14c>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d206      	bcs.n	8000ff2 <GetSector+0xd2>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a20      	ldr	r2, [pc, #128]	@ (8001068 <GetSector+0x148>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d902      	bls.n	8000ff2 <GetSector+0xd2>
	{
		sector = FLASH_SECTOR_8;
 8000fec:	2308      	movs	r3, #8
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	e01f      	b.n	8001032 <GetSector+0x112>
	}
	else if((Address < 0x080BFFFF) && (Address >= 0x080A0000))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a1e      	ldr	r2, [pc, #120]	@ (8001070 <GetSector+0x150>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d206      	bcs.n	8001008 <GetSector+0xe8>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a1b      	ldr	r2, [pc, #108]	@ (800106c <GetSector+0x14c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d902      	bls.n	8001008 <GetSector+0xe8>
	{
		sector = FLASH_SECTOR_9;
 8001002:	2309      	movs	r3, #9
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	e014      	b.n	8001032 <GetSector+0x112>
	}
	else if((Address < 0x080DFFFF) && (Address >= 0x080C0000))
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a1a      	ldr	r2, [pc, #104]	@ (8001074 <GetSector+0x154>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d806      	bhi.n	800101e <GetSector+0xfe>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a17      	ldr	r2, [pc, #92]	@ (8001070 <GetSector+0x150>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d902      	bls.n	800101e <GetSector+0xfe>
	{
		sector = FLASH_SECTOR_10;
 8001018:	230a      	movs	r3, #10
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	e009      	b.n	8001032 <GetSector+0x112>
	}
	else if((Address < 0x080FFFFF) && (Address >= 0x080E0000))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a15      	ldr	r2, [pc, #84]	@ (8001078 <GetSector+0x158>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d805      	bhi.n	8001032 <GetSector+0x112>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a14      	ldr	r2, [pc, #80]	@ (800107c <GetSector+0x15c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d901      	bls.n	8001032 <GetSector+0x112>
	{
		sector = FLASH_SECTOR_11;
 800102e:	230b      	movs	r3, #11
 8001030:	60fb      	str	r3, [r7, #12]
	}
	return sector;
 8001032:	68fb      	ldr	r3, [r7, #12]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	08003ffe 	.word	0x08003ffe
 8001044:	08007ffe 	.word	0x08007ffe
 8001048:	08004000 	.word	0x08004000
 800104c:	0800bffe 	.word	0x0800bffe
 8001050:	08008000 	.word	0x08008000
 8001054:	0800ffff 	.word	0x0800ffff
 8001058:	0800c000 	.word	0x0800c000
 800105c:	0801ffff 	.word	0x0801ffff
 8001060:	0803ffff 	.word	0x0803ffff
 8001064:	0805ffff 	.word	0x0805ffff
 8001068:	0807ffff 	.word	0x0807ffff
 800106c:	0809ffff 	.word	0x0809ffff
 8001070:	080bffff 	.word	0x080bffff
 8001074:	080dfffe 	.word	0x080dfffe
 8001078:	080ffffe 	.word	0x080ffffe
 800107c:	080dffff 	.word	0x080dffff

08001080 <Flash_Write_Data>:
	return float_variable;
}


uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t *Data, uint32_t numberofwords, uint8_t erase)
{
 8001080:	b5b0      	push	{r4, r5, r7, lr}
 8001082:	b08c      	sub	sp, #48	@ 0x30
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
 800108c:	70fb      	strb	r3, [r7, #3]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	62fb      	str	r3, [r7, #44]	@ 0x2c


	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 8001092:	f000 fe15 	bl	8001cc0 <HAL_FLASH_Unlock>

	/* Get the number of sector to erase from 1st sector */



	if(erase == 1)
 8001096:	78fb      	ldrb	r3, [r7, #3]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d128      	bne.n	80010ee <Flash_Write_Data+0x6e>
	{
		uint32_t StartSector = GetSector(StartSectorAddress);
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f7ff ff3f 	bl	8000f20 <GetSector>
 80010a2:	6238      	str	r0, [r7, #32]
		uint32_t EndSectorAddress = StartSectorAddress + numberofwords * 4;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	68fa      	ldr	r2, [r7, #12]
 80010aa:	4413      	add	r3, r2
 80010ac:	61fb      	str	r3, [r7, #28]
		uint32_t EndSector = GetSector(EndSectorAddress);
 80010ae:	69f8      	ldr	r0, [r7, #28]
 80010b0:	f7ff ff36 	bl	8000f20 <GetSector>
 80010b4:	61b8      	str	r0, [r7, #24]

		/* Fill EraseInit structure*/
		EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80010b6:	4b34      	ldr	r3, [pc, #208]	@ (8001188 <Flash_Write_Data+0x108>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
		EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80010bc:	4b32      	ldr	r3, [pc, #200]	@ (8001188 <Flash_Write_Data+0x108>)
 80010be:	2202      	movs	r2, #2
 80010c0:	611a      	str	r2, [r3, #16]
		EraseInitStruct.Sector        = StartSector;
 80010c2:	4a31      	ldr	r2, [pc, #196]	@ (8001188 <Flash_Write_Data+0x108>)
 80010c4:	6a3b      	ldr	r3, [r7, #32]
 80010c6:	6093      	str	r3, [r2, #8]
		EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	6a3b      	ldr	r3, [r7, #32]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	3301      	adds	r3, #1
 80010d0:	4a2d      	ldr	r2, [pc, #180]	@ (8001188 <Flash_Write_Data+0x108>)
 80010d2:	60d3      	str	r3, [r2, #12]

		/* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
		if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	4619      	mov	r1, r3
 80010da:	482b      	ldr	r0, [pc, #172]	@ (8001188 <Flash_Write_Data+0x108>)
 80010dc:	f000 ff5e 	bl	8001f9c <HAL_FLASHEx_Erase>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d044      	beq.n	8001170 <Flash_Write_Data+0xf0>
		{
			return HAL_FLASH_GetError ();
 80010e6:	f000 fe1d 	bl	8001d24 <HAL_FLASH_GetError>
 80010ea:	4603      	mov	r3, r0
 80010ec:	e047      	b.n	800117e <Flash_Write_Data+0xfe>
		}
	}
	else if(erase == 2)
 80010ee:	78fb      	ldrb	r3, [r7, #3]
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d13d      	bne.n	8001170 <Flash_Write_Data+0xf0>
	{

			uint32_t StartSector = GetSector(StartSectorAddress);;
 80010f4:	68f8      	ldr	r0, [r7, #12]
 80010f6:	f7ff ff13 	bl	8000f20 <GetSector>
 80010fa:	62b8      	str	r0, [r7, #40]	@ 0x28
			uint32_t EndSector = FLASH_SECTOR_11;//GetSector(EndSectorAddress);
 80010fc:	230b      	movs	r3, #11
 80010fe:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Fill EraseInit structure*/
			EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8001100:	4b21      	ldr	r3, [pc, #132]	@ (8001188 <Flash_Write_Data+0x108>)
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
			EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8001106:	4b20      	ldr	r3, [pc, #128]	@ (8001188 <Flash_Write_Data+0x108>)
 8001108:	2202      	movs	r2, #2
 800110a:	611a      	str	r2, [r3, #16]
			EraseInitStruct.Sector        = StartSector;
 800110c:	4a1e      	ldr	r2, [pc, #120]	@ (8001188 <Flash_Write_Data+0x108>)
 800110e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001110:	6093      	str	r3, [r2, #8]
			EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8001112:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	3301      	adds	r3, #1
 800111a:	4a1b      	ldr	r2, [pc, #108]	@ (8001188 <Flash_Write_Data+0x108>)
 800111c:	60d3      	str	r3, [r2, #12]

			/* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
		     you have to make sure that these data are rewritten before they are accessed during code
		     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
		     DCRST and ICRST bits in the FLASH_CR register. */
			if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4619      	mov	r1, r3
 8001124:	4818      	ldr	r0, [pc, #96]	@ (8001188 <Flash_Write_Data+0x108>)
 8001126:	f000 ff39 	bl	8001f9c <HAL_FLASHEx_Erase>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d01f      	beq.n	8001170 <Flash_Write_Data+0xf0>
			{
				return HAL_FLASH_GetError ();
 8001130:	f000 fdf8 	bl	8001d24 <HAL_FLASH_GetError>
 8001134:	4603      	mov	r3, r0
 8001136:	e022      	b.n	800117e <Flash_Write_Data+0xfe>
	/* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	while (sofar<numberofwords)
	{
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 8001138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	68ba      	ldr	r2, [r7, #8]
 800113e:	4413      	add	r3, r2
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2200      	movs	r2, #0
 8001144:	461c      	mov	r4, r3
 8001146:	4615      	mov	r5, r2
 8001148:	4622      	mov	r2, r4
 800114a:	462b      	mov	r3, r5
 800114c:	68f9      	ldr	r1, [r7, #12]
 800114e:	2002      	movs	r0, #2
 8001150:	f000 fd62 	bl	8001c18 <HAL_FLASH_Program>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d106      	bne.n	8001168 <Flash_Write_Data+0xe8>
		{
			StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	3304      	adds	r3, #4
 800115e:	60fb      	str	r3, [r7, #12]
			sofar++;
 8001160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001162:	3301      	adds	r3, #1
 8001164:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001166:	e003      	b.n	8001170 <Flash_Write_Data+0xf0>
		}
		else
		{
			/* Error occurred while writing data in Flash memory*/
			return HAL_FLASH_GetError ();
 8001168:	f000 fddc 	bl	8001d24 <HAL_FLASH_GetError>
 800116c:	4603      	mov	r3, r0
 800116e:	e006      	b.n	800117e <Flash_Write_Data+0xfe>
	while (sofar<numberofwords)
 8001170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	429a      	cmp	r2, r3
 8001176:	d8df      	bhi.n	8001138 <Flash_Write_Data+0xb8>
		}
	}

	/* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8001178:	f000 fdc4 	bl	8001d04 <HAL_FLASH_Lock>

	return 0;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3730      	adds	r7, #48	@ 0x30
 8001182:	46bd      	mov	sp, r7
 8001184:	bdb0      	pop	{r4, r5, r7, pc}
 8001186:	bf00      	nop
 8001188:	20000098 	.word	0x20000098

0800118c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001190:	f3bf 8f4f 	dsb	sy
}
 8001194:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001196:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <__NVIC_SystemReset+0x24>)
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800119e:	4904      	ldr	r1, [pc, #16]	@ (80011b0 <__NVIC_SystemReset+0x24>)
 80011a0:	4b04      	ldr	r3, [pc, #16]	@ (80011b4 <__NVIC_SystemReset+0x28>)
 80011a2:	4313      	orrs	r3, r2
 80011a4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80011a6:	f3bf 8f4f 	dsb	sy
}
 80011aa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80011ac:	bf00      	nop
 80011ae:	e7fd      	b.n	80011ac <__NVIC_SystemReset+0x20>
 80011b0:	e000ed00 	.word	0xe000ed00
 80011b4:	05fa0004 	.word	0x05fa0004

080011b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011bc:	f000 fba8 	bl	8001910 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c0:	f000 f86a 	bl	8001298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c4:	f000 f926 	bl	8001414 <MX_GPIO_Init>
  MX_SPI1_Init();
 80011c8:	f000 f8c4 	bl	8001354 <MX_SPI1_Init>
  MX_FATFS_Init();
 80011cc:	f002 fea0 	bl	8003f10 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 80011d0:	f000 f8f6 	bl	80013c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	fresult = f_mount(&fs, "/", 1);
 80011d4:	2201      	movs	r2, #1
 80011d6:	4923      	ldr	r1, [pc, #140]	@ (8001264 <main+0xac>)
 80011d8:	4823      	ldr	r0, [pc, #140]	@ (8001268 <main+0xb0>)
 80011da:	f005 f8e1 	bl	80063a0 <f_mount>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b22      	ldr	r3, [pc, #136]	@ (800126c <main+0xb4>)
 80011e4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 80011e6:	4b21      	ldr	r3, [pc, #132]	@ (800126c <main+0xb4>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d004      	beq.n	80011f8 <main+0x40>
		printMessage("ERROR!!! in mounting SD CARD...\n");
 80011ee:	4820      	ldr	r0, [pc, #128]	@ (8001270 <main+0xb8>)
 80011f0:	f000 f99c 	bl	800152c <printMessage>
		return 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	e032      	b.n	800125e <main+0xa6>
	} else {

		printMessage("SD CARD mounted successfully...\n");
 80011f8:	481e      	ldr	r0, [pc, #120]	@ (8001274 <main+0xbc>)
 80011fa:	f000 f997 	bl	800152c <printMessage>
	}


	fresult = f_open(&file, "003_Bootloader_User_App.bin", FA_READ);
 80011fe:	2201      	movs	r2, #1
 8001200:	491d      	ldr	r1, [pc, #116]	@ (8001278 <main+0xc0>)
 8001202:	481e      	ldr	r0, [pc, #120]	@ (800127c <main+0xc4>)
 8001204:	f005 f912 	bl	800642c <f_open>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	4b17      	ldr	r3, [pc, #92]	@ (800126c <main+0xb4>)
 800120e:	701a      	strb	r2, [r3, #0]

	if (fresult == FR_OK) {
 8001210:	4b16      	ldr	r3, [pc, #88]	@ (800126c <main+0xb4>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d113      	bne.n	8001240 <main+0x88>
		printMessage("003_Bootloader_User_App is open and the data is shown below\n");
 8001218:	4819      	ldr	r0, [pc, #100]	@ (8001280 <main+0xc8>)
 800121a:	f000 f987 	bl	800152c <printMessage>
		f_read(&file, buffer2, f_size(&file), &br);
 800121e:	4b17      	ldr	r3, [pc, #92]	@ (800127c <main+0xc4>)
 8001220:	68da      	ldr	r2, [r3, #12]
 8001222:	4b18      	ldr	r3, [pc, #96]	@ (8001284 <main+0xcc>)
 8001224:	4918      	ldr	r1, [pc, #96]	@ (8001288 <main+0xd0>)
 8001226:	4815      	ldr	r0, [pc, #84]	@ (800127c <main+0xc4>)
 8001228:	f005 fac8 	bl	80067bc <f_read>
		printMessage(buffer2);
 800122c:	4816      	ldr	r0, [pc, #88]	@ (8001288 <main+0xd0>)
 800122e:	f000 f97d 	bl	800152c <printMessage>
		printMessage("\n\n");
 8001232:	4816      	ldr	r0, [pc, #88]	@ (800128c <main+0xd4>)
 8001234:	f000 f97a 	bl	800152c <printMessage>
		f_close(&file);
 8001238:	4810      	ldr	r0, [pc, #64]	@ (800127c <main+0xc4>)
 800123a:	f005 fc9c 	bl	8006b76 <f_close>
 800123e:	e002      	b.n	8001246 <main+0x8e>
	} else {
		printMessage("ERROR!!! in opening 003_Bootloader_User_App...\n");
 8001240:	4813      	ldr	r0, [pc, #76]	@ (8001290 <main+0xd8>)
 8001242:	f000 f973 	bl	800152c <printMessage>
	}

	Flash_Write_Data(appAddress, (uint32_t*) buffer2, 12000, 1);
 8001246:	4b13      	ldr	r3, [pc, #76]	@ (8001294 <main+0xdc>)
 8001248:	6818      	ldr	r0, [r3, #0]
 800124a:	2301      	movs	r3, #1
 800124c:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 8001250:	490d      	ldr	r1, [pc, #52]	@ (8001288 <main+0xd0>)
 8001252:	f7ff ff15 	bl	8001080 <Flash_Write_Data>
	JumpToApplication();
 8001256:	f000 f98b 	bl	8001570 <JumpToApplication>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800125a:	bf00      	nop
 800125c:	e7fd      	b.n	800125a <main+0xa2>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800125e:	4618      	mov	r0, r3
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	08007768 	.word	0x08007768
 8001268:	20002f8c 	.word	0x20002f8c
 800126c:	20004ff4 	.word	0x20004ff4
 8001270:	0800776c 	.word	0x0800776c
 8001274:	08007790 	.word	0x08007790
 8001278:	080077b4 	.word	0x080077b4
 800127c:	20003fc4 	.word	0x20003fc4
 8001280:	080077d0 	.word	0x080077d0
 8001284:	20004ff8 	.word	0x20004ff8
 8001288:	200000ac 	.word	0x200000ac
 800128c:	08007810 	.word	0x08007810
 8001290:	08007814 	.word	0x08007814
 8001294:	20000004 	.word	0x20000004

08001298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b094      	sub	sp, #80	@ 0x50
 800129c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800129e:	f107 0320 	add.w	r3, r7, #32
 80012a2:	2230      	movs	r2, #48	@ 0x30
 80012a4:	2100      	movs	r1, #0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f005 fdd2 	bl	8006e50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ac:	f107 030c 	add.w	r3, r7, #12
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012bc:	2300      	movs	r3, #0
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	4b22      	ldr	r3, [pc, #136]	@ (800134c <SystemClock_Config+0xb4>)
 80012c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c4:	4a21      	ldr	r2, [pc, #132]	@ (800134c <SystemClock_Config+0xb4>)
 80012c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80012cc:	4b1f      	ldr	r3, [pc, #124]	@ (800134c <SystemClock_Config+0xb4>)
 80012ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012d8:	2300      	movs	r3, #0
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001350 <SystemClock_Config+0xb8>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001350 <SystemClock_Config+0xb8>)
 80012e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	4b19      	ldr	r3, [pc, #100]	@ (8001350 <SystemClock_Config+0xb8>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012f4:	2302      	movs	r3, #2
 80012f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012f8:	2301      	movs	r3, #1
 80012fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012fc:	2310      	movs	r3, #16
 80012fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001300:	2300      	movs	r3, #0
 8001302:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001304:	f107 0320 	add.w	r3, r7, #32
 8001308:	4618      	mov	r0, r3
 800130a:	f001 f937 	bl	800257c <HAL_RCC_OscConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001314:	f000 f95c 	bl	80015d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001318:	230f      	movs	r3, #15
 800131a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800131c:	2300      	movs	r3, #0
 800131e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001324:	2300      	movs	r3, #0
 8001326:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800132c:	f107 030c 	add.w	r3, r7, #12
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f001 fb9a 	bl	8002a6c <HAL_RCC_ClockConfig>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800133e:	f000 f947 	bl	80015d0 <Error_Handler>
  }
}
 8001342:	bf00      	nop
 8001344:	3750      	adds	r7, #80	@ 0x50
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40023800 	.word	0x40023800
 8001350:	40007000 	.word	0x40007000

08001354 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001358:	4b17      	ldr	r3, [pc, #92]	@ (80013b8 <MX_SPI1_Init+0x64>)
 800135a:	4a18      	ldr	r2, [pc, #96]	@ (80013bc <MX_SPI1_Init+0x68>)
 800135c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800135e:	4b16      	ldr	r3, [pc, #88]	@ (80013b8 <MX_SPI1_Init+0x64>)
 8001360:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001364:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001366:	4b14      	ldr	r3, [pc, #80]	@ (80013b8 <MX_SPI1_Init+0x64>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800136c:	4b12      	ldr	r3, [pc, #72]	@ (80013b8 <MX_SPI1_Init+0x64>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001372:	4b11      	ldr	r3, [pc, #68]	@ (80013b8 <MX_SPI1_Init+0x64>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001378:	4b0f      	ldr	r3, [pc, #60]	@ (80013b8 <MX_SPI1_Init+0x64>)
 800137a:	2200      	movs	r2, #0
 800137c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800137e:	4b0e      	ldr	r3, [pc, #56]	@ (80013b8 <MX_SPI1_Init+0x64>)
 8001380:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001384:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001386:	4b0c      	ldr	r3, [pc, #48]	@ (80013b8 <MX_SPI1_Init+0x64>)
 8001388:	2210      	movs	r2, #16
 800138a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800138c:	4b0a      	ldr	r3, [pc, #40]	@ (80013b8 <MX_SPI1_Init+0x64>)
 800138e:	2200      	movs	r2, #0
 8001390:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001392:	4b09      	ldr	r3, [pc, #36]	@ (80013b8 <MX_SPI1_Init+0x64>)
 8001394:	2200      	movs	r2, #0
 8001396:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001398:	4b07      	ldr	r3, [pc, #28]	@ (80013b8 <MX_SPI1_Init+0x64>)
 800139a:	2200      	movs	r2, #0
 800139c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800139e:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <MX_SPI1_Init+0x64>)
 80013a0:	220a      	movs	r2, #10
 80013a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013a4:	4804      	ldr	r0, [pc, #16]	@ (80013b8 <MX_SPI1_Init+0x64>)
 80013a6:	f001 fd41 	bl	8002e2c <HAL_SPI_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013b0:	f000 f90e 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20004ffc 	.word	0x20004ffc
 80013bc:	40013000 	.word	0x40013000

080013c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013c4:	4b11      	ldr	r3, [pc, #68]	@ (800140c <MX_USART2_UART_Init+0x4c>)
 80013c6:	4a12      	ldr	r2, [pc, #72]	@ (8001410 <MX_USART2_UART_Init+0x50>)
 80013c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013ca:	4b10      	ldr	r3, [pc, #64]	@ (800140c <MX_USART2_UART_Init+0x4c>)
 80013cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013d2:	4b0e      	ldr	r3, [pc, #56]	@ (800140c <MX_USART2_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013d8:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <MX_USART2_UART_Init+0x4c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013de:	4b0b      	ldr	r3, [pc, #44]	@ (800140c <MX_USART2_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013e4:	4b09      	ldr	r3, [pc, #36]	@ (800140c <MX_USART2_UART_Init+0x4c>)
 80013e6:	220c      	movs	r2, #12
 80013e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ea:	4b08      	ldr	r3, [pc, #32]	@ (800140c <MX_USART2_UART_Init+0x4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f0:	4b06      	ldr	r3, [pc, #24]	@ (800140c <MX_USART2_UART_Init+0x4c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013f6:	4805      	ldr	r0, [pc, #20]	@ (800140c <MX_USART2_UART_Init+0x4c>)
 80013f8:	f002 f97e 	bl	80036f8 <HAL_UART_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001402:	f000 f8e5 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20005054 	.word	0x20005054
 8001410:	40004400 	.word	0x40004400

08001414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	@ 0x28
 8001418:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
 8001428:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	4b3b      	ldr	r3, [pc, #236]	@ (800151c <MX_GPIO_Init+0x108>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	4a3a      	ldr	r2, [pc, #232]	@ (800151c <MX_GPIO_Init+0x108>)
 8001434:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001438:	6313      	str	r3, [r2, #48]	@ 0x30
 800143a:	4b38      	ldr	r3, [pc, #224]	@ (800151c <MX_GPIO_Init+0x108>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	4b34      	ldr	r3, [pc, #208]	@ (800151c <MX_GPIO_Init+0x108>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	4a33      	ldr	r2, [pc, #204]	@ (800151c <MX_GPIO_Init+0x108>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6313      	str	r3, [r2, #48]	@ 0x30
 8001456:	4b31      	ldr	r3, [pc, #196]	@ (800151c <MX_GPIO_Init+0x108>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	4b2d      	ldr	r3, [pc, #180]	@ (800151c <MX_GPIO_Init+0x108>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	4a2c      	ldr	r2, [pc, #176]	@ (800151c <MX_GPIO_Init+0x108>)
 800146c:	f043 0302 	orr.w	r3, r3, #2
 8001470:	6313      	str	r3, [r2, #48]	@ 0x30
 8001472:	4b2a      	ldr	r3, [pc, #168]	@ (800151c <MX_GPIO_Init+0x108>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	4b26      	ldr	r3, [pc, #152]	@ (800151c <MX_GPIO_Init+0x108>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	4a25      	ldr	r2, [pc, #148]	@ (800151c <MX_GPIO_Init+0x108>)
 8001488:	f043 0308 	orr.w	r3, r3, #8
 800148c:	6313      	str	r3, [r2, #48]	@ 0x30
 800148e:	4b23      	ldr	r3, [pc, #140]	@ (800151c <MX_GPIO_Init+0x108>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	f003 0308 	and.w	r3, r3, #8
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800149a:	2200      	movs	r2, #0
 800149c:	2101      	movs	r1, #1
 800149e:	4820      	ldr	r0, [pc, #128]	@ (8001520 <MX_GPIO_Init+0x10c>)
 80014a0:	f001 f83a 	bl	8002518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80014a4:	2200      	movs	r2, #0
 80014a6:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80014aa:	481e      	ldr	r0, [pc, #120]	@ (8001524 <MX_GPIO_Init+0x110>)
 80014ac:	f001 f834 	bl	8002518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014b0:	2301      	movs	r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014b4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	4619      	mov	r1, r3
 80014c4:	4818      	ldr	r0, [pc, #96]	@ (8001528 <MX_GPIO_Init+0x114>)
 80014c6:	f000 fe8b 	bl	80021e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80014ca:	2301      	movs	r3, #1
 80014cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ce:	2301      	movs	r3, #1
 80014d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2300      	movs	r3, #0
 80014d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	4619      	mov	r1, r3
 80014e0:	480f      	ldr	r0, [pc, #60]	@ (8001520 <MX_GPIO_Init+0x10c>)
 80014e2:	f000 fe7d 	bl	80021e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80014e6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80014ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ec:	2301      	movs	r3, #1
 80014ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2300      	movs	r3, #0
 80014f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4619      	mov	r1, r3
 80014fe:	4809      	ldr	r0, [pc, #36]	@ (8001524 <MX_GPIO_Init+0x110>)
 8001500:	f000 fe6e 	bl	80021e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001504:	2200      	movs	r2, #0
 8001506:	2100      	movs	r1, #0
 8001508:	2006      	movs	r0, #6
 800150a:	f000 fb4e 	bl	8001baa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800150e:	2006      	movs	r0, #6
 8001510:	f000 fb67 	bl	8001be2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001514:	bf00      	nop
 8001516:	3728      	adds	r7, #40	@ 0x28
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40023800 	.word	0x40023800
 8001520:	40020400 	.word	0x40020400
 8001524:	40020c00 	.word	0x40020c00
 8001528:	40020000 	.word	0x40020000

0800152c <printMessage>:

/* USER CODE BEGIN 4 */

void printMessage(char *format, ...)
{
 800152c:	b40f      	push	{r0, r1, r2, r3}
 800152e:	b580      	push	{r7, lr}
 8001530:	b09a      	sub	sp, #104	@ 0x68
 8001532:	af00      	add	r7, sp, #0
	char comingMessage[100];

	va_list vaList;
	va_start(vaList, format);
 8001534:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001538:	603b      	str	r3, [r7, #0]
	vsprintf(comingMessage, format, vaList);
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001540:	4618      	mov	r0, r3
 8001542:	f005 fc7b 	bl	8006e3c <vsiprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)comingMessage, strlen(comingMessage), HAL_MAX_DELAY);
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	4618      	mov	r0, r3
 800154a:	f7fe fe41 	bl	80001d0 <strlen>
 800154e:	4603      	mov	r3, r0
 8001550:	b29a      	uxth	r2, r3
 8001552:	1d39      	adds	r1, r7, #4
 8001554:	f04f 33ff 	mov.w	r3, #4294967295
 8001558:	4804      	ldr	r0, [pc, #16]	@ (800156c <printMessage+0x40>)
 800155a:	f002 f91d 	bl	8003798 <HAL_UART_Transmit>
	va_end(vaList);
}
 800155e:	bf00      	nop
 8001560:	3768      	adds	r7, #104	@ 0x68
 8001562:	46bd      	mov	sp, r7
 8001564:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001568:	b004      	add	sp, #16
 800156a:	4770      	bx	lr
 800156c:	20005054 	.word	0x20005054

08001570 <JumpToApplication>:


void JumpToApplication(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
    // Ana uygulamanın MSP değerini al
//    uint32_t appAddress = 0x08008000;
    uint32_t appSP = *(__IO uint32_t*)appAddress;
 8001576:	4b0d      	ldr	r3, [pc, #52]	@ (80015ac <JumpToApplication+0x3c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	f383 8808 	msr	MSP, r3
}
 8001588:	bf00      	nop

    // MSP'yi ayarla
    __set_MSP(appSP);

    // Vektör Tablosu'nu ayarla
    SCB->VTOR = appAddress;
 800158a:	4a09      	ldr	r2, [pc, #36]	@ (80015b0 <JumpToApplication+0x40>)
 800158c:	4b07      	ldr	r3, [pc, #28]	@ (80015ac <JumpToApplication+0x3c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6093      	str	r3, [r2, #8]

    // Reset Handler adresini al
    uint32_t appResetHandler = *(__IO uint32_t*)(appAddress + 0x04);
 8001592:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <JumpToApplication+0x3c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	3304      	adds	r3, #4
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	60bb      	str	r3, [r7, #8]

    // Uygulamayı çalıştır
    typedef void (*pFunction)(void);
    pFunction JumpToApp = (pFunction)appResetHandler;
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	607b      	str	r3, [r7, #4]
    JumpToApp();
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4798      	blx	r3
}
 80015a4:	bf00      	nop
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000004 	.word	0x20000004
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <HAL_GPIO_EXTI_Callback>:
	// 6- Sifirlama isleyicisini çagir ve kullanici uygulamasina atla
	bootloader_application_reset_handler();
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_0)
 80015be:	88fb      	ldrh	r3, [r7, #6]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d101      	bne.n	80015c8 <HAL_GPIO_EXTI_Callback+0x14>
		NVIC_SystemReset();
 80015c4:	f7ff fde2 	bl	800118c <__NVIC_SystemReset>
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80015d4:	b672      	cpsid	i
}
 80015d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <Error_Handler+0x8>

080015dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
 80015e6:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <HAL_MspInit+0x4c>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ea:	4a0f      	ldr	r2, [pc, #60]	@ (8001628 <HAL_MspInit+0x4c>)
 80015ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80015f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001628 <HAL_MspInit+0x4c>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	603b      	str	r3, [r7, #0]
 8001602:	4b09      	ldr	r3, [pc, #36]	@ (8001628 <HAL_MspInit+0x4c>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001606:	4a08      	ldr	r2, [pc, #32]	@ (8001628 <HAL_MspInit+0x4c>)
 8001608:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800160c:	6413      	str	r3, [r2, #64]	@ 0x40
 800160e:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <HAL_MspInit+0x4c>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001616:	603b      	str	r3, [r7, #0]
 8001618:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800

0800162c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	@ 0x28
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a19      	ldr	r2, [pc, #100]	@ (80016b0 <HAL_SPI_MspInit+0x84>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d12b      	bne.n	80016a6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	4b18      	ldr	r3, [pc, #96]	@ (80016b4 <HAL_SPI_MspInit+0x88>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001656:	4a17      	ldr	r2, [pc, #92]	@ (80016b4 <HAL_SPI_MspInit+0x88>)
 8001658:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800165c:	6453      	str	r3, [r2, #68]	@ 0x44
 800165e:	4b15      	ldr	r3, [pc, #84]	@ (80016b4 <HAL_SPI_MspInit+0x88>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001662:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	4b11      	ldr	r3, [pc, #68]	@ (80016b4 <HAL_SPI_MspInit+0x88>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	4a10      	ldr	r2, [pc, #64]	@ (80016b4 <HAL_SPI_MspInit+0x88>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6313      	str	r3, [r2, #48]	@ 0x30
 800167a:	4b0e      	ldr	r3, [pc, #56]	@ (80016b4 <HAL_SPI_MspInit+0x88>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001686:	23e0      	movs	r3, #224	@ 0xe0
 8001688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001692:	2303      	movs	r3, #3
 8001694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001696:	2305      	movs	r3, #5
 8001698:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	4619      	mov	r1, r3
 80016a0:	4805      	ldr	r0, [pc, #20]	@ (80016b8 <HAL_SPI_MspInit+0x8c>)
 80016a2:	f000 fd9d 	bl	80021e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016a6:	bf00      	nop
 80016a8:	3728      	adds	r7, #40	@ 0x28
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40013000 	.word	0x40013000
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40020000 	.word	0x40020000

080016bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08a      	sub	sp, #40	@ 0x28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a19      	ldr	r2, [pc, #100]	@ (8001740 <HAL_UART_MspInit+0x84>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d12b      	bne.n	8001736 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
 80016e2:	4b18      	ldr	r3, [pc, #96]	@ (8001744 <HAL_UART_MspInit+0x88>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e6:	4a17      	ldr	r2, [pc, #92]	@ (8001744 <HAL_UART_MspInit+0x88>)
 80016e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ee:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <HAL_UART_MspInit+0x88>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <HAL_UART_MspInit+0x88>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001702:	4a10      	ldr	r2, [pc, #64]	@ (8001744 <HAL_UART_MspInit+0x88>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	6313      	str	r3, [r2, #48]	@ 0x30
 800170a:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <HAL_UART_MspInit+0x88>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001716:	230c      	movs	r3, #12
 8001718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	2302      	movs	r3, #2
 800171c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001722:	2303      	movs	r3, #3
 8001724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001726:	2307      	movs	r3, #7
 8001728:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4619      	mov	r1, r3
 8001730:	4805      	ldr	r0, [pc, #20]	@ (8001748 <HAL_UART_MspInit+0x8c>)
 8001732:	f000 fd55 	bl	80021e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001736:	bf00      	nop
 8001738:	3728      	adds	r7, #40	@ 0x28
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40004400 	.word	0x40004400
 8001744:	40023800 	.word	0x40023800
 8001748:	40020000 	.word	0x40020000

0800174c <SDTimer_Handler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SDTimer_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001750:	4b0e      	ldr	r3, [pc, #56]	@ (800178c <SDTimer_Handler+0x40>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	d006      	beq.n	8001768 <SDTimer_Handler+0x1c>
    Timer1--;
 800175a:	4b0c      	ldr	r3, [pc, #48]	@ (800178c <SDTimer_Handler+0x40>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	b2db      	uxtb	r3, r3
 8001760:	3b01      	subs	r3, #1
 8001762:	b2da      	uxtb	r2, r3
 8001764:	4b09      	ldr	r3, [pc, #36]	@ (800178c <SDTimer_Handler+0x40>)
 8001766:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001768:	4b09      	ldr	r3, [pc, #36]	@ (8001790 <SDTimer_Handler+0x44>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d006      	beq.n	8001780 <SDTimer_Handler+0x34>
    Timer2--;
 8001772:	4b07      	ldr	r3, [pc, #28]	@ (8001790 <SDTimer_Handler+0x44>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	b2db      	uxtb	r3, r3
 8001778:	3b01      	subs	r3, #1
 800177a:	b2da      	uxtb	r2, r3
 800177c:	4b04      	ldr	r3, [pc, #16]	@ (8001790 <SDTimer_Handler+0x44>)
 800177e:	701a      	strb	r2, [r3, #0]
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	2000509d 	.word	0x2000509d
 8001790:	2000509e 	.word	0x2000509e

08001794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <NMI_Handler+0x4>

0800179c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <HardFault_Handler+0x4>

080017a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <MemManage_Handler+0x4>

080017ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <BusFault_Handler+0x4>

080017b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <UsageFault_Handler+0x4>

080017bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 80017ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001818 <SysTick_Handler+0x30>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	3301      	adds	r3, #1
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	4b08      	ldr	r3, [pc, #32]	@ (8001818 <SysTick_Handler+0x30>)
 80017f8:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 80017fa:	4b07      	ldr	r3, [pc, #28]	@ (8001818 <SysTick_Handler+0x30>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b09      	cmp	r3, #9
 8001802:	d904      	bls.n	800180e <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8001804:	4b04      	ldr	r3, [pc, #16]	@ (8001818 <SysTick_Handler+0x30>)
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 800180a:	f7ff ff9f 	bl	800174c <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800180e:	f000 f8d1 	bl	80019b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	2000509c 	.word	0x2000509c

0800181c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001820:	2001      	movs	r0, #1
 8001822:	f000 fe93 	bl	800254c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001834:	4a14      	ldr	r2, [pc, #80]	@ (8001888 <_sbrk+0x5c>)
 8001836:	4b15      	ldr	r3, [pc, #84]	@ (800188c <_sbrk+0x60>)
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001840:	4b13      	ldr	r3, [pc, #76]	@ (8001890 <_sbrk+0x64>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d102      	bne.n	800184e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001848:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <_sbrk+0x64>)
 800184a:	4a12      	ldr	r2, [pc, #72]	@ (8001894 <_sbrk+0x68>)
 800184c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800184e:	4b10      	ldr	r3, [pc, #64]	@ (8001890 <_sbrk+0x64>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	429a      	cmp	r2, r3
 800185a:	d207      	bcs.n	800186c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800185c:	f005 fb00 	bl	8006e60 <__errno>
 8001860:	4603      	mov	r3, r0
 8001862:	220c      	movs	r2, #12
 8001864:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001866:	f04f 33ff 	mov.w	r3, #4294967295
 800186a:	e009      	b.n	8001880 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800186c:	4b08      	ldr	r3, [pc, #32]	@ (8001890 <_sbrk+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001872:	4b07      	ldr	r3, [pc, #28]	@ (8001890 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	4a05      	ldr	r2, [pc, #20]	@ (8001890 <_sbrk+0x64>)
 800187c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800187e:	68fb      	ldr	r3, [r7, #12]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20020000 	.word	0x20020000
 800188c:	00000400 	.word	0x00000400
 8001890:	200050a0 	.word	0x200050a0
 8001894:	20005450 	.word	0x20005450

08001898 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800189c:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <SystemInit+0x20>)
 800189e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018a2:	4a05      	ldr	r2, [pc, #20]	@ (80018b8 <SystemInit+0x20>)
 80018a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018f4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018c0:	f7ff ffea 	bl	8001898 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018c4:	480c      	ldr	r0, [pc, #48]	@ (80018f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018c6:	490d      	ldr	r1, [pc, #52]	@ (80018fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001900 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018cc:	e002      	b.n	80018d4 <LoopCopyDataInit>

080018ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018d2:	3304      	adds	r3, #4

080018d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d8:	d3f9      	bcc.n	80018ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018da:	4a0a      	ldr	r2, [pc, #40]	@ (8001904 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001908 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e0:	e001      	b.n	80018e6 <LoopFillZerobss>

080018e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018e4:	3204      	adds	r2, #4

080018e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e8:	d3fb      	bcc.n	80018e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ea:	f005 fabf 	bl	8006e6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ee:	f7ff fc63 	bl	80011b8 <main>
  bx  lr    
 80018f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018fc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001900:	08007dac 	.word	0x08007dac
  ldr r2, =_sbss
 8001904:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001908:	2000544c 	.word	0x2000544c

0800190c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800190c:	e7fe      	b.n	800190c <ADC_IRQHandler>
	...

08001910 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001914:	4b0e      	ldr	r3, [pc, #56]	@ (8001950 <HAL_Init+0x40>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a0d      	ldr	r2, [pc, #52]	@ (8001950 <HAL_Init+0x40>)
 800191a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800191e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001920:	4b0b      	ldr	r3, [pc, #44]	@ (8001950 <HAL_Init+0x40>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a0a      	ldr	r2, [pc, #40]	@ (8001950 <HAL_Init+0x40>)
 8001926:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800192a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800192c:	4b08      	ldr	r3, [pc, #32]	@ (8001950 <HAL_Init+0x40>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a07      	ldr	r2, [pc, #28]	@ (8001950 <HAL_Init+0x40>)
 8001932:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001936:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001938:	2003      	movs	r0, #3
 800193a:	f000 f92b 	bl	8001b94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800193e:	200f      	movs	r0, #15
 8001940:	f000 f808 	bl	8001954 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001944:	f7ff fe4a 	bl	80015dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40023c00 	.word	0x40023c00

08001954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800195c:	4b12      	ldr	r3, [pc, #72]	@ (80019a8 <HAL_InitTick+0x54>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4b12      	ldr	r3, [pc, #72]	@ (80019ac <HAL_InitTick+0x58>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	4619      	mov	r1, r3
 8001966:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800196a:	fbb3 f3f1 	udiv	r3, r3, r1
 800196e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001972:	4618      	mov	r0, r3
 8001974:	f000 f943 	bl	8001bfe <HAL_SYSTICK_Config>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e00e      	b.n	80019a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b0f      	cmp	r3, #15
 8001986:	d80a      	bhi.n	800199e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001988:	2200      	movs	r2, #0
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	f04f 30ff 	mov.w	r0, #4294967295
 8001990:	f000 f90b 	bl	8001baa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001994:	4a06      	ldr	r2, [pc, #24]	@ (80019b0 <HAL_InitTick+0x5c>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800199a:	2300      	movs	r3, #0
 800199c:	e000      	b.n	80019a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000008 	.word	0x20000008
 80019ac:	20000010 	.word	0x20000010
 80019b0:	2000000c 	.word	0x2000000c

080019b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019b8:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <HAL_IncTick+0x20>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	461a      	mov	r2, r3
 80019be:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <HAL_IncTick+0x24>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4413      	add	r3, r2
 80019c4:	4a04      	ldr	r2, [pc, #16]	@ (80019d8 <HAL_IncTick+0x24>)
 80019c6:	6013      	str	r3, [r2, #0]
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	20000010 	.word	0x20000010
 80019d8:	200050a4 	.word	0x200050a4

080019dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return uwTick;
 80019e0:	4b03      	ldr	r3, [pc, #12]	@ (80019f0 <HAL_GetTick+0x14>)
 80019e2:	681b      	ldr	r3, [r3, #0]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	200050a4 	.word	0x200050a4

080019f4 <__NVIC_SetPriorityGrouping>:
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a04:	4b0c      	ldr	r3, [pc, #48]	@ (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a10:	4013      	ands	r3, r2
 8001a12:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a26:	4a04      	ldr	r2, [pc, #16]	@ (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	60d3      	str	r3, [r2, #12]
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <__NVIC_GetPriorityGrouping>:
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a40:	4b04      	ldr	r3, [pc, #16]	@ (8001a54 <__NVIC_GetPriorityGrouping+0x18>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	0a1b      	lsrs	r3, r3, #8
 8001a46:	f003 0307 	and.w	r3, r3, #7
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <__NVIC_EnableIRQ>:
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	db0b      	blt.n	8001a82 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	f003 021f 	and.w	r2, r3, #31
 8001a70:	4907      	ldr	r1, [pc, #28]	@ (8001a90 <__NVIC_EnableIRQ+0x38>)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	095b      	lsrs	r3, r3, #5
 8001a78:	2001      	movs	r0, #1
 8001a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000e100 	.word	0xe000e100

08001a94 <__NVIC_SetPriority>:
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	6039      	str	r1, [r7, #0]
 8001a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	db0a      	blt.n	8001abe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	490c      	ldr	r1, [pc, #48]	@ (8001ae0 <__NVIC_SetPriority+0x4c>)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	0112      	lsls	r2, r2, #4
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	440b      	add	r3, r1
 8001ab8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001abc:	e00a      	b.n	8001ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4908      	ldr	r1, [pc, #32]	@ (8001ae4 <__NVIC_SetPriority+0x50>)
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	3b04      	subs	r3, #4
 8001acc:	0112      	lsls	r2, r2, #4
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	761a      	strb	r2, [r3, #24]
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000e100 	.word	0xe000e100
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <NVIC_EncodePriority>:
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b089      	sub	sp, #36	@ 0x24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f1c3 0307 	rsb	r3, r3, #7
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	bf28      	it	cs
 8001b06:	2304      	movcs	r3, #4
 8001b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	2b06      	cmp	r3, #6
 8001b10:	d902      	bls.n	8001b18 <NVIC_EncodePriority+0x30>
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	3b03      	subs	r3, #3
 8001b16:	e000      	b.n	8001b1a <NVIC_EncodePriority+0x32>
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43da      	mvns	r2, r3
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	401a      	ands	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b30:	f04f 31ff 	mov.w	r1, #4294967295
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3a:	43d9      	mvns	r1, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b40:	4313      	orrs	r3, r2
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3724      	adds	r7, #36	@ 0x24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b60:	d301      	bcc.n	8001b66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b62:	2301      	movs	r3, #1
 8001b64:	e00f      	b.n	8001b86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b66:	4a0a      	ldr	r2, [pc, #40]	@ (8001b90 <SysTick_Config+0x40>)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b6e:	210f      	movs	r1, #15
 8001b70:	f04f 30ff 	mov.w	r0, #4294967295
 8001b74:	f7ff ff8e 	bl	8001a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b78:	4b05      	ldr	r3, [pc, #20]	@ (8001b90 <SysTick_Config+0x40>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b7e:	4b04      	ldr	r3, [pc, #16]	@ (8001b90 <SysTick_Config+0x40>)
 8001b80:	2207      	movs	r2, #7
 8001b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	e000e010 	.word	0xe000e010

08001b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff ff29 	bl	80019f4 <__NVIC_SetPriorityGrouping>
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b086      	sub	sp, #24
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	60b9      	str	r1, [r7, #8]
 8001bb4:	607a      	str	r2, [r7, #4]
 8001bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bbc:	f7ff ff3e 	bl	8001a3c <__NVIC_GetPriorityGrouping>
 8001bc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	68b9      	ldr	r1, [r7, #8]
 8001bc6:	6978      	ldr	r0, [r7, #20]
 8001bc8:	f7ff ff8e 	bl	8001ae8 <NVIC_EncodePriority>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff5d 	bl	8001a94 <__NVIC_SetPriority>
}
 8001bda:	bf00      	nop
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	4603      	mov	r3, r0
 8001bea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ff31 	bl	8001a58 <__NVIC_EnableIRQ>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff ffa2 	bl	8001b50 <SysTick_Config>
 8001c0c:	4603      	mov	r3, r0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001c2a:	4b23      	ldr	r3, [pc, #140]	@ (8001cb8 <HAL_FLASH_Program+0xa0>)
 8001c2c:	7e1b      	ldrb	r3, [r3, #24]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d101      	bne.n	8001c36 <HAL_FLASH_Program+0x1e>
 8001c32:	2302      	movs	r3, #2
 8001c34:	e03b      	b.n	8001cae <HAL_FLASH_Program+0x96>
 8001c36:	4b20      	ldr	r3, [pc, #128]	@ (8001cb8 <HAL_FLASH_Program+0xa0>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c3c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001c40:	f000 f87c 	bl	8001d3c <FLASH_WaitForLastOperation>
 8001c44:	4603      	mov	r3, r0
 8001c46:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001c48:	7dfb      	ldrb	r3, [r7, #23]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d12b      	bne.n	8001ca6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d105      	bne.n	8001c60 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001c54:	783b      	ldrb	r3, [r7, #0]
 8001c56:	4619      	mov	r1, r3
 8001c58:	68b8      	ldr	r0, [r7, #8]
 8001c5a:	f000 f927 	bl	8001eac <FLASH_Program_Byte>
 8001c5e:	e016      	b.n	8001c8e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d105      	bne.n	8001c72 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001c66:	883b      	ldrh	r3, [r7, #0]
 8001c68:	4619      	mov	r1, r3
 8001c6a:	68b8      	ldr	r0, [r7, #8]
 8001c6c:	f000 f8fa 	bl	8001e64 <FLASH_Program_HalfWord>
 8001c70:	e00d      	b.n	8001c8e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d105      	bne.n	8001c84 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	68b8      	ldr	r0, [r7, #8]
 8001c7e:	f000 f8cf 	bl	8001e20 <FLASH_Program_Word>
 8001c82:	e004      	b.n	8001c8e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001c84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c88:	68b8      	ldr	r0, [r7, #8]
 8001c8a:	f000 f897 	bl	8001dbc <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c8e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001c92:	f000 f853 	bl	8001d3c <FLASH_WaitForLastOperation>
 8001c96:	4603      	mov	r3, r0
 8001c98:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001c9a:	4b08      	ldr	r3, [pc, #32]	@ (8001cbc <HAL_FLASH_Program+0xa4>)
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	4a07      	ldr	r2, [pc, #28]	@ (8001cbc <HAL_FLASH_Program+0xa4>)
 8001ca0:	f023 0301 	bic.w	r3, r3, #1
 8001ca4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001ca6:	4b04      	ldr	r3, [pc, #16]	@ (8001cb8 <HAL_FLASH_Program+0xa0>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	200050a8 	.word	0x200050a8
 8001cbc:	40023c00 	.word	0x40023c00

08001cc0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001cca:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf8 <HAL_FLASH_Unlock+0x38>)
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	da0b      	bge.n	8001cea <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001cd2:	4b09      	ldr	r3, [pc, #36]	@ (8001cf8 <HAL_FLASH_Unlock+0x38>)
 8001cd4:	4a09      	ldr	r2, [pc, #36]	@ (8001cfc <HAL_FLASH_Unlock+0x3c>)
 8001cd6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001cd8:	4b07      	ldr	r3, [pc, #28]	@ (8001cf8 <HAL_FLASH_Unlock+0x38>)
 8001cda:	4a09      	ldr	r2, [pc, #36]	@ (8001d00 <HAL_FLASH_Unlock+0x40>)
 8001cdc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001cde:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <HAL_FLASH_Unlock+0x38>)
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	da01      	bge.n	8001cea <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001cea:	79fb      	ldrb	r3, [r7, #7]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	40023c00 	.word	0x40023c00
 8001cfc:	45670123 	.word	0x45670123
 8001d00:	cdef89ab 	.word	0xcdef89ab

08001d04 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001d08:	4b05      	ldr	r3, [pc, #20]	@ (8001d20 <HAL_FLASH_Lock+0x1c>)
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	4a04      	ldr	r2, [pc, #16]	@ (8001d20 <HAL_FLASH_Lock+0x1c>)
 8001d0e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001d12:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	40023c00 	.word	0x40023c00

08001d24 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8001d28:	4b03      	ldr	r3, [pc, #12]	@ (8001d38 <HAL_FLASH_GetError+0x14>)
 8001d2a:	69db      	ldr	r3, [r3, #28]
}  
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	200050a8 	.word	0x200050a8

08001d3c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001d48:	4b1a      	ldr	r3, [pc, #104]	@ (8001db4 <FLASH_WaitForLastOperation+0x78>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d4e:	f7ff fe45 	bl	80019dc <HAL_GetTick>
 8001d52:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001d54:	e010      	b.n	8001d78 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d5c:	d00c      	beq.n	8001d78 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d007      	beq.n	8001d74 <FLASH_WaitForLastOperation+0x38>
 8001d64:	f7ff fe3a 	bl	80019dc <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d201      	bcs.n	8001d78 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e019      	b.n	8001dac <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001d78:	4b0f      	ldr	r3, [pc, #60]	@ (8001db8 <FLASH_WaitForLastOperation+0x7c>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1e8      	bne.n	8001d56 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001d84:	4b0c      	ldr	r3, [pc, #48]	@ (8001db8 <FLASH_WaitForLastOperation+0x7c>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d002      	beq.n	8001d96 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001d90:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <FLASH_WaitForLastOperation+0x7c>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001d96:	4b08      	ldr	r3, [pc, #32]	@ (8001db8 <FLASH_WaitForLastOperation+0x7c>)
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001da2:	f000 f8a5 	bl	8001ef0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
  
}  
 8001dac:	4618      	mov	r0, r3
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	200050a8 	.word	0x200050a8
 8001db8:	40023c00 	.word	0x40023c00

08001dbc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001dc8:	4b14      	ldr	r3, [pc, #80]	@ (8001e1c <FLASH_Program_DoubleWord+0x60>)
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	4a13      	ldr	r2, [pc, #76]	@ (8001e1c <FLASH_Program_DoubleWord+0x60>)
 8001dce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001dd2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001dd4:	4b11      	ldr	r3, [pc, #68]	@ (8001e1c <FLASH_Program_DoubleWord+0x60>)
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	4a10      	ldr	r2, [pc, #64]	@ (8001e1c <FLASH_Program_DoubleWord+0x60>)
 8001dda:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001dde:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001de0:	4b0e      	ldr	r3, [pc, #56]	@ (8001e1c <FLASH_Program_DoubleWord+0x60>)
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	4a0d      	ldr	r2, [pc, #52]	@ (8001e1c <FLASH_Program_DoubleWord+0x60>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001df2:	f3bf 8f6f 	isb	sy
}
 8001df6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001df8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001dfc:	f04f 0200 	mov.w	r2, #0
 8001e00:	f04f 0300 	mov.w	r3, #0
 8001e04:	000a      	movs	r2, r1
 8001e06:	2300      	movs	r3, #0
 8001e08:	68f9      	ldr	r1, [r7, #12]
 8001e0a:	3104      	adds	r1, #4
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	600b      	str	r3, [r1, #0]
}
 8001e10:	bf00      	nop
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	40023c00 	.word	0x40023c00

08001e20 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e60 <FLASH_Program_Word+0x40>)
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	4a0c      	ldr	r2, [pc, #48]	@ (8001e60 <FLASH_Program_Word+0x40>)
 8001e30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e34:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001e36:	4b0a      	ldr	r3, [pc, #40]	@ (8001e60 <FLASH_Program_Word+0x40>)
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	4a09      	ldr	r2, [pc, #36]	@ (8001e60 <FLASH_Program_Word+0x40>)
 8001e3c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e40:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001e42:	4b07      	ldr	r3, [pc, #28]	@ (8001e60 <FLASH_Program_Word+0x40>)
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	4a06      	ldr	r2, [pc, #24]	@ (8001e60 <FLASH_Program_Word+0x40>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	601a      	str	r2, [r3, #0]
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	40023c00 	.word	0x40023c00

08001e64 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e70:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea8 <FLASH_Program_HalfWord+0x44>)
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	4a0c      	ldr	r2, [pc, #48]	@ (8001ea8 <FLASH_Program_HalfWord+0x44>)
 8001e76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea8 <FLASH_Program_HalfWord+0x44>)
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	4a09      	ldr	r2, [pc, #36]	@ (8001ea8 <FLASH_Program_HalfWord+0x44>)
 8001e82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001e88:	4b07      	ldr	r3, [pc, #28]	@ (8001ea8 <FLASH_Program_HalfWord+0x44>)
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	4a06      	ldr	r2, [pc, #24]	@ (8001ea8 <FLASH_Program_HalfWord+0x44>)
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	887a      	ldrh	r2, [r7, #2]
 8001e98:	801a      	strh	r2, [r3, #0]
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	40023c00 	.word	0x40023c00

08001eac <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001eec <FLASH_Program_Byte+0x40>)
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	4a0b      	ldr	r2, [pc, #44]	@ (8001eec <FLASH_Program_Byte+0x40>)
 8001ebe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ec2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001ec4:	4b09      	ldr	r3, [pc, #36]	@ (8001eec <FLASH_Program_Byte+0x40>)
 8001ec6:	4a09      	ldr	r2, [pc, #36]	@ (8001eec <FLASH_Program_Byte+0x40>)
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ecc:	4b07      	ldr	r3, [pc, #28]	@ (8001eec <FLASH_Program_Byte+0x40>)
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	4a06      	ldr	r2, [pc, #24]	@ (8001eec <FLASH_Program_Byte+0x40>)
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	78fa      	ldrb	r2, [r7, #3]
 8001edc:	701a      	strb	r2, [r3, #0]
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	40023c00 	.word	0x40023c00

08001ef0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001ef4:	4b27      	ldr	r3, [pc, #156]	@ (8001f94 <FLASH_SetErrorCode+0xa4>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f003 0310 	and.w	r3, r3, #16
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d008      	beq.n	8001f12 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001f00:	4b25      	ldr	r3, [pc, #148]	@ (8001f98 <FLASH_SetErrorCode+0xa8>)
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	f043 0310 	orr.w	r3, r3, #16
 8001f08:	4a23      	ldr	r2, [pc, #140]	@ (8001f98 <FLASH_SetErrorCode+0xa8>)
 8001f0a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001f0c:	4b21      	ldr	r3, [pc, #132]	@ (8001f94 <FLASH_SetErrorCode+0xa4>)
 8001f0e:	2210      	movs	r2, #16
 8001f10:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001f12:	4b20      	ldr	r3, [pc, #128]	@ (8001f94 <FLASH_SetErrorCode+0xa4>)
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	f003 0320 	and.w	r3, r3, #32
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d008      	beq.n	8001f30 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001f98 <FLASH_SetErrorCode+0xa8>)
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	f043 0308 	orr.w	r3, r3, #8
 8001f26:	4a1c      	ldr	r2, [pc, #112]	@ (8001f98 <FLASH_SetErrorCode+0xa8>)
 8001f28:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001f94 <FLASH_SetErrorCode+0xa4>)
 8001f2c:	2220      	movs	r2, #32
 8001f2e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001f30:	4b18      	ldr	r3, [pc, #96]	@ (8001f94 <FLASH_SetErrorCode+0xa4>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d008      	beq.n	8001f4e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001f3c:	4b16      	ldr	r3, [pc, #88]	@ (8001f98 <FLASH_SetErrorCode+0xa8>)
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	f043 0304 	orr.w	r3, r3, #4
 8001f44:	4a14      	ldr	r2, [pc, #80]	@ (8001f98 <FLASH_SetErrorCode+0xa8>)
 8001f46:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001f48:	4b12      	ldr	r3, [pc, #72]	@ (8001f94 <FLASH_SetErrorCode+0xa4>)
 8001f4a:	2240      	movs	r2, #64	@ 0x40
 8001f4c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001f4e:	4b11      	ldr	r3, [pc, #68]	@ (8001f94 <FLASH_SetErrorCode+0xa4>)
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d008      	beq.n	8001f6c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f98 <FLASH_SetErrorCode+0xa8>)
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	f043 0302 	orr.w	r3, r3, #2
 8001f62:	4a0d      	ldr	r2, [pc, #52]	@ (8001f98 <FLASH_SetErrorCode+0xa8>)
 8001f64:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001f66:	4b0b      	ldr	r3, [pc, #44]	@ (8001f94 <FLASH_SetErrorCode+0xa4>)
 8001f68:	2280      	movs	r2, #128	@ 0x80
 8001f6a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001f6c:	4b09      	ldr	r3, [pc, #36]	@ (8001f94 <FLASH_SetErrorCode+0xa4>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d008      	beq.n	8001f8a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001f78:	4b07      	ldr	r3, [pc, #28]	@ (8001f98 <FLASH_SetErrorCode+0xa8>)
 8001f7a:	69db      	ldr	r3, [r3, #28]
 8001f7c:	f043 0320 	orr.w	r3, r3, #32
 8001f80:	4a05      	ldr	r2, [pc, #20]	@ (8001f98 <FLASH_SetErrorCode+0xa8>)
 8001f82:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001f84:	4b03      	ldr	r3, [pc, #12]	@ (8001f94 <FLASH_SetErrorCode+0xa4>)
 8001f86:	2202      	movs	r2, #2
 8001f88:	60da      	str	r2, [r3, #12]
  }
}
 8001f8a:	bf00      	nop
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	40023c00 	.word	0x40023c00
 8001f98:	200050a8 	.word	0x200050a8

08001f9c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001fae:	4b31      	ldr	r3, [pc, #196]	@ (8002074 <HAL_FLASHEx_Erase+0xd8>)
 8001fb0:	7e1b      	ldrb	r3, [r3, #24]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d101      	bne.n	8001fba <HAL_FLASHEx_Erase+0x1e>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e058      	b.n	800206c <HAL_FLASHEx_Erase+0xd0>
 8001fba:	4b2e      	ldr	r3, [pc, #184]	@ (8002074 <HAL_FLASHEx_Erase+0xd8>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001fc0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001fc4:	f7ff feba 	bl	8001d3c <FLASH_WaitForLastOperation>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001fcc:	7bfb      	ldrb	r3, [r7, #15]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d148      	bne.n	8002064 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d115      	bne.n	800200e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	4619      	mov	r1, r3
 8001fee:	4610      	mov	r0, r2
 8001ff0:	f000 f844 	bl	800207c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ff4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001ff8:	f7ff fea0 	bl	8001d3c <FLASH_WaitForLastOperation>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002000:	4b1d      	ldr	r3, [pc, #116]	@ (8002078 <HAL_FLASHEx_Erase+0xdc>)
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	4a1c      	ldr	r2, [pc, #112]	@ (8002078 <HAL_FLASHEx_Erase+0xdc>)
 8002006:	f023 0304 	bic.w	r3, r3, #4
 800200a:	6113      	str	r3, [r2, #16]
 800200c:	e028      	b.n	8002060 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	e01c      	b.n	8002050 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	4619      	mov	r1, r3
 800201e:	68b8      	ldr	r0, [r7, #8]
 8002020:	f000 f850 	bl	80020c4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002024:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002028:	f7ff fe88 	bl	8001d3c <FLASH_WaitForLastOperation>
 800202c:	4603      	mov	r3, r0
 800202e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002030:	4b11      	ldr	r3, [pc, #68]	@ (8002078 <HAL_FLASHEx_Erase+0xdc>)
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	4a10      	ldr	r2, [pc, #64]	@ (8002078 <HAL_FLASHEx_Erase+0xdc>)
 8002036:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 800203a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800203c:	7bfb      	ldrb	r3, [r7, #15]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	601a      	str	r2, [r3, #0]
          break;
 8002048:	e00a      	b.n	8002060 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	3301      	adds	r3, #1
 800204e:	60bb      	str	r3, [r7, #8]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68da      	ldr	r2, [r3, #12]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	4413      	add	r3, r2
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	429a      	cmp	r2, r3
 800205e:	d3da      	bcc.n	8002016 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002060:	f000 f878 	bl	8002154 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002064:	4b03      	ldr	r3, [pc, #12]	@ (8002074 <HAL_FLASHEx_Erase+0xd8>)
 8002066:	2200      	movs	r2, #0
 8002068:	761a      	strb	r2, [r3, #24]

  return status;
 800206a:	7bfb      	ldrb	r3, [r7, #15]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	200050a8 	.word	0x200050a8
 8002078:	40023c00 	.word	0x40023c00

0800207c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	6039      	str	r1, [r7, #0]
 8002086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002088:	4b0d      	ldr	r3, [pc, #52]	@ (80020c0 <FLASH_MassErase+0x44>)
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	4a0c      	ldr	r2, [pc, #48]	@ (80020c0 <FLASH_MassErase+0x44>)
 800208e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002092:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002094:	4b0a      	ldr	r3, [pc, #40]	@ (80020c0 <FLASH_MassErase+0x44>)
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	4a09      	ldr	r2, [pc, #36]	@ (80020c0 <FLASH_MassErase+0x44>)
 800209a:	f043 0304 	orr.w	r3, r3, #4
 800209e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80020a0:	4b07      	ldr	r3, [pc, #28]	@ (80020c0 <FLASH_MassErase+0x44>)
 80020a2:	691a      	ldr	r2, [r3, #16]
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	021b      	lsls	r3, r3, #8
 80020a8:	4313      	orrs	r3, r2
 80020aa:	4a05      	ldr	r2, [pc, #20]	@ (80020c0 <FLASH_MassErase+0x44>)
 80020ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020b0:	6113      	str	r3, [r2, #16]
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40023c00 	.word	0x40023c00

080020c4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	460b      	mov	r3, r1
 80020ce:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d102      	bne.n	80020e0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	e010      	b.n	8002102 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80020e0:	78fb      	ldrb	r3, [r7, #3]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d103      	bne.n	80020ee <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80020e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	e009      	b.n	8002102 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80020ee:	78fb      	ldrb	r3, [r7, #3]
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d103      	bne.n	80020fc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80020f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	e002      	b.n	8002102 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80020fc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002100:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002102:	4b13      	ldr	r3, [pc, #76]	@ (8002150 <FLASH_Erase_Sector+0x8c>)
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	4a12      	ldr	r2, [pc, #72]	@ (8002150 <FLASH_Erase_Sector+0x8c>)
 8002108:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800210c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800210e:	4b10      	ldr	r3, [pc, #64]	@ (8002150 <FLASH_Erase_Sector+0x8c>)
 8002110:	691a      	ldr	r2, [r3, #16]
 8002112:	490f      	ldr	r1, [pc, #60]	@ (8002150 <FLASH_Erase_Sector+0x8c>)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4313      	orrs	r3, r2
 8002118:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <FLASH_Erase_Sector+0x8c>)
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	4a0c      	ldr	r2, [pc, #48]	@ (8002150 <FLASH_Erase_Sector+0x8c>)
 8002120:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002124:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002126:	4b0a      	ldr	r3, [pc, #40]	@ (8002150 <FLASH_Erase_Sector+0x8c>)
 8002128:	691a      	ldr	r2, [r3, #16]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	4313      	orrs	r3, r2
 8002130:	4a07      	ldr	r2, [pc, #28]	@ (8002150 <FLASH_Erase_Sector+0x8c>)
 8002132:	f043 0302 	orr.w	r3, r3, #2
 8002136:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002138:	4b05      	ldr	r3, [pc, #20]	@ (8002150 <FLASH_Erase_Sector+0x8c>)
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	4a04      	ldr	r2, [pc, #16]	@ (8002150 <FLASH_Erase_Sector+0x8c>)
 800213e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002142:	6113      	str	r3, [r2, #16]
}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	40023c00 	.word	0x40023c00

08002154 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002158:	4b20      	ldr	r3, [pc, #128]	@ (80021dc <FLASH_FlushCaches+0x88>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002160:	2b00      	cmp	r3, #0
 8002162:	d017      	beq.n	8002194 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002164:	4b1d      	ldr	r3, [pc, #116]	@ (80021dc <FLASH_FlushCaches+0x88>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a1c      	ldr	r2, [pc, #112]	@ (80021dc <FLASH_FlushCaches+0x88>)
 800216a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800216e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002170:	4b1a      	ldr	r3, [pc, #104]	@ (80021dc <FLASH_FlushCaches+0x88>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a19      	ldr	r2, [pc, #100]	@ (80021dc <FLASH_FlushCaches+0x88>)
 8002176:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800217a:	6013      	str	r3, [r2, #0]
 800217c:	4b17      	ldr	r3, [pc, #92]	@ (80021dc <FLASH_FlushCaches+0x88>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a16      	ldr	r2, [pc, #88]	@ (80021dc <FLASH_FlushCaches+0x88>)
 8002182:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002186:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002188:	4b14      	ldr	r3, [pc, #80]	@ (80021dc <FLASH_FlushCaches+0x88>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a13      	ldr	r2, [pc, #76]	@ (80021dc <FLASH_FlushCaches+0x88>)
 800218e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002192:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002194:	4b11      	ldr	r3, [pc, #68]	@ (80021dc <FLASH_FlushCaches+0x88>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800219c:	2b00      	cmp	r3, #0
 800219e:	d017      	beq.n	80021d0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80021a0:	4b0e      	ldr	r3, [pc, #56]	@ (80021dc <FLASH_FlushCaches+0x88>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0d      	ldr	r2, [pc, #52]	@ (80021dc <FLASH_FlushCaches+0x88>)
 80021a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80021aa:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80021ac:	4b0b      	ldr	r3, [pc, #44]	@ (80021dc <FLASH_FlushCaches+0x88>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a0a      	ldr	r2, [pc, #40]	@ (80021dc <FLASH_FlushCaches+0x88>)
 80021b2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021b6:	6013      	str	r3, [r2, #0]
 80021b8:	4b08      	ldr	r3, [pc, #32]	@ (80021dc <FLASH_FlushCaches+0x88>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a07      	ldr	r2, [pc, #28]	@ (80021dc <FLASH_FlushCaches+0x88>)
 80021be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80021c2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80021c4:	4b05      	ldr	r3, [pc, #20]	@ (80021dc <FLASH_FlushCaches+0x88>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a04      	ldr	r2, [pc, #16]	@ (80021dc <FLASH_FlushCaches+0x88>)
 80021ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021ce:	6013      	str	r3, [r2, #0]
  }
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40023c00 	.word	0x40023c00

080021e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b089      	sub	sp, #36	@ 0x24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021f6:	2300      	movs	r3, #0
 80021f8:	61fb      	str	r3, [r7, #28]
 80021fa:	e16b      	b.n	80024d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021fc:	2201      	movs	r2, #1
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	4013      	ands	r3, r2
 800220e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	429a      	cmp	r2, r3
 8002216:	f040 815a 	bne.w	80024ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	2b01      	cmp	r3, #1
 8002224:	d005      	beq.n	8002232 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800222e:	2b02      	cmp	r3, #2
 8002230:	d130      	bne.n	8002294 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	2203      	movs	r2, #3
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4313      	orrs	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002268:	2201      	movs	r2, #1
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	f003 0201 	and.w	r2, r3, #1
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4313      	orrs	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 0303 	and.w	r3, r3, #3
 800229c:	2b03      	cmp	r3, #3
 800229e:	d017      	beq.n	80022d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	2203      	movs	r2, #3
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 0303 	and.w	r3, r3, #3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d123      	bne.n	8002324 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	08da      	lsrs	r2, r3, #3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3208      	adds	r2, #8
 80022e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	220f      	movs	r2, #15
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	691a      	ldr	r2, [r3, #16]
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	08da      	lsrs	r2, r3, #3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3208      	adds	r2, #8
 800231e:	69b9      	ldr	r1, [r7, #24]
 8002320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	2203      	movs	r2, #3
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4013      	ands	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 0203 	and.w	r2, r3, #3
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 80b4 	beq.w	80024ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	4b60      	ldr	r3, [pc, #384]	@ (80024ec <HAL_GPIO_Init+0x30c>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236e:	4a5f      	ldr	r2, [pc, #380]	@ (80024ec <HAL_GPIO_Init+0x30c>)
 8002370:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002374:	6453      	str	r3, [r2, #68]	@ 0x44
 8002376:	4b5d      	ldr	r3, [pc, #372]	@ (80024ec <HAL_GPIO_Init+0x30c>)
 8002378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002382:	4a5b      	ldr	r2, [pc, #364]	@ (80024f0 <HAL_GPIO_Init+0x310>)
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	089b      	lsrs	r3, r3, #2
 8002388:	3302      	adds	r3, #2
 800238a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	220f      	movs	r2, #15
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43db      	mvns	r3, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4013      	ands	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a52      	ldr	r2, [pc, #328]	@ (80024f4 <HAL_GPIO_Init+0x314>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d02b      	beq.n	8002406 <HAL_GPIO_Init+0x226>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a51      	ldr	r2, [pc, #324]	@ (80024f8 <HAL_GPIO_Init+0x318>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d025      	beq.n	8002402 <HAL_GPIO_Init+0x222>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a50      	ldr	r2, [pc, #320]	@ (80024fc <HAL_GPIO_Init+0x31c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d01f      	beq.n	80023fe <HAL_GPIO_Init+0x21e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a4f      	ldr	r2, [pc, #316]	@ (8002500 <HAL_GPIO_Init+0x320>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d019      	beq.n	80023fa <HAL_GPIO_Init+0x21a>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a4e      	ldr	r2, [pc, #312]	@ (8002504 <HAL_GPIO_Init+0x324>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d013      	beq.n	80023f6 <HAL_GPIO_Init+0x216>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a4d      	ldr	r2, [pc, #308]	@ (8002508 <HAL_GPIO_Init+0x328>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d00d      	beq.n	80023f2 <HAL_GPIO_Init+0x212>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a4c      	ldr	r2, [pc, #304]	@ (800250c <HAL_GPIO_Init+0x32c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d007      	beq.n	80023ee <HAL_GPIO_Init+0x20e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a4b      	ldr	r2, [pc, #300]	@ (8002510 <HAL_GPIO_Init+0x330>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d101      	bne.n	80023ea <HAL_GPIO_Init+0x20a>
 80023e6:	2307      	movs	r3, #7
 80023e8:	e00e      	b.n	8002408 <HAL_GPIO_Init+0x228>
 80023ea:	2308      	movs	r3, #8
 80023ec:	e00c      	b.n	8002408 <HAL_GPIO_Init+0x228>
 80023ee:	2306      	movs	r3, #6
 80023f0:	e00a      	b.n	8002408 <HAL_GPIO_Init+0x228>
 80023f2:	2305      	movs	r3, #5
 80023f4:	e008      	b.n	8002408 <HAL_GPIO_Init+0x228>
 80023f6:	2304      	movs	r3, #4
 80023f8:	e006      	b.n	8002408 <HAL_GPIO_Init+0x228>
 80023fa:	2303      	movs	r3, #3
 80023fc:	e004      	b.n	8002408 <HAL_GPIO_Init+0x228>
 80023fe:	2302      	movs	r3, #2
 8002400:	e002      	b.n	8002408 <HAL_GPIO_Init+0x228>
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <HAL_GPIO_Init+0x228>
 8002406:	2300      	movs	r3, #0
 8002408:	69fa      	ldr	r2, [r7, #28]
 800240a:	f002 0203 	and.w	r2, r2, #3
 800240e:	0092      	lsls	r2, r2, #2
 8002410:	4093      	lsls	r3, r2
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4313      	orrs	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002418:	4935      	ldr	r1, [pc, #212]	@ (80024f0 <HAL_GPIO_Init+0x310>)
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	089b      	lsrs	r3, r3, #2
 800241e:	3302      	adds	r3, #2
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002426:	4b3b      	ldr	r3, [pc, #236]	@ (8002514 <HAL_GPIO_Init+0x334>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	43db      	mvns	r3, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4013      	ands	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800244a:	4a32      	ldr	r2, [pc, #200]	@ (8002514 <HAL_GPIO_Init+0x334>)
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002450:	4b30      	ldr	r3, [pc, #192]	@ (8002514 <HAL_GPIO_Init+0x334>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	43db      	mvns	r3, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4013      	ands	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d003      	beq.n	8002474 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002474:	4a27      	ldr	r2, [pc, #156]	@ (8002514 <HAL_GPIO_Init+0x334>)
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800247a:	4b26      	ldr	r3, [pc, #152]	@ (8002514 <HAL_GPIO_Init+0x334>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	43db      	mvns	r3, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4013      	ands	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800249e:	4a1d      	ldr	r2, [pc, #116]	@ (8002514 <HAL_GPIO_Init+0x334>)
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002514 <HAL_GPIO_Init+0x334>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024c8:	4a12      	ldr	r2, [pc, #72]	@ (8002514 <HAL_GPIO_Init+0x334>)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3301      	adds	r3, #1
 80024d2:	61fb      	str	r3, [r7, #28]
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	2b0f      	cmp	r3, #15
 80024d8:	f67f ae90 	bls.w	80021fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024dc:	bf00      	nop
 80024de:	bf00      	nop
 80024e0:	3724      	adds	r7, #36	@ 0x24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	40023800 	.word	0x40023800
 80024f0:	40013800 	.word	0x40013800
 80024f4:	40020000 	.word	0x40020000
 80024f8:	40020400 	.word	0x40020400
 80024fc:	40020800 	.word	0x40020800
 8002500:	40020c00 	.word	0x40020c00
 8002504:	40021000 	.word	0x40021000
 8002508:	40021400 	.word	0x40021400
 800250c:	40021800 	.word	0x40021800
 8002510:	40021c00 	.word	0x40021c00
 8002514:	40013c00 	.word	0x40013c00

08002518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	807b      	strh	r3, [r7, #2]
 8002524:	4613      	mov	r3, r2
 8002526:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002528:	787b      	ldrb	r3, [r7, #1]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800252e:	887a      	ldrh	r2, [r7, #2]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002534:	e003      	b.n	800253e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002536:	887b      	ldrh	r3, [r7, #2]
 8002538:	041a      	lsls	r2, r3, #16
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	619a      	str	r2, [r3, #24]
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
	...

0800254c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002556:	4b08      	ldr	r3, [pc, #32]	@ (8002578 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002558:	695a      	ldr	r2, [r3, #20]
 800255a:	88fb      	ldrh	r3, [r7, #6]
 800255c:	4013      	ands	r3, r2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d006      	beq.n	8002570 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002562:	4a05      	ldr	r2, [pc, #20]	@ (8002578 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002564:	88fb      	ldrh	r3, [r7, #6]
 8002566:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002568:	88fb      	ldrh	r3, [r7, #6]
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff f822 	bl	80015b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002570:	bf00      	nop
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40013c00 	.word	0x40013c00

0800257c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e267      	b.n	8002a5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d075      	beq.n	8002686 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800259a:	4b88      	ldr	r3, [pc, #544]	@ (80027bc <HAL_RCC_OscConfig+0x240>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 030c 	and.w	r3, r3, #12
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d00c      	beq.n	80025c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025a6:	4b85      	ldr	r3, [pc, #532]	@ (80027bc <HAL_RCC_OscConfig+0x240>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ae:	2b08      	cmp	r3, #8
 80025b0:	d112      	bne.n	80025d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025b2:	4b82      	ldr	r3, [pc, #520]	@ (80027bc <HAL_RCC_OscConfig+0x240>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025be:	d10b      	bne.n	80025d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c0:	4b7e      	ldr	r3, [pc, #504]	@ (80027bc <HAL_RCC_OscConfig+0x240>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d05b      	beq.n	8002684 <HAL_RCC_OscConfig+0x108>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d157      	bne.n	8002684 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e242      	b.n	8002a5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025e0:	d106      	bne.n	80025f0 <HAL_RCC_OscConfig+0x74>
 80025e2:	4b76      	ldr	r3, [pc, #472]	@ (80027bc <HAL_RCC_OscConfig+0x240>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a75      	ldr	r2, [pc, #468]	@ (80027bc <HAL_RCC_OscConfig+0x240>)
 80025e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	e01d      	b.n	800262c <HAL_RCC_OscConfig+0xb0>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025f8:	d10c      	bne.n	8002614 <HAL_RCC_OscConfig+0x98>
 80025fa:	4b70      	ldr	r3, [pc, #448]	@ (80027bc <HAL_RCC_OscConfig+0x240>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a6f      	ldr	r2, [pc, #444]	@ (80027bc <HAL_RCC_OscConfig+0x240>)
 8002600:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002604:	6013      	str	r3, [r2, #0]
 8002606:	4b6d      	ldr	r3, [pc, #436]	@ (80027bc <HAL_RCC_OscConfig+0x240>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a6c      	ldr	r2, [pc, #432]	@ (80027bc <HAL_RCC_OscConfig+0x240>)
 800260c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002610:	6013      	str	r3, [r2, #0]
 8002612:	e00b      	b.n	800262c <HAL_RCC_OscConfig+0xb0>
 8002614:	4b69      	ldr	r3, [pc, #420]	@ (80027bc <HAL_RCC_OscConfig+0x240>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a68      	ldr	r2, [pc, #416]	@ (80027bc <HAL_RCC_OscConfig+0x240>)
 800261a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800261e:	6013      	str	r3, [r2, #0]
 8002620:	4b66      	ldr	r3, [pc, #408]	@ (80027bc <HAL_RCC_OscConfig+0x240>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a65      	ldr	r2, [pc, #404]	@ (80027bc <HAL_RCC_OscConfig+0x240>)
 8002626:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800262a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d013      	beq.n	800265c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002634:	f7ff f9d2 	bl	80019dc <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800263c:	f7ff f9ce 	bl	80019dc <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b64      	cmp	r3, #100	@ 0x64
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e207      	b.n	8002a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264e:	4b5b      	ldr	r3, [pc, #364]	@ (80027bc <HAL_RCC_OscConfig+0x240>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0f0      	beq.n	800263c <HAL_RCC_OscConfig+0xc0>
 800265a:	e014      	b.n	8002686 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265c:	f7ff f9be 	bl	80019dc <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002664:	f7ff f9ba 	bl	80019dc <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b64      	cmp	r3, #100	@ 0x64
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e1f3      	b.n	8002a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002676:	4b51      	ldr	r3, [pc, #324]	@ (80027bc <HAL_RCC_OscConfig+0x240>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f0      	bne.n	8002664 <HAL_RCC_OscConfig+0xe8>
 8002682:	e000      	b.n	8002686 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d063      	beq.n	800275a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002692:	4b4a      	ldr	r3, [pc, #296]	@ (80027bc <HAL_RCC_OscConfig+0x240>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 030c 	and.w	r3, r3, #12
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00b      	beq.n	80026b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800269e:	4b47      	ldr	r3, [pc, #284]	@ (80027bc <HAL_RCC_OscConfig+0x240>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026a6:	2b08      	cmp	r3, #8
 80026a8:	d11c      	bne.n	80026e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026aa:	4b44      	ldr	r3, [pc, #272]	@ (80027bc <HAL_RCC_OscConfig+0x240>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d116      	bne.n	80026e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026b6:	4b41      	ldr	r3, [pc, #260]	@ (80027bc <HAL_RCC_OscConfig+0x240>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d005      	beq.n	80026ce <HAL_RCC_OscConfig+0x152>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d001      	beq.n	80026ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e1c7      	b.n	8002a5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ce:	4b3b      	ldr	r3, [pc, #236]	@ (80027bc <HAL_RCC_OscConfig+0x240>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	4937      	ldr	r1, [pc, #220]	@ (80027bc <HAL_RCC_OscConfig+0x240>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026e2:	e03a      	b.n	800275a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d020      	beq.n	800272e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ec:	4b34      	ldr	r3, [pc, #208]	@ (80027c0 <HAL_RCC_OscConfig+0x244>)
 80026ee:	2201      	movs	r2, #1
 80026f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f2:	f7ff f973 	bl	80019dc <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026fa:	f7ff f96f 	bl	80019dc <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e1a8      	b.n	8002a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800270c:	4b2b      	ldr	r3, [pc, #172]	@ (80027bc <HAL_RCC_OscConfig+0x240>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0f0      	beq.n	80026fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002718:	4b28      	ldr	r3, [pc, #160]	@ (80027bc <HAL_RCC_OscConfig+0x240>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	4925      	ldr	r1, [pc, #148]	@ (80027bc <HAL_RCC_OscConfig+0x240>)
 8002728:	4313      	orrs	r3, r2
 800272a:	600b      	str	r3, [r1, #0]
 800272c:	e015      	b.n	800275a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800272e:	4b24      	ldr	r3, [pc, #144]	@ (80027c0 <HAL_RCC_OscConfig+0x244>)
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002734:	f7ff f952 	bl	80019dc <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800273c:	f7ff f94e 	bl	80019dc <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e187      	b.n	8002a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800274e:	4b1b      	ldr	r3, [pc, #108]	@ (80027bc <HAL_RCC_OscConfig+0x240>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1f0      	bne.n	800273c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0308 	and.w	r3, r3, #8
 8002762:	2b00      	cmp	r3, #0
 8002764:	d036      	beq.n	80027d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d016      	beq.n	800279c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800276e:	4b15      	ldr	r3, [pc, #84]	@ (80027c4 <HAL_RCC_OscConfig+0x248>)
 8002770:	2201      	movs	r2, #1
 8002772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002774:	f7ff f932 	bl	80019dc <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800277c:	f7ff f92e 	bl	80019dc <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e167      	b.n	8002a5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800278e:	4b0b      	ldr	r3, [pc, #44]	@ (80027bc <HAL_RCC_OscConfig+0x240>)
 8002790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0f0      	beq.n	800277c <HAL_RCC_OscConfig+0x200>
 800279a:	e01b      	b.n	80027d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800279c:	4b09      	ldr	r3, [pc, #36]	@ (80027c4 <HAL_RCC_OscConfig+0x248>)
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a2:	f7ff f91b 	bl	80019dc <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027a8:	e00e      	b.n	80027c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027aa:	f7ff f917 	bl	80019dc <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d907      	bls.n	80027c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e150      	b.n	8002a5e <HAL_RCC_OscConfig+0x4e2>
 80027bc:	40023800 	.word	0x40023800
 80027c0:	42470000 	.word	0x42470000
 80027c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027c8:	4b88      	ldr	r3, [pc, #544]	@ (80029ec <HAL_RCC_OscConfig+0x470>)
 80027ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1ea      	bne.n	80027aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 8097 	beq.w	8002910 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027e2:	2300      	movs	r3, #0
 80027e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027e6:	4b81      	ldr	r3, [pc, #516]	@ (80029ec <HAL_RCC_OscConfig+0x470>)
 80027e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10f      	bne.n	8002812 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	4b7d      	ldr	r3, [pc, #500]	@ (80029ec <HAL_RCC_OscConfig+0x470>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fa:	4a7c      	ldr	r2, [pc, #496]	@ (80029ec <HAL_RCC_OscConfig+0x470>)
 80027fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002800:	6413      	str	r3, [r2, #64]	@ 0x40
 8002802:	4b7a      	ldr	r3, [pc, #488]	@ (80029ec <HAL_RCC_OscConfig+0x470>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800280a:	60bb      	str	r3, [r7, #8]
 800280c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800280e:	2301      	movs	r3, #1
 8002810:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002812:	4b77      	ldr	r3, [pc, #476]	@ (80029f0 <HAL_RCC_OscConfig+0x474>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800281a:	2b00      	cmp	r3, #0
 800281c:	d118      	bne.n	8002850 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800281e:	4b74      	ldr	r3, [pc, #464]	@ (80029f0 <HAL_RCC_OscConfig+0x474>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a73      	ldr	r2, [pc, #460]	@ (80029f0 <HAL_RCC_OscConfig+0x474>)
 8002824:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002828:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800282a:	f7ff f8d7 	bl	80019dc <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002832:	f7ff f8d3 	bl	80019dc <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e10c      	b.n	8002a5e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002844:	4b6a      	ldr	r3, [pc, #424]	@ (80029f0 <HAL_RCC_OscConfig+0x474>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0f0      	beq.n	8002832 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d106      	bne.n	8002866 <HAL_RCC_OscConfig+0x2ea>
 8002858:	4b64      	ldr	r3, [pc, #400]	@ (80029ec <HAL_RCC_OscConfig+0x470>)
 800285a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800285c:	4a63      	ldr	r2, [pc, #396]	@ (80029ec <HAL_RCC_OscConfig+0x470>)
 800285e:	f043 0301 	orr.w	r3, r3, #1
 8002862:	6713      	str	r3, [r2, #112]	@ 0x70
 8002864:	e01c      	b.n	80028a0 <HAL_RCC_OscConfig+0x324>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	2b05      	cmp	r3, #5
 800286c:	d10c      	bne.n	8002888 <HAL_RCC_OscConfig+0x30c>
 800286e:	4b5f      	ldr	r3, [pc, #380]	@ (80029ec <HAL_RCC_OscConfig+0x470>)
 8002870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002872:	4a5e      	ldr	r2, [pc, #376]	@ (80029ec <HAL_RCC_OscConfig+0x470>)
 8002874:	f043 0304 	orr.w	r3, r3, #4
 8002878:	6713      	str	r3, [r2, #112]	@ 0x70
 800287a:	4b5c      	ldr	r3, [pc, #368]	@ (80029ec <HAL_RCC_OscConfig+0x470>)
 800287c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800287e:	4a5b      	ldr	r2, [pc, #364]	@ (80029ec <HAL_RCC_OscConfig+0x470>)
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	6713      	str	r3, [r2, #112]	@ 0x70
 8002886:	e00b      	b.n	80028a0 <HAL_RCC_OscConfig+0x324>
 8002888:	4b58      	ldr	r3, [pc, #352]	@ (80029ec <HAL_RCC_OscConfig+0x470>)
 800288a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800288c:	4a57      	ldr	r2, [pc, #348]	@ (80029ec <HAL_RCC_OscConfig+0x470>)
 800288e:	f023 0301 	bic.w	r3, r3, #1
 8002892:	6713      	str	r3, [r2, #112]	@ 0x70
 8002894:	4b55      	ldr	r3, [pc, #340]	@ (80029ec <HAL_RCC_OscConfig+0x470>)
 8002896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002898:	4a54      	ldr	r2, [pc, #336]	@ (80029ec <HAL_RCC_OscConfig+0x470>)
 800289a:	f023 0304 	bic.w	r3, r3, #4
 800289e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d015      	beq.n	80028d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a8:	f7ff f898 	bl	80019dc <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ae:	e00a      	b.n	80028c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028b0:	f7ff f894 	bl	80019dc <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028be:	4293      	cmp	r3, r2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e0cb      	b.n	8002a5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c6:	4b49      	ldr	r3, [pc, #292]	@ (80029ec <HAL_RCC_OscConfig+0x470>)
 80028c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0ee      	beq.n	80028b0 <HAL_RCC_OscConfig+0x334>
 80028d2:	e014      	b.n	80028fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d4:	f7ff f882 	bl	80019dc <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028da:	e00a      	b.n	80028f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028dc:	f7ff f87e 	bl	80019dc <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e0b5      	b.n	8002a5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028f2:	4b3e      	ldr	r3, [pc, #248]	@ (80029ec <HAL_RCC_OscConfig+0x470>)
 80028f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1ee      	bne.n	80028dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028fe:	7dfb      	ldrb	r3, [r7, #23]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d105      	bne.n	8002910 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002904:	4b39      	ldr	r3, [pc, #228]	@ (80029ec <HAL_RCC_OscConfig+0x470>)
 8002906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002908:	4a38      	ldr	r2, [pc, #224]	@ (80029ec <HAL_RCC_OscConfig+0x470>)
 800290a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800290e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 80a1 	beq.w	8002a5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800291a:	4b34      	ldr	r3, [pc, #208]	@ (80029ec <HAL_RCC_OscConfig+0x470>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 030c 	and.w	r3, r3, #12
 8002922:	2b08      	cmp	r3, #8
 8002924:	d05c      	beq.n	80029e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	2b02      	cmp	r3, #2
 800292c:	d141      	bne.n	80029b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800292e:	4b31      	ldr	r3, [pc, #196]	@ (80029f4 <HAL_RCC_OscConfig+0x478>)
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002934:	f7ff f852 	bl	80019dc <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800293c:	f7ff f84e 	bl	80019dc <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e087      	b.n	8002a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800294e:	4b27      	ldr	r3, [pc, #156]	@ (80029ec <HAL_RCC_OscConfig+0x470>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f0      	bne.n	800293c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69da      	ldr	r2, [r3, #28]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	431a      	orrs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002968:	019b      	lsls	r3, r3, #6
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002970:	085b      	lsrs	r3, r3, #1
 8002972:	3b01      	subs	r3, #1
 8002974:	041b      	lsls	r3, r3, #16
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800297c:	061b      	lsls	r3, r3, #24
 800297e:	491b      	ldr	r1, [pc, #108]	@ (80029ec <HAL_RCC_OscConfig+0x470>)
 8002980:	4313      	orrs	r3, r2
 8002982:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002984:	4b1b      	ldr	r3, [pc, #108]	@ (80029f4 <HAL_RCC_OscConfig+0x478>)
 8002986:	2201      	movs	r2, #1
 8002988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298a:	f7ff f827 	bl	80019dc <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002992:	f7ff f823 	bl	80019dc <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e05c      	b.n	8002a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a4:	4b11      	ldr	r3, [pc, #68]	@ (80029ec <HAL_RCC_OscConfig+0x470>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0f0      	beq.n	8002992 <HAL_RCC_OscConfig+0x416>
 80029b0:	e054      	b.n	8002a5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b2:	4b10      	ldr	r3, [pc, #64]	@ (80029f4 <HAL_RCC_OscConfig+0x478>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b8:	f7ff f810 	bl	80019dc <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c0:	f7ff f80c 	bl	80019dc <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e045      	b.n	8002a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d2:	4b06      	ldr	r3, [pc, #24]	@ (80029ec <HAL_RCC_OscConfig+0x470>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f0      	bne.n	80029c0 <HAL_RCC_OscConfig+0x444>
 80029de:	e03d      	b.n	8002a5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d107      	bne.n	80029f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e038      	b.n	8002a5e <HAL_RCC_OscConfig+0x4e2>
 80029ec:	40023800 	.word	0x40023800
 80029f0:	40007000 	.word	0x40007000
 80029f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a68 <HAL_RCC_OscConfig+0x4ec>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d028      	beq.n	8002a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d121      	bne.n	8002a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d11a      	bne.n	8002a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a28:	4013      	ands	r3, r2
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d111      	bne.n	8002a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a3e:	085b      	lsrs	r3, r3, #1
 8002a40:	3b01      	subs	r3, #1
 8002a42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d107      	bne.n	8002a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d001      	beq.n	8002a5c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40023800 	.word	0x40023800

08002a6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e0cc      	b.n	8002c1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a80:	4b68      	ldr	r3, [pc, #416]	@ (8002c24 <HAL_RCC_ClockConfig+0x1b8>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d90c      	bls.n	8002aa8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8e:	4b65      	ldr	r3, [pc, #404]	@ (8002c24 <HAL_RCC_ClockConfig+0x1b8>)
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a96:	4b63      	ldr	r3, [pc, #396]	@ (8002c24 <HAL_RCC_ClockConfig+0x1b8>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d001      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0b8      	b.n	8002c1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d020      	beq.n	8002af6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d005      	beq.n	8002acc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ac0:	4b59      	ldr	r3, [pc, #356]	@ (8002c28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	4a58      	ldr	r2, [pc, #352]	@ (8002c28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002aca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0308 	and.w	r3, r3, #8
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d005      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ad8:	4b53      	ldr	r3, [pc, #332]	@ (8002c28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	4a52      	ldr	r2, [pc, #328]	@ (8002c28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ae2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae4:	4b50      	ldr	r3, [pc, #320]	@ (8002c28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	494d      	ldr	r1, [pc, #308]	@ (8002c28 <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d044      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d107      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0a:	4b47      	ldr	r3, [pc, #284]	@ (8002c28 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d119      	bne.n	8002b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e07f      	b.n	8002c1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d003      	beq.n	8002b2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	d107      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b2a:	4b3f      	ldr	r3, [pc, #252]	@ (8002c28 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d109      	bne.n	8002b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e06f      	b.n	8002c1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b3a:	4b3b      	ldr	r3, [pc, #236]	@ (8002c28 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e067      	b.n	8002c1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b4a:	4b37      	ldr	r3, [pc, #220]	@ (8002c28 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f023 0203 	bic.w	r2, r3, #3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	4934      	ldr	r1, [pc, #208]	@ (8002c28 <HAL_RCC_ClockConfig+0x1bc>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b5c:	f7fe ff3e 	bl	80019dc <HAL_GetTick>
 8002b60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b62:	e00a      	b.n	8002b7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b64:	f7fe ff3a 	bl	80019dc <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e04f      	b.n	8002c1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7a:	4b2b      	ldr	r3, [pc, #172]	@ (8002c28 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 020c 	and.w	r2, r3, #12
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d1eb      	bne.n	8002b64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b8c:	4b25      	ldr	r3, [pc, #148]	@ (8002c24 <HAL_RCC_ClockConfig+0x1b8>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d20c      	bcs.n	8002bb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b9a:	4b22      	ldr	r3, [pc, #136]	@ (8002c24 <HAL_RCC_ClockConfig+0x1b8>)
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba2:	4b20      	ldr	r3, [pc, #128]	@ (8002c24 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d001      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e032      	b.n	8002c1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d008      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bc0:	4b19      	ldr	r3, [pc, #100]	@ (8002c28 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	4916      	ldr	r1, [pc, #88]	@ (8002c28 <HAL_RCC_ClockConfig+0x1bc>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d009      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bde:	4b12      	ldr	r3, [pc, #72]	@ (8002c28 <HAL_RCC_ClockConfig+0x1bc>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	490e      	ldr	r1, [pc, #56]	@ (8002c28 <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bf2:	f000 f821 	bl	8002c38 <HAL_RCC_GetSysClockFreq>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8002c28 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	091b      	lsrs	r3, r3, #4
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	490a      	ldr	r1, [pc, #40]	@ (8002c2c <HAL_RCC_ClockConfig+0x1c0>)
 8002c04:	5ccb      	ldrb	r3, [r1, r3]
 8002c06:	fa22 f303 	lsr.w	r3, r2, r3
 8002c0a:	4a09      	ldr	r2, [pc, #36]	@ (8002c30 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c0e:	4b09      	ldr	r3, [pc, #36]	@ (8002c34 <HAL_RCC_ClockConfig+0x1c8>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fe fe9e 	bl	8001954 <HAL_InitTick>

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40023c00 	.word	0x40023c00
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	08007910 	.word	0x08007910
 8002c30:	20000008 	.word	0x20000008
 8002c34:	2000000c 	.word	0x2000000c

08002c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c3c:	b090      	sub	sp, #64	@ 0x40
 8002c3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c44:	2300      	movs	r3, #0
 8002c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c48:	2300      	movs	r3, #0
 8002c4a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c50:	4b59      	ldr	r3, [pc, #356]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f003 030c 	and.w	r3, r3, #12
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d00d      	beq.n	8002c78 <HAL_RCC_GetSysClockFreq+0x40>
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	f200 80a1 	bhi.w	8002da4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d002      	beq.n	8002c6c <HAL_RCC_GetSysClockFreq+0x34>
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	d003      	beq.n	8002c72 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c6a:	e09b      	b.n	8002da4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c6c:	4b53      	ldr	r3, [pc, #332]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x184>)
 8002c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002c70:	e09b      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c72:	4b53      	ldr	r3, [pc, #332]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c74:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c76:	e098      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c78:	4b4f      	ldr	r3, [pc, #316]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c80:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c82:	4b4d      	ldr	r3, [pc, #308]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d028      	beq.n	8002ce0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c8e:	4b4a      	ldr	r3, [pc, #296]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	099b      	lsrs	r3, r3, #6
 8002c94:	2200      	movs	r2, #0
 8002c96:	623b      	str	r3, [r7, #32]
 8002c98:	627a      	str	r2, [r7, #36]	@ 0x24
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4b47      	ldr	r3, [pc, #284]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ca4:	fb03 f201 	mul.w	r2, r3, r1
 8002ca8:	2300      	movs	r3, #0
 8002caa:	fb00 f303 	mul.w	r3, r0, r3
 8002cae:	4413      	add	r3, r2
 8002cb0:	4a43      	ldr	r2, [pc, #268]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cb2:	fba0 1202 	umull	r1, r2, r0, r2
 8002cb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cb8:	460a      	mov	r2, r1
 8002cba:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002cbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cbe:	4413      	add	r3, r2
 8002cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	61bb      	str	r3, [r7, #24]
 8002cc8:	61fa      	str	r2, [r7, #28]
 8002cca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002cd2:	f7fd fad5 	bl	8000280 <__aeabi_uldivmod>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4613      	mov	r3, r2
 8002cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cde:	e053      	b.n	8002d88 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ce0:	4b35      	ldr	r3, [pc, #212]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	099b      	lsrs	r3, r3, #6
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	613b      	str	r3, [r7, #16]
 8002cea:	617a      	str	r2, [r7, #20]
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002cf2:	f04f 0b00 	mov.w	fp, #0
 8002cf6:	4652      	mov	r2, sl
 8002cf8:	465b      	mov	r3, fp
 8002cfa:	f04f 0000 	mov.w	r0, #0
 8002cfe:	f04f 0100 	mov.w	r1, #0
 8002d02:	0159      	lsls	r1, r3, #5
 8002d04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d08:	0150      	lsls	r0, r2, #5
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	ebb2 080a 	subs.w	r8, r2, sl
 8002d12:	eb63 090b 	sbc.w	r9, r3, fp
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	f04f 0300 	mov.w	r3, #0
 8002d1e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d22:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d26:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d2a:	ebb2 0408 	subs.w	r4, r2, r8
 8002d2e:	eb63 0509 	sbc.w	r5, r3, r9
 8002d32:	f04f 0200 	mov.w	r2, #0
 8002d36:	f04f 0300 	mov.w	r3, #0
 8002d3a:	00eb      	lsls	r3, r5, #3
 8002d3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d40:	00e2      	lsls	r2, r4, #3
 8002d42:	4614      	mov	r4, r2
 8002d44:	461d      	mov	r5, r3
 8002d46:	eb14 030a 	adds.w	r3, r4, sl
 8002d4a:	603b      	str	r3, [r7, #0]
 8002d4c:	eb45 030b 	adc.w	r3, r5, fp
 8002d50:	607b      	str	r3, [r7, #4]
 8002d52:	f04f 0200 	mov.w	r2, #0
 8002d56:	f04f 0300 	mov.w	r3, #0
 8002d5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d5e:	4629      	mov	r1, r5
 8002d60:	028b      	lsls	r3, r1, #10
 8002d62:	4621      	mov	r1, r4
 8002d64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d68:	4621      	mov	r1, r4
 8002d6a:	028a      	lsls	r2, r1, #10
 8002d6c:	4610      	mov	r0, r2
 8002d6e:	4619      	mov	r1, r3
 8002d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d72:	2200      	movs	r2, #0
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	60fa      	str	r2, [r7, #12]
 8002d78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d7c:	f7fd fa80 	bl	8000280 <__aeabi_uldivmod>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4613      	mov	r3, r2
 8002d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d88:	4b0b      	ldr	r3, [pc, #44]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	0c1b      	lsrs	r3, r3, #16
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	3301      	adds	r3, #1
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002d98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002da2:	e002      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002da4:	4b05      	ldr	r3, [pc, #20]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x184>)
 8002da6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002da8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3740      	adds	r7, #64	@ 0x40
 8002db0:	46bd      	mov	sp, r7
 8002db2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002db6:	bf00      	nop
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	00f42400 	.word	0x00f42400
 8002dc0:	017d7840 	.word	0x017d7840

08002dc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dc8:	4b03      	ldr	r3, [pc, #12]	@ (8002dd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dca:	681b      	ldr	r3, [r3, #0]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	20000008 	.word	0x20000008

08002ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002de0:	f7ff fff0 	bl	8002dc4 <HAL_RCC_GetHCLKFreq>
 8002de4:	4602      	mov	r2, r0
 8002de6:	4b05      	ldr	r3, [pc, #20]	@ (8002dfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	0a9b      	lsrs	r3, r3, #10
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	4903      	ldr	r1, [pc, #12]	@ (8002e00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002df2:	5ccb      	ldrb	r3, [r1, r3]
 8002df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	08007920 	.word	0x08007920

08002e04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e08:	f7ff ffdc 	bl	8002dc4 <HAL_RCC_GetHCLKFreq>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	4b05      	ldr	r3, [pc, #20]	@ (8002e24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	0b5b      	lsrs	r3, r3, #13
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	4903      	ldr	r1, [pc, #12]	@ (8002e28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e1a:	5ccb      	ldrb	r3, [r1, r3]
 8002e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40023800 	.word	0x40023800
 8002e28:	08007920 	.word	0x08007920

08002e2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e07b      	b.n	8002f36 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d108      	bne.n	8002e58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e4e:	d009      	beq.n	8002e64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	61da      	str	r2, [r3, #28]
 8002e56:	e005      	b.n	8002e64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d106      	bne.n	8002e84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7fe fbd4 	bl	800162c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2202      	movs	r2, #2
 8002e88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e9a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002eac:	431a      	orrs	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ee8:	ea42 0103 	orr.w	r1, r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	0c1b      	lsrs	r3, r3, #16
 8002f02:	f003 0104 	and.w	r1, r3, #4
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0a:	f003 0210 	and.w	r2, r3, #16
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	69da      	ldr	r2, [r3, #28]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b088      	sub	sp, #32
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	60f8      	str	r0, [r7, #12]
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	603b      	str	r3, [r7, #0]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d101      	bne.n	8002f60 <HAL_SPI_Transmit+0x22>
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	e12d      	b.n	80031bc <HAL_SPI_Transmit+0x27e>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f68:	f7fe fd38 	bl	80019dc <HAL_GetTick>
 8002f6c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002f6e:	88fb      	ldrh	r3, [r7, #6]
 8002f70:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d002      	beq.n	8002f84 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002f7e:	2302      	movs	r3, #2
 8002f80:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f82:	e116      	b.n	80031b2 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <HAL_SPI_Transmit+0x52>
 8002f8a:	88fb      	ldrh	r3, [r7, #6]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d102      	bne.n	8002f96 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f94:	e10d      	b.n	80031b2 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2203      	movs	r2, #3
 8002f9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	88fa      	ldrh	r2, [r7, #6]
 8002fae:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	88fa      	ldrh	r2, [r7, #6]
 8002fb4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fdc:	d10f      	bne.n	8002ffe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ffc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003008:	2b40      	cmp	r3, #64	@ 0x40
 800300a:	d007      	beq.n	800301c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800301a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003024:	d14f      	bne.n	80030c6 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d002      	beq.n	8003034 <HAL_SPI_Transmit+0xf6>
 800302e:	8afb      	ldrh	r3, [r7, #22]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d142      	bne.n	80030ba <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003038:	881a      	ldrh	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003044:	1c9a      	adds	r2, r3, #2
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800304e:	b29b      	uxth	r3, r3
 8003050:	3b01      	subs	r3, #1
 8003052:	b29a      	uxth	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003058:	e02f      	b.n	80030ba <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b02      	cmp	r3, #2
 8003066:	d112      	bne.n	800308e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306c:	881a      	ldrh	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003078:	1c9a      	adds	r2, r3, #2
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003082:	b29b      	uxth	r3, r3
 8003084:	3b01      	subs	r3, #1
 8003086:	b29a      	uxth	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800308c:	e015      	b.n	80030ba <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800308e:	f7fe fca5 	bl	80019dc <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d803      	bhi.n	80030a6 <HAL_SPI_Transmit+0x168>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a4:	d102      	bne.n	80030ac <HAL_SPI_Transmit+0x16e>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d106      	bne.n	80030ba <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80030b8:	e07b      	b.n	80031b2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030be:	b29b      	uxth	r3, r3
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1ca      	bne.n	800305a <HAL_SPI_Transmit+0x11c>
 80030c4:	e050      	b.n	8003168 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d002      	beq.n	80030d4 <HAL_SPI_Transmit+0x196>
 80030ce:	8afb      	ldrh	r3, [r7, #22]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d144      	bne.n	800315e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	330c      	adds	r3, #12
 80030de:	7812      	ldrb	r2, [r2, #0]
 80030e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e6:	1c5a      	adds	r2, r3, #1
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	3b01      	subs	r3, #1
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80030fa:	e030      	b.n	800315e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b02      	cmp	r3, #2
 8003108:	d113      	bne.n	8003132 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	330c      	adds	r3, #12
 8003114:	7812      	ldrb	r2, [r2, #0]
 8003116:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311c:	1c5a      	adds	r2, r3, #1
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003126:	b29b      	uxth	r3, r3
 8003128:	3b01      	subs	r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003130:	e015      	b.n	800315e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003132:	f7fe fc53 	bl	80019dc <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d803      	bhi.n	800314a <HAL_SPI_Transmit+0x20c>
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003148:	d102      	bne.n	8003150 <HAL_SPI_Transmit+0x212>
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d106      	bne.n	800315e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800315c:	e029      	b.n	80031b2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003162:	b29b      	uxth	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1c9      	bne.n	80030fc <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	6839      	ldr	r1, [r7, #0]
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 fa6f 	bl	8003650 <SPI_EndRxTxTransaction>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d002      	beq.n	800317e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2220      	movs	r2, #32
 800317c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10a      	bne.n	800319c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003186:	2300      	movs	r3, #0
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	613b      	str	r3, [r7, #16]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	613b      	str	r3, [r7, #16]
 800319a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	77fb      	strb	r3, [r7, #31]
 80031a8:	e003      	b.n	80031b2 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80031ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3720      	adds	r7, #32
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b08c      	sub	sp, #48	@ 0x30
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
 80031d0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80031d2:	2301      	movs	r3, #1
 80031d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80031d6:	2300      	movs	r3, #0
 80031d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d101      	bne.n	80031ea <HAL_SPI_TransmitReceive+0x26>
 80031e6:	2302      	movs	r3, #2
 80031e8:	e198      	b.n	800351c <HAL_SPI_TransmitReceive+0x358>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031f2:	f7fe fbf3 	bl	80019dc <HAL_GetTick>
 80031f6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80031fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003208:	887b      	ldrh	r3, [r7, #2]
 800320a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800320c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003210:	2b01      	cmp	r3, #1
 8003212:	d00f      	beq.n	8003234 <HAL_SPI_TransmitReceive+0x70>
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800321a:	d107      	bne.n	800322c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d103      	bne.n	800322c <HAL_SPI_TransmitReceive+0x68>
 8003224:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003228:	2b04      	cmp	r3, #4
 800322a:	d003      	beq.n	8003234 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800322c:	2302      	movs	r3, #2
 800322e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003232:	e16d      	b.n	8003510 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d005      	beq.n	8003246 <HAL_SPI_TransmitReceive+0x82>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d002      	beq.n	8003246 <HAL_SPI_TransmitReceive+0x82>
 8003240:	887b      	ldrh	r3, [r7, #2]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d103      	bne.n	800324e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800324c:	e160      	b.n	8003510 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b04      	cmp	r3, #4
 8003258:	d003      	beq.n	8003262 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2205      	movs	r2, #5
 800325e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	887a      	ldrh	r2, [r7, #2]
 8003272:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	887a      	ldrh	r2, [r7, #2]
 8003278:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	887a      	ldrh	r2, [r7, #2]
 8003284:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	887a      	ldrh	r2, [r7, #2]
 800328a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a2:	2b40      	cmp	r3, #64	@ 0x40
 80032a4:	d007      	beq.n	80032b6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032be:	d17c      	bne.n	80033ba <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d002      	beq.n	80032ce <HAL_SPI_TransmitReceive+0x10a>
 80032c8:	8b7b      	ldrh	r3, [r7, #26]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d16a      	bne.n	80033a4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d2:	881a      	ldrh	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032de:	1c9a      	adds	r2, r3, #2
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	3b01      	subs	r3, #1
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032f2:	e057      	b.n	80033a4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d11b      	bne.n	800333a <HAL_SPI_TransmitReceive+0x176>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003306:	b29b      	uxth	r3, r3
 8003308:	2b00      	cmp	r3, #0
 800330a:	d016      	beq.n	800333a <HAL_SPI_TransmitReceive+0x176>
 800330c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800330e:	2b01      	cmp	r3, #1
 8003310:	d113      	bne.n	800333a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003316:	881a      	ldrh	r2, [r3, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003322:	1c9a      	adds	r2, r3, #2
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800332c:	b29b      	uxth	r3, r3
 800332e:	3b01      	subs	r3, #1
 8003330:	b29a      	uxth	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003336:	2300      	movs	r3, #0
 8003338:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b01      	cmp	r3, #1
 8003346:	d119      	bne.n	800337c <HAL_SPI_TransmitReceive+0x1b8>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800334c:	b29b      	uxth	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d014      	beq.n	800337c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800335c:	b292      	uxth	r2, r2
 800335e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003364:	1c9a      	adds	r2, r3, #2
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800336e:	b29b      	uxth	r3, r3
 8003370:	3b01      	subs	r3, #1
 8003372:	b29a      	uxth	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003378:	2301      	movs	r3, #1
 800337a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800337c:	f7fe fb2e 	bl	80019dc <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003388:	429a      	cmp	r2, r3
 800338a:	d80b      	bhi.n	80033a4 <HAL_SPI_TransmitReceive+0x1e0>
 800338c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800338e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003392:	d007      	beq.n	80033a4 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80033a2:	e0b5      	b.n	8003510 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1a2      	bne.n	80032f4 <HAL_SPI_TransmitReceive+0x130>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d19d      	bne.n	80032f4 <HAL_SPI_TransmitReceive+0x130>
 80033b8:	e080      	b.n	80034bc <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d002      	beq.n	80033c8 <HAL_SPI_TransmitReceive+0x204>
 80033c2:	8b7b      	ldrh	r3, [r7, #26]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d16f      	bne.n	80034a8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	330c      	adds	r3, #12
 80033d2:	7812      	ldrb	r2, [r2, #0]
 80033d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033da:	1c5a      	adds	r2, r3, #1
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	3b01      	subs	r3, #1
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033ee:	e05b      	b.n	80034a8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d11c      	bne.n	8003438 <HAL_SPI_TransmitReceive+0x274>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003402:	b29b      	uxth	r3, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	d017      	beq.n	8003438 <HAL_SPI_TransmitReceive+0x274>
 8003408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800340a:	2b01      	cmp	r3, #1
 800340c:	d114      	bne.n	8003438 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	330c      	adds	r3, #12
 8003418:	7812      	ldrb	r2, [r2, #0]
 800341a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800342a:	b29b      	uxth	r3, r3
 800342c:	3b01      	subs	r3, #1
 800342e:	b29a      	uxth	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b01      	cmp	r3, #1
 8003444:	d119      	bne.n	800347a <HAL_SPI_TransmitReceive+0x2b6>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800344a:	b29b      	uxth	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d014      	beq.n	800347a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003462:	1c5a      	adds	r2, r3, #1
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800346c:	b29b      	uxth	r3, r3
 800346e:	3b01      	subs	r3, #1
 8003470:	b29a      	uxth	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003476:	2301      	movs	r3, #1
 8003478:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800347a:	f7fe faaf 	bl	80019dc <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003486:	429a      	cmp	r2, r3
 8003488:	d803      	bhi.n	8003492 <HAL_SPI_TransmitReceive+0x2ce>
 800348a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800348c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003490:	d102      	bne.n	8003498 <HAL_SPI_TransmitReceive+0x2d4>
 8003492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003494:	2b00      	cmp	r3, #0
 8003496:	d107      	bne.n	80034a8 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80034a6:	e033      	b.n	8003510 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d19e      	bne.n	80033f0 <HAL_SPI_TransmitReceive+0x22c>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d199      	bne.n	80033f0 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 f8c5 	bl	8003650 <SPI_EndRxTxTransaction>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d006      	beq.n	80034da <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2220      	movs	r2, #32
 80034d6:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80034d8:	e01a      	b.n	8003510 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10a      	bne.n	80034f8 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034e2:	2300      	movs	r3, #0
 80034e4:	617b      	str	r3, [r7, #20]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	617b      	str	r3, [r7, #20]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	617b      	str	r3, [r7, #20]
 80034f6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003506:	e003      	b.n	8003510 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003518:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800351c:	4618      	mov	r0, r3
 800351e:	3730      	adds	r7, #48	@ 0x30
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003532:	b2db      	uxtb	r3, r3
}
 8003534:	4618      	mov	r0, r3
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b088      	sub	sp, #32
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	603b      	str	r3, [r7, #0]
 800354c:	4613      	mov	r3, r2
 800354e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003550:	f7fe fa44 	bl	80019dc <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003558:	1a9b      	subs	r3, r3, r2
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	4413      	add	r3, r2
 800355e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003560:	f7fe fa3c 	bl	80019dc <HAL_GetTick>
 8003564:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003566:	4b39      	ldr	r3, [pc, #228]	@ (800364c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	015b      	lsls	r3, r3, #5
 800356c:	0d1b      	lsrs	r3, r3, #20
 800356e:	69fa      	ldr	r2, [r7, #28]
 8003570:	fb02 f303 	mul.w	r3, r2, r3
 8003574:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003576:	e054      	b.n	8003622 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357e:	d050      	beq.n	8003622 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003580:	f7fe fa2c 	bl	80019dc <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	69fa      	ldr	r2, [r7, #28]
 800358c:	429a      	cmp	r2, r3
 800358e:	d902      	bls.n	8003596 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d13d      	bne.n	8003612 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80035a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035ae:	d111      	bne.n	80035d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035b8:	d004      	beq.n	80035c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035c2:	d107      	bne.n	80035d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035dc:	d10f      	bne.n	80035fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e017      	b.n	8003642 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	3b01      	subs	r3, #1
 8003620:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	4013      	ands	r3, r2
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	429a      	cmp	r2, r3
 8003630:	bf0c      	ite	eq
 8003632:	2301      	moveq	r3, #1
 8003634:	2300      	movne	r3, #0
 8003636:	b2db      	uxtb	r3, r3
 8003638:	461a      	mov	r2, r3
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	429a      	cmp	r2, r3
 800363e:	d19b      	bne.n	8003578 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3720      	adds	r7, #32
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	20000008 	.word	0x20000008

08003650 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b088      	sub	sp, #32
 8003654:	af02      	add	r7, sp, #8
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	2201      	movs	r2, #1
 8003664:	2102      	movs	r1, #2
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f7ff ff6a 	bl	8003540 <SPI_WaitFlagStateUntilTimeout>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d007      	beq.n	8003682 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003676:	f043 0220 	orr.w	r2, r3, #32
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e032      	b.n	80036e8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003682:	4b1b      	ldr	r3, [pc, #108]	@ (80036f0 <SPI_EndRxTxTransaction+0xa0>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a1b      	ldr	r2, [pc, #108]	@ (80036f4 <SPI_EndRxTxTransaction+0xa4>)
 8003688:	fba2 2303 	umull	r2, r3, r2, r3
 800368c:	0d5b      	lsrs	r3, r3, #21
 800368e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003692:	fb02 f303 	mul.w	r3, r2, r3
 8003696:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036a0:	d112      	bne.n	80036c8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	2200      	movs	r2, #0
 80036aa:	2180      	movs	r1, #128	@ 0x80
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f7ff ff47 	bl	8003540 <SPI_WaitFlagStateUntilTimeout>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d016      	beq.n	80036e6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036bc:	f043 0220 	orr.w	r2, r3, #32
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e00f      	b.n	80036e8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00a      	beq.n	80036e4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	3b01      	subs	r3, #1
 80036d2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036de:	2b80      	cmp	r3, #128	@ 0x80
 80036e0:	d0f2      	beq.n	80036c8 <SPI_EndRxTxTransaction+0x78>
 80036e2:	e000      	b.n	80036e6 <SPI_EndRxTxTransaction+0x96>
        break;
 80036e4:	bf00      	nop
  }

  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3718      	adds	r7, #24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	20000008 	.word	0x20000008
 80036f4:	165e9f81 	.word	0x165e9f81

080036f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e042      	b.n	8003790 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d106      	bne.n	8003724 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7fd ffcc 	bl	80016bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2224      	movs	r2, #36	@ 0x24
 8003728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800373a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f973 	bl	8003a28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	691a      	ldr	r2, [r3, #16]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003750:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695a      	ldr	r2, [r3, #20]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003760:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003770:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b08a      	sub	sp, #40	@ 0x28
 800379c:	af02      	add	r7, sp, #8
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	603b      	str	r3, [r7, #0]
 80037a4:	4613      	mov	r3, r2
 80037a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b20      	cmp	r3, #32
 80037b6:	d175      	bne.n	80038a4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <HAL_UART_Transmit+0x2c>
 80037be:	88fb      	ldrh	r3, [r7, #6]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e06e      	b.n	80038a6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2221      	movs	r2, #33	@ 0x21
 80037d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037d6:	f7fe f901 	bl	80019dc <HAL_GetTick>
 80037da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	88fa      	ldrh	r2, [r7, #6]
 80037e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	88fa      	ldrh	r2, [r7, #6]
 80037e6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037f0:	d108      	bne.n	8003804 <HAL_UART_Transmit+0x6c>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d104      	bne.n	8003804 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80037fa:	2300      	movs	r3, #0
 80037fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	61bb      	str	r3, [r7, #24]
 8003802:	e003      	b.n	800380c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003808:	2300      	movs	r3, #0
 800380a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800380c:	e02e      	b.n	800386c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	2200      	movs	r2, #0
 8003816:	2180      	movs	r1, #128	@ 0x80
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 f848 	bl	80038ae <UART_WaitOnFlagUntilTimeout>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d005      	beq.n	8003830 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e03a      	b.n	80038a6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10b      	bne.n	800384e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	881b      	ldrh	r3, [r3, #0]
 800383a:	461a      	mov	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003844:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	3302      	adds	r3, #2
 800384a:	61bb      	str	r3, [r7, #24]
 800384c:	e007      	b.n	800385e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	781a      	ldrb	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	3301      	adds	r3, #1
 800385c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003862:	b29b      	uxth	r3, r3
 8003864:	3b01      	subs	r3, #1
 8003866:	b29a      	uxth	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003870:	b29b      	uxth	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1cb      	bne.n	800380e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	2200      	movs	r2, #0
 800387e:	2140      	movs	r1, #64	@ 0x40
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 f814 	bl	80038ae <UART_WaitOnFlagUntilTimeout>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d005      	beq.n	8003898 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2220      	movs	r2, #32
 8003890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e006      	b.n	80038a6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2220      	movs	r2, #32
 800389c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80038a0:	2300      	movs	r3, #0
 80038a2:	e000      	b.n	80038a6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80038a4:	2302      	movs	r3, #2
  }
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3720      	adds	r7, #32
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b086      	sub	sp, #24
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	60f8      	str	r0, [r7, #12]
 80038b6:	60b9      	str	r1, [r7, #8]
 80038b8:	603b      	str	r3, [r7, #0]
 80038ba:	4613      	mov	r3, r2
 80038bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038be:	e03b      	b.n	8003938 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038c0:	6a3b      	ldr	r3, [r7, #32]
 80038c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c6:	d037      	beq.n	8003938 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c8:	f7fe f888 	bl	80019dc <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	6a3a      	ldr	r2, [r7, #32]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d302      	bcc.n	80038de <UART_WaitOnFlagUntilTimeout+0x30>
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e03a      	b.n	8003958 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d023      	beq.n	8003938 <UART_WaitOnFlagUntilTimeout+0x8a>
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	2b80      	cmp	r3, #128	@ 0x80
 80038f4:	d020      	beq.n	8003938 <UART_WaitOnFlagUntilTimeout+0x8a>
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	2b40      	cmp	r3, #64	@ 0x40
 80038fa:	d01d      	beq.n	8003938 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b08      	cmp	r3, #8
 8003908:	d116      	bne.n	8003938 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800390a:	2300      	movs	r3, #0
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	617b      	str	r3, [r7, #20]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	617b      	str	r3, [r7, #20]
 800391e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f81d 	bl	8003960 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2208      	movs	r2, #8
 800392a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e00f      	b.n	8003958 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	4013      	ands	r3, r2
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	429a      	cmp	r2, r3
 8003946:	bf0c      	ite	eq
 8003948:	2301      	moveq	r3, #1
 800394a:	2300      	movne	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	461a      	mov	r2, r3
 8003950:	79fb      	ldrb	r3, [r7, #7]
 8003952:	429a      	cmp	r2, r3
 8003954:	d0b4      	beq.n	80038c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3718      	adds	r7, #24
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003960:	b480      	push	{r7}
 8003962:	b095      	sub	sp, #84	@ 0x54
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	330c      	adds	r3, #12
 800396e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003972:	e853 3f00 	ldrex	r3, [r3]
 8003976:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800397a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800397e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	330c      	adds	r3, #12
 8003986:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003988:	643a      	str	r2, [r7, #64]	@ 0x40
 800398a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800398e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003990:	e841 2300 	strex	r3, r2, [r1]
 8003994:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1e5      	bne.n	8003968 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	3314      	adds	r3, #20
 80039a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a4:	6a3b      	ldr	r3, [r7, #32]
 80039a6:	e853 3f00 	ldrex	r3, [r3]
 80039aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	f023 0301 	bic.w	r3, r3, #1
 80039b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3314      	adds	r3, #20
 80039ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039c4:	e841 2300 	strex	r3, r2, [r1]
 80039c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80039ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1e5      	bne.n	800399c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d119      	bne.n	8003a0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	330c      	adds	r3, #12
 80039de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	e853 3f00 	ldrex	r3, [r3]
 80039e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	f023 0310 	bic.w	r3, r3, #16
 80039ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	330c      	adds	r3, #12
 80039f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039f8:	61ba      	str	r2, [r7, #24]
 80039fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fc:	6979      	ldr	r1, [r7, #20]
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	e841 2300 	strex	r3, r2, [r1]
 8003a04:	613b      	str	r3, [r7, #16]
   return(result);
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1e5      	bne.n	80039d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003a1a:	bf00      	nop
 8003a1c:	3754      	adds	r7, #84	@ 0x54
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
	...

08003a28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a2c:	b0c0      	sub	sp, #256	@ 0x100
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a44:	68d9      	ldr	r1, [r3, #12]
 8003a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	ea40 0301 	orr.w	r3, r0, r1
 8003a50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	431a      	orrs	r2, r3
 8003a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003a80:	f021 010c 	bic.w	r1, r1, #12
 8003a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003a8e:	430b      	orrs	r3, r1
 8003a90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa2:	6999      	ldr	r1, [r3, #24]
 8003aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	ea40 0301 	orr.w	r3, r0, r1
 8003aae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	4b8f      	ldr	r3, [pc, #572]	@ (8003cf4 <UART_SetConfig+0x2cc>)
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d005      	beq.n	8003ac8 <UART_SetConfig+0xa0>
 8003abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	4b8d      	ldr	r3, [pc, #564]	@ (8003cf8 <UART_SetConfig+0x2d0>)
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d104      	bne.n	8003ad2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ac8:	f7ff f99c 	bl	8002e04 <HAL_RCC_GetPCLK2Freq>
 8003acc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003ad0:	e003      	b.n	8003ada <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ad2:	f7ff f983 	bl	8002ddc <HAL_RCC_GetPCLK1Freq>
 8003ad6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ae4:	f040 810c 	bne.w	8003d00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ae8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003aec:	2200      	movs	r2, #0
 8003aee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003af2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003af6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003afa:	4622      	mov	r2, r4
 8003afc:	462b      	mov	r3, r5
 8003afe:	1891      	adds	r1, r2, r2
 8003b00:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003b02:	415b      	adcs	r3, r3
 8003b04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b0a:	4621      	mov	r1, r4
 8003b0c:	eb12 0801 	adds.w	r8, r2, r1
 8003b10:	4629      	mov	r1, r5
 8003b12:	eb43 0901 	adc.w	r9, r3, r1
 8003b16:	f04f 0200 	mov.w	r2, #0
 8003b1a:	f04f 0300 	mov.w	r3, #0
 8003b1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b2a:	4690      	mov	r8, r2
 8003b2c:	4699      	mov	r9, r3
 8003b2e:	4623      	mov	r3, r4
 8003b30:	eb18 0303 	adds.w	r3, r8, r3
 8003b34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b38:	462b      	mov	r3, r5
 8003b3a:	eb49 0303 	adc.w	r3, r9, r3
 8003b3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b4e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003b52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b56:	460b      	mov	r3, r1
 8003b58:	18db      	adds	r3, r3, r3
 8003b5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	eb42 0303 	adc.w	r3, r2, r3
 8003b62:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003b68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003b6c:	f7fc fb88 	bl	8000280 <__aeabi_uldivmod>
 8003b70:	4602      	mov	r2, r0
 8003b72:	460b      	mov	r3, r1
 8003b74:	4b61      	ldr	r3, [pc, #388]	@ (8003cfc <UART_SetConfig+0x2d4>)
 8003b76:	fba3 2302 	umull	r2, r3, r3, r2
 8003b7a:	095b      	lsrs	r3, r3, #5
 8003b7c:	011c      	lsls	r4, r3, #4
 8003b7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b82:	2200      	movs	r2, #0
 8003b84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b88:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003b8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003b90:	4642      	mov	r2, r8
 8003b92:	464b      	mov	r3, r9
 8003b94:	1891      	adds	r1, r2, r2
 8003b96:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003b98:	415b      	adcs	r3, r3
 8003b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ba0:	4641      	mov	r1, r8
 8003ba2:	eb12 0a01 	adds.w	sl, r2, r1
 8003ba6:	4649      	mov	r1, r9
 8003ba8:	eb43 0b01 	adc.w	fp, r3, r1
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	f04f 0300 	mov.w	r3, #0
 8003bb4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bb8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bc0:	4692      	mov	sl, r2
 8003bc2:	469b      	mov	fp, r3
 8003bc4:	4643      	mov	r3, r8
 8003bc6:	eb1a 0303 	adds.w	r3, sl, r3
 8003bca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003bce:	464b      	mov	r3, r9
 8003bd0:	eb4b 0303 	adc.w	r3, fp, r3
 8003bd4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003be4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003be8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003bec:	460b      	mov	r3, r1
 8003bee:	18db      	adds	r3, r3, r3
 8003bf0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	eb42 0303 	adc.w	r3, r2, r3
 8003bf8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bfa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003bfe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003c02:	f7fc fb3d 	bl	8000280 <__aeabi_uldivmod>
 8003c06:	4602      	mov	r2, r0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	4611      	mov	r1, r2
 8003c0c:	4b3b      	ldr	r3, [pc, #236]	@ (8003cfc <UART_SetConfig+0x2d4>)
 8003c0e:	fba3 2301 	umull	r2, r3, r3, r1
 8003c12:	095b      	lsrs	r3, r3, #5
 8003c14:	2264      	movs	r2, #100	@ 0x64
 8003c16:	fb02 f303 	mul.w	r3, r2, r3
 8003c1a:	1acb      	subs	r3, r1, r3
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003c22:	4b36      	ldr	r3, [pc, #216]	@ (8003cfc <UART_SetConfig+0x2d4>)
 8003c24:	fba3 2302 	umull	r2, r3, r3, r2
 8003c28:	095b      	lsrs	r3, r3, #5
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003c30:	441c      	add	r4, r3
 8003c32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c36:	2200      	movs	r2, #0
 8003c38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c3c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003c40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003c44:	4642      	mov	r2, r8
 8003c46:	464b      	mov	r3, r9
 8003c48:	1891      	adds	r1, r2, r2
 8003c4a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c4c:	415b      	adcs	r3, r3
 8003c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003c54:	4641      	mov	r1, r8
 8003c56:	1851      	adds	r1, r2, r1
 8003c58:	6339      	str	r1, [r7, #48]	@ 0x30
 8003c5a:	4649      	mov	r1, r9
 8003c5c:	414b      	adcs	r3, r1
 8003c5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003c6c:	4659      	mov	r1, fp
 8003c6e:	00cb      	lsls	r3, r1, #3
 8003c70:	4651      	mov	r1, sl
 8003c72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c76:	4651      	mov	r1, sl
 8003c78:	00ca      	lsls	r2, r1, #3
 8003c7a:	4610      	mov	r0, r2
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4603      	mov	r3, r0
 8003c80:	4642      	mov	r2, r8
 8003c82:	189b      	adds	r3, r3, r2
 8003c84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c88:	464b      	mov	r3, r9
 8003c8a:	460a      	mov	r2, r1
 8003c8c:	eb42 0303 	adc.w	r3, r2, r3
 8003c90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ca0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003ca4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ca8:	460b      	mov	r3, r1
 8003caa:	18db      	adds	r3, r3, r3
 8003cac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cae:	4613      	mov	r3, r2
 8003cb0:	eb42 0303 	adc.w	r3, r2, r3
 8003cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003cbe:	f7fc fadf 	bl	8000280 <__aeabi_uldivmod>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8003cfc <UART_SetConfig+0x2d4>)
 8003cc8:	fba3 1302 	umull	r1, r3, r3, r2
 8003ccc:	095b      	lsrs	r3, r3, #5
 8003cce:	2164      	movs	r1, #100	@ 0x64
 8003cd0:	fb01 f303 	mul.w	r3, r1, r3
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	3332      	adds	r3, #50	@ 0x32
 8003cda:	4a08      	ldr	r2, [pc, #32]	@ (8003cfc <UART_SetConfig+0x2d4>)
 8003cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce0:	095b      	lsrs	r3, r3, #5
 8003ce2:	f003 0207 	and.w	r2, r3, #7
 8003ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4422      	add	r2, r4
 8003cee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003cf0:	e106      	b.n	8003f00 <UART_SetConfig+0x4d8>
 8003cf2:	bf00      	nop
 8003cf4:	40011000 	.word	0x40011000
 8003cf8:	40011400 	.word	0x40011400
 8003cfc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d04:	2200      	movs	r2, #0
 8003d06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d0a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003d0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003d12:	4642      	mov	r2, r8
 8003d14:	464b      	mov	r3, r9
 8003d16:	1891      	adds	r1, r2, r2
 8003d18:	6239      	str	r1, [r7, #32]
 8003d1a:	415b      	adcs	r3, r3
 8003d1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d22:	4641      	mov	r1, r8
 8003d24:	1854      	adds	r4, r2, r1
 8003d26:	4649      	mov	r1, r9
 8003d28:	eb43 0501 	adc.w	r5, r3, r1
 8003d2c:	f04f 0200 	mov.w	r2, #0
 8003d30:	f04f 0300 	mov.w	r3, #0
 8003d34:	00eb      	lsls	r3, r5, #3
 8003d36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d3a:	00e2      	lsls	r2, r4, #3
 8003d3c:	4614      	mov	r4, r2
 8003d3e:	461d      	mov	r5, r3
 8003d40:	4643      	mov	r3, r8
 8003d42:	18e3      	adds	r3, r4, r3
 8003d44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d48:	464b      	mov	r3, r9
 8003d4a:	eb45 0303 	adc.w	r3, r5, r3
 8003d4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d5e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d62:	f04f 0200 	mov.w	r2, #0
 8003d66:	f04f 0300 	mov.w	r3, #0
 8003d6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d6e:	4629      	mov	r1, r5
 8003d70:	008b      	lsls	r3, r1, #2
 8003d72:	4621      	mov	r1, r4
 8003d74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d78:	4621      	mov	r1, r4
 8003d7a:	008a      	lsls	r2, r1, #2
 8003d7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003d80:	f7fc fa7e 	bl	8000280 <__aeabi_uldivmod>
 8003d84:	4602      	mov	r2, r0
 8003d86:	460b      	mov	r3, r1
 8003d88:	4b60      	ldr	r3, [pc, #384]	@ (8003f0c <UART_SetConfig+0x4e4>)
 8003d8a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d8e:	095b      	lsrs	r3, r3, #5
 8003d90:	011c      	lsls	r4, r3, #4
 8003d92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d96:	2200      	movs	r2, #0
 8003d98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d9c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003da0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003da4:	4642      	mov	r2, r8
 8003da6:	464b      	mov	r3, r9
 8003da8:	1891      	adds	r1, r2, r2
 8003daa:	61b9      	str	r1, [r7, #24]
 8003dac:	415b      	adcs	r3, r3
 8003dae:	61fb      	str	r3, [r7, #28]
 8003db0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003db4:	4641      	mov	r1, r8
 8003db6:	1851      	adds	r1, r2, r1
 8003db8:	6139      	str	r1, [r7, #16]
 8003dba:	4649      	mov	r1, r9
 8003dbc:	414b      	adcs	r3, r1
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	f04f 0200 	mov.w	r2, #0
 8003dc4:	f04f 0300 	mov.w	r3, #0
 8003dc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003dcc:	4659      	mov	r1, fp
 8003dce:	00cb      	lsls	r3, r1, #3
 8003dd0:	4651      	mov	r1, sl
 8003dd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dd6:	4651      	mov	r1, sl
 8003dd8:	00ca      	lsls	r2, r1, #3
 8003dda:	4610      	mov	r0, r2
 8003ddc:	4619      	mov	r1, r3
 8003dde:	4603      	mov	r3, r0
 8003de0:	4642      	mov	r2, r8
 8003de2:	189b      	adds	r3, r3, r2
 8003de4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003de8:	464b      	mov	r3, r9
 8003dea:	460a      	mov	r2, r1
 8003dec:	eb42 0303 	adc.w	r3, r2, r3
 8003df0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003dfe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003e00:	f04f 0200 	mov.w	r2, #0
 8003e04:	f04f 0300 	mov.w	r3, #0
 8003e08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003e0c:	4649      	mov	r1, r9
 8003e0e:	008b      	lsls	r3, r1, #2
 8003e10:	4641      	mov	r1, r8
 8003e12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e16:	4641      	mov	r1, r8
 8003e18:	008a      	lsls	r2, r1, #2
 8003e1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003e1e:	f7fc fa2f 	bl	8000280 <__aeabi_uldivmod>
 8003e22:	4602      	mov	r2, r0
 8003e24:	460b      	mov	r3, r1
 8003e26:	4611      	mov	r1, r2
 8003e28:	4b38      	ldr	r3, [pc, #224]	@ (8003f0c <UART_SetConfig+0x4e4>)
 8003e2a:	fba3 2301 	umull	r2, r3, r3, r1
 8003e2e:	095b      	lsrs	r3, r3, #5
 8003e30:	2264      	movs	r2, #100	@ 0x64
 8003e32:	fb02 f303 	mul.w	r3, r2, r3
 8003e36:	1acb      	subs	r3, r1, r3
 8003e38:	011b      	lsls	r3, r3, #4
 8003e3a:	3332      	adds	r3, #50	@ 0x32
 8003e3c:	4a33      	ldr	r2, [pc, #204]	@ (8003f0c <UART_SetConfig+0x4e4>)
 8003e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e42:	095b      	lsrs	r3, r3, #5
 8003e44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e48:	441c      	add	r4, r3
 8003e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e4e:	2200      	movs	r2, #0
 8003e50:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e52:	677a      	str	r2, [r7, #116]	@ 0x74
 8003e54:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003e58:	4642      	mov	r2, r8
 8003e5a:	464b      	mov	r3, r9
 8003e5c:	1891      	adds	r1, r2, r2
 8003e5e:	60b9      	str	r1, [r7, #8]
 8003e60:	415b      	adcs	r3, r3
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e68:	4641      	mov	r1, r8
 8003e6a:	1851      	adds	r1, r2, r1
 8003e6c:	6039      	str	r1, [r7, #0]
 8003e6e:	4649      	mov	r1, r9
 8003e70:	414b      	adcs	r3, r1
 8003e72:	607b      	str	r3, [r7, #4]
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	f04f 0300 	mov.w	r3, #0
 8003e7c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e80:	4659      	mov	r1, fp
 8003e82:	00cb      	lsls	r3, r1, #3
 8003e84:	4651      	mov	r1, sl
 8003e86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e8a:	4651      	mov	r1, sl
 8003e8c:	00ca      	lsls	r2, r1, #3
 8003e8e:	4610      	mov	r0, r2
 8003e90:	4619      	mov	r1, r3
 8003e92:	4603      	mov	r3, r0
 8003e94:	4642      	mov	r2, r8
 8003e96:	189b      	adds	r3, r3, r2
 8003e98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e9a:	464b      	mov	r3, r9
 8003e9c:	460a      	mov	r2, r1
 8003e9e:	eb42 0303 	adc.w	r3, r2, r3
 8003ea2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	663b      	str	r3, [r7, #96]	@ 0x60
 8003eae:	667a      	str	r2, [r7, #100]	@ 0x64
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003ebc:	4649      	mov	r1, r9
 8003ebe:	008b      	lsls	r3, r1, #2
 8003ec0:	4641      	mov	r1, r8
 8003ec2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ec6:	4641      	mov	r1, r8
 8003ec8:	008a      	lsls	r2, r1, #2
 8003eca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003ece:	f7fc f9d7 	bl	8000280 <__aeabi_uldivmod>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8003f0c <UART_SetConfig+0x4e4>)
 8003ed8:	fba3 1302 	umull	r1, r3, r3, r2
 8003edc:	095b      	lsrs	r3, r3, #5
 8003ede:	2164      	movs	r1, #100	@ 0x64
 8003ee0:	fb01 f303 	mul.w	r3, r1, r3
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	011b      	lsls	r3, r3, #4
 8003ee8:	3332      	adds	r3, #50	@ 0x32
 8003eea:	4a08      	ldr	r2, [pc, #32]	@ (8003f0c <UART_SetConfig+0x4e4>)
 8003eec:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef0:	095b      	lsrs	r3, r3, #5
 8003ef2:	f003 020f 	and.w	r2, r3, #15
 8003ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4422      	add	r2, r4
 8003efe:	609a      	str	r2, [r3, #8]
}
 8003f00:	bf00      	nop
 8003f02:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003f06:	46bd      	mov	sp, r7
 8003f08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f0c:	51eb851f 	.word	0x51eb851f

08003f10 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003f14:	4904      	ldr	r1, [pc, #16]	@ (8003f28 <MX_FATFS_Init+0x18>)
 8003f16:	4805      	ldr	r0, [pc, #20]	@ (8003f2c <MX_FATFS_Init+0x1c>)
 8003f18:	f002 fea4 	bl	8006c64 <FATFS_LinkDriver>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	461a      	mov	r2, r3
 8003f20:	4b03      	ldr	r3, [pc, #12]	@ (8003f30 <MX_FATFS_Init+0x20>)
 8003f22:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003f24:	bf00      	nop
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	200050cc 	.word	0x200050cc
 8003f2c:	20000014 	.word	0x20000014
 8003f30:	200050c8 	.word	0x200050c8

08003f34 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003f38:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8003f4e:	79fb      	ldrb	r3, [r7, #7]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7fc fcc7 	bl	80008e4 <SD_disk_initialize>
 8003f56:	4603      	mov	r3, r0


  /* USER CODE END INIT */
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3708      	adds	r7, #8
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	4603      	mov	r3, r0
 8003f68:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8003f6a:	79fb      	ldrb	r3, [r7, #7]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7fc fda3 	bl	8000ab8 <SD_disk_status>
 8003f72:	4603      	mov	r3, r0


  /* USER CODE END STATUS */
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60b9      	str	r1, [r7, #8]
 8003f84:	607a      	str	r2, [r7, #4]
 8003f86:	603b      	str	r3, [r7, #0]
 8003f88:	4603      	mov	r3, r0
 8003f8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8003f8c:	7bf8      	ldrb	r0, [r7, #15]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	68b9      	ldr	r1, [r7, #8]
 8003f94:	f7fc fda6 	bl	8000ae4 <SD_disk_read>
 8003f98:	4603      	mov	r3, r0

  /* USER CODE END READ */
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b084      	sub	sp, #16
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
 8003fac:	603b      	str	r3, [r7, #0]
 8003fae:	4603      	mov	r3, r0
 8003fb0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8003fb2:	7bf8      	ldrb	r0, [r7, #15]
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	68b9      	ldr	r1, [r7, #8]
 8003fba:	f7fc fdfd 	bl	8000bb8 <SD_disk_write>
 8003fbe:	4603      	mov	r3, r0

  /* USER CODE END WRITE */
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	4603      	mov	r3, r0
 8003fd0:	603a      	str	r2, [r7, #0]
 8003fd2:	71fb      	strb	r3, [r7, #7]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8003fd8:	79b9      	ldrb	r1, [r7, #6]
 8003fda:	79fb      	ldrb	r3, [r7, #7]
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fc fe6e 	bl	8000cc0 <SD_disk_ioctl>
 8003fe4:	4603      	mov	r3, r0

  /* USER CODE END IOCTL */
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3708      	adds	r7, #8
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
	...

08003ff0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003ffa:	79fb      	ldrb	r3, [r7, #7]
 8003ffc:	4a08      	ldr	r2, [pc, #32]	@ (8004020 <disk_status+0x30>)
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	79fa      	ldrb	r2, [r7, #7]
 8004008:	4905      	ldr	r1, [pc, #20]	@ (8004020 <disk_status+0x30>)
 800400a:	440a      	add	r2, r1
 800400c:	7a12      	ldrb	r2, [r2, #8]
 800400e:	4610      	mov	r0, r2
 8004010:	4798      	blx	r3
 8004012:	4603      	mov	r3, r0
 8004014:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004016:	7bfb      	ldrb	r3, [r7, #15]
}
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	200052f8 	.word	0x200052f8

08004024 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	4603      	mov	r3, r0
 800402c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800402e:	2300      	movs	r3, #0
 8004030:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004032:	79fb      	ldrb	r3, [r7, #7]
 8004034:	4a0e      	ldr	r2, [pc, #56]	@ (8004070 <disk_initialize+0x4c>)
 8004036:	5cd3      	ldrb	r3, [r2, r3]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d114      	bne.n	8004066 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800403c:	79fb      	ldrb	r3, [r7, #7]
 800403e:	4a0c      	ldr	r2, [pc, #48]	@ (8004070 <disk_initialize+0x4c>)
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	79fa      	ldrb	r2, [r7, #7]
 800404a:	4909      	ldr	r1, [pc, #36]	@ (8004070 <disk_initialize+0x4c>)
 800404c:	440a      	add	r2, r1
 800404e:	7a12      	ldrb	r2, [r2, #8]
 8004050:	4610      	mov	r0, r2
 8004052:	4798      	blx	r3
 8004054:	4603      	mov	r3, r0
 8004056:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8004058:	7bfb      	ldrb	r3, [r7, #15]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d103      	bne.n	8004066 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800405e:	79fb      	ldrb	r3, [r7, #7]
 8004060:	4a03      	ldr	r2, [pc, #12]	@ (8004070 <disk_initialize+0x4c>)
 8004062:	2101      	movs	r1, #1
 8004064:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8004066:	7bfb      	ldrb	r3, [r7, #15]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	200052f8 	.word	0x200052f8

08004074 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004074:	b590      	push	{r4, r7, lr}
 8004076:	b087      	sub	sp, #28
 8004078:	af00      	add	r7, sp, #0
 800407a:	60b9      	str	r1, [r7, #8]
 800407c:	607a      	str	r2, [r7, #4]
 800407e:	603b      	str	r3, [r7, #0]
 8004080:	4603      	mov	r3, r0
 8004082:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004084:	7bfb      	ldrb	r3, [r7, #15]
 8004086:	4a0a      	ldr	r2, [pc, #40]	@ (80040b0 <disk_read+0x3c>)
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	689c      	ldr	r4, [r3, #8]
 8004090:	7bfb      	ldrb	r3, [r7, #15]
 8004092:	4a07      	ldr	r2, [pc, #28]	@ (80040b0 <disk_read+0x3c>)
 8004094:	4413      	add	r3, r2
 8004096:	7a18      	ldrb	r0, [r3, #8]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	68b9      	ldr	r1, [r7, #8]
 800409e:	47a0      	blx	r4
 80040a0:	4603      	mov	r3, r0
 80040a2:	75fb      	strb	r3, [r7, #23]
  return res;
 80040a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	371c      	adds	r7, #28
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd90      	pop	{r4, r7, pc}
 80040ae:	bf00      	nop
 80040b0:	200052f8 	.word	0x200052f8

080040b4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80040b4:	b590      	push	{r4, r7, lr}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60b9      	str	r1, [r7, #8]
 80040bc:	607a      	str	r2, [r7, #4]
 80040be:	603b      	str	r3, [r7, #0]
 80040c0:	4603      	mov	r3, r0
 80040c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80040c4:	7bfb      	ldrb	r3, [r7, #15]
 80040c6:	4a0a      	ldr	r2, [pc, #40]	@ (80040f0 <disk_write+0x3c>)
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4413      	add	r3, r2
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	68dc      	ldr	r4, [r3, #12]
 80040d0:	7bfb      	ldrb	r3, [r7, #15]
 80040d2:	4a07      	ldr	r2, [pc, #28]	@ (80040f0 <disk_write+0x3c>)
 80040d4:	4413      	add	r3, r2
 80040d6:	7a18      	ldrb	r0, [r3, #8]
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	68b9      	ldr	r1, [r7, #8]
 80040de:	47a0      	blx	r4
 80040e0:	4603      	mov	r3, r0
 80040e2:	75fb      	strb	r3, [r7, #23]
  return res;
 80040e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	371c      	adds	r7, #28
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd90      	pop	{r4, r7, pc}
 80040ee:	bf00      	nop
 80040f0:	200052f8 	.word	0x200052f8

080040f4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	4603      	mov	r3, r0
 80040fc:	603a      	str	r2, [r7, #0]
 80040fe:	71fb      	strb	r3, [r7, #7]
 8004100:	460b      	mov	r3, r1
 8004102:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004104:	79fb      	ldrb	r3, [r7, #7]
 8004106:	4a09      	ldr	r2, [pc, #36]	@ (800412c <disk_ioctl+0x38>)
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4413      	add	r3, r2
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	79fa      	ldrb	r2, [r7, #7]
 8004112:	4906      	ldr	r1, [pc, #24]	@ (800412c <disk_ioctl+0x38>)
 8004114:	440a      	add	r2, r1
 8004116:	7a10      	ldrb	r0, [r2, #8]
 8004118:	79b9      	ldrb	r1, [r7, #6]
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	4798      	blx	r3
 800411e:	4603      	mov	r3, r0
 8004120:	73fb      	strb	r3, [r7, #15]
  return res;
 8004122:	7bfb      	ldrb	r3, [r7, #15]
}
 8004124:	4618      	mov	r0, r3
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	200052f8 	.word	0x200052f8

08004130 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	3301      	adds	r3, #1
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004140:	89fb      	ldrh	r3, [r7, #14]
 8004142:	021b      	lsls	r3, r3, #8
 8004144:	b21a      	sxth	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	b21b      	sxth	r3, r3
 800414c:	4313      	orrs	r3, r2
 800414e:	b21b      	sxth	r3, r3
 8004150:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004152:	89fb      	ldrh	r3, [r7, #14]
}
 8004154:	4618      	mov	r0, r3
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3303      	adds	r3, #3
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	021b      	lsls	r3, r3, #8
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	3202      	adds	r2, #2
 8004178:	7812      	ldrb	r2, [r2, #0]
 800417a:	4313      	orrs	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	021b      	lsls	r3, r3, #8
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	3201      	adds	r2, #1
 8004186:	7812      	ldrb	r2, [r2, #0]
 8004188:	4313      	orrs	r3, r2
 800418a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	021b      	lsls	r3, r3, #8
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	7812      	ldrb	r2, [r2, #0]
 8004194:	4313      	orrs	r3, r2
 8004196:	60fb      	str	r3, [r7, #12]
	return rv;
 8004198:	68fb      	ldr	r3, [r7, #12]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
 80041ae:	460b      	mov	r3, r1
 80041b0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	1c5a      	adds	r2, r3, #1
 80041b6:	607a      	str	r2, [r7, #4]
 80041b8:	887a      	ldrh	r2, [r7, #2]
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	701a      	strb	r2, [r3, #0]
 80041be:	887b      	ldrh	r3, [r7, #2]
 80041c0:	0a1b      	lsrs	r3, r3, #8
 80041c2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	607a      	str	r2, [r7, #4]
 80041ca:	887a      	ldrh	r2, [r7, #2]
 80041cc:	b2d2      	uxtb	r2, r2
 80041ce:	701a      	strb	r2, [r3, #0]
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	1c5a      	adds	r2, r3, #1
 80041ea:	607a      	str	r2, [r7, #4]
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	b2d2      	uxtb	r2, r2
 80041f0:	701a      	strb	r2, [r3, #0]
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	0a1b      	lsrs	r3, r3, #8
 80041f6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	607a      	str	r2, [r7, #4]
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	b2d2      	uxtb	r2, r2
 8004202:	701a      	strb	r2, [r3, #0]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	0a1b      	lsrs	r3, r3, #8
 8004208:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	1c5a      	adds	r2, r3, #1
 800420e:	607a      	str	r2, [r7, #4]
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	b2d2      	uxtb	r2, r2
 8004214:	701a      	strb	r2, [r3, #0]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	0a1b      	lsrs	r3, r3, #8
 800421a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	607a      	str	r2, [r7, #4]
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	701a      	strb	r2, [r3, #0]
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004234:	b480      	push	{r7}
 8004236:	b087      	sub	sp, #28
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00d      	beq.n	800426a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	1c53      	adds	r3, r2, #1
 8004252:	613b      	str	r3, [r7, #16]
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	1c59      	adds	r1, r3, #1
 8004258:	6179      	str	r1, [r7, #20]
 800425a:	7812      	ldrb	r2, [r2, #0]
 800425c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	3b01      	subs	r3, #1
 8004262:	607b      	str	r3, [r7, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1f1      	bne.n	800424e <mem_cpy+0x1a>
	}
}
 800426a:	bf00      	nop
 800426c:	371c      	adds	r7, #28
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004276:	b480      	push	{r7}
 8004278:	b087      	sub	sp, #28
 800427a:	af00      	add	r7, sp, #0
 800427c:	60f8      	str	r0, [r7, #12]
 800427e:	60b9      	str	r1, [r7, #8]
 8004280:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	1c5a      	adds	r2, r3, #1
 800428a:	617a      	str	r2, [r7, #20]
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	b2d2      	uxtb	r2, r2
 8004290:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	3b01      	subs	r3, #1
 8004296:	607b      	str	r3, [r7, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1f3      	bne.n	8004286 <mem_set+0x10>
}
 800429e:	bf00      	nop
 80042a0:	bf00      	nop
 80042a2:	371c      	adds	r7, #28
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80042ac:	b480      	push	{r7}
 80042ae:	b089      	sub	sp, #36	@ 0x24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	61fb      	str	r3, [r7, #28]
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80042c0:	2300      	movs	r3, #0
 80042c2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	1c5a      	adds	r2, r3, #1
 80042c8:	61fa      	str	r2, [r7, #28]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	4619      	mov	r1, r3
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	1c5a      	adds	r2, r3, #1
 80042d2:	61ba      	str	r2, [r7, #24]
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	1acb      	subs	r3, r1, r3
 80042d8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	3b01      	subs	r3, #1
 80042de:	607b      	str	r3, [r7, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d002      	beq.n	80042ec <mem_cmp+0x40>
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d0eb      	beq.n	80042c4 <mem_cmp+0x18>

	return r;
 80042ec:	697b      	ldr	r3, [r7, #20]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3724      	adds	r7, #36	@ 0x24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80042fa:	b480      	push	{r7}
 80042fc:	b083      	sub	sp, #12
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
 8004302:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004304:	e002      	b.n	800430c <chk_chr+0x12>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	3301      	adds	r3, #1
 800430a:	607b      	str	r3, [r7, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d005      	beq.n	8004320 <chk_chr+0x26>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	461a      	mov	r2, r3
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	4293      	cmp	r3, r2
 800431e:	d1f2      	bne.n	8004306 <chk_chr+0xc>
	return *str;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	781b      	ldrb	r3, [r3, #0]
}
 8004324:	4618      	mov	r0, r3
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800433a:	2300      	movs	r3, #0
 800433c:	60bb      	str	r3, [r7, #8]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	60fb      	str	r3, [r7, #12]
 8004342:	e029      	b.n	8004398 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004344:	4a27      	ldr	r2, [pc, #156]	@ (80043e4 <chk_lock+0xb4>)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	011b      	lsls	r3, r3, #4
 800434a:	4413      	add	r3, r2
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d01d      	beq.n	800438e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004352:	4a24      	ldr	r2, [pc, #144]	@ (80043e4 <chk_lock+0xb4>)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	011b      	lsls	r3, r3, #4
 8004358:	4413      	add	r3, r2
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	429a      	cmp	r2, r3
 8004362:	d116      	bne.n	8004392 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004364:	4a1f      	ldr	r2, [pc, #124]	@ (80043e4 <chk_lock+0xb4>)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	4413      	add	r3, r2
 800436c:	3304      	adds	r3, #4
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004374:	429a      	cmp	r2, r3
 8004376:	d10c      	bne.n	8004392 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004378:	4a1a      	ldr	r2, [pc, #104]	@ (80043e4 <chk_lock+0xb4>)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	011b      	lsls	r3, r3, #4
 800437e:	4413      	add	r3, r2
 8004380:	3308      	adds	r3, #8
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004388:	429a      	cmp	r2, r3
 800438a:	d102      	bne.n	8004392 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800438c:	e007      	b.n	800439e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800438e:	2301      	movs	r3, #1
 8004390:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	3301      	adds	r3, #1
 8004396:	60fb      	str	r3, [r7, #12]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d9d2      	bls.n	8004344 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d109      	bne.n	80043b8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d102      	bne.n	80043b0 <chk_lock+0x80>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d101      	bne.n	80043b4 <chk_lock+0x84>
 80043b0:	2300      	movs	r3, #0
 80043b2:	e010      	b.n	80043d6 <chk_lock+0xa6>
 80043b4:	2312      	movs	r3, #18
 80043b6:	e00e      	b.n	80043d6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d108      	bne.n	80043d0 <chk_lock+0xa0>
 80043be:	4a09      	ldr	r2, [pc, #36]	@ (80043e4 <chk_lock+0xb4>)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	4413      	add	r3, r2
 80043c6:	330c      	adds	r3, #12
 80043c8:	881b      	ldrh	r3, [r3, #0]
 80043ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043ce:	d101      	bne.n	80043d4 <chk_lock+0xa4>
 80043d0:	2310      	movs	r3, #16
 80043d2:	e000      	b.n	80043d6 <chk_lock+0xa6>
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	200050d8 	.word	0x200050d8

080043e8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80043ee:	2300      	movs	r3, #0
 80043f0:	607b      	str	r3, [r7, #4]
 80043f2:	e002      	b.n	80043fa <enq_lock+0x12>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	3301      	adds	r3, #1
 80043f8:	607b      	str	r3, [r7, #4]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d806      	bhi.n	800440e <enq_lock+0x26>
 8004400:	4a09      	ldr	r2, [pc, #36]	@ (8004428 <enq_lock+0x40>)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	011b      	lsls	r3, r3, #4
 8004406:	4413      	add	r3, r2
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f2      	bne.n	80043f4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b02      	cmp	r3, #2
 8004412:	bf14      	ite	ne
 8004414:	2301      	movne	r3, #1
 8004416:	2300      	moveq	r3, #0
 8004418:	b2db      	uxtb	r3, r3
}
 800441a:	4618      	mov	r0, r3
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	200050d8 	.word	0x200050d8

0800442c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004436:	2300      	movs	r3, #0
 8004438:	60fb      	str	r3, [r7, #12]
 800443a:	e01f      	b.n	800447c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800443c:	4a41      	ldr	r2, [pc, #260]	@ (8004544 <inc_lock+0x118>)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	011b      	lsls	r3, r3, #4
 8004442:	4413      	add	r3, r2
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d113      	bne.n	8004476 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800444e:	4a3d      	ldr	r2, [pc, #244]	@ (8004544 <inc_lock+0x118>)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	011b      	lsls	r3, r3, #4
 8004454:	4413      	add	r3, r2
 8004456:	3304      	adds	r3, #4
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800445e:	429a      	cmp	r2, r3
 8004460:	d109      	bne.n	8004476 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004462:	4a38      	ldr	r2, [pc, #224]	@ (8004544 <inc_lock+0x118>)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	011b      	lsls	r3, r3, #4
 8004468:	4413      	add	r3, r2
 800446a:	3308      	adds	r3, #8
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004472:	429a      	cmp	r2, r3
 8004474:	d006      	beq.n	8004484 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	3301      	adds	r3, #1
 800447a:	60fb      	str	r3, [r7, #12]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d9dc      	bls.n	800443c <inc_lock+0x10>
 8004482:	e000      	b.n	8004486 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004484:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2b02      	cmp	r3, #2
 800448a:	d132      	bne.n	80044f2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800448c:	2300      	movs	r3, #0
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	e002      	b.n	8004498 <inc_lock+0x6c>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	3301      	adds	r3, #1
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d806      	bhi.n	80044ac <inc_lock+0x80>
 800449e:	4a29      	ldr	r2, [pc, #164]	@ (8004544 <inc_lock+0x118>)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	011b      	lsls	r3, r3, #4
 80044a4:	4413      	add	r3, r2
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1f2      	bne.n	8004492 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d101      	bne.n	80044b6 <inc_lock+0x8a>
 80044b2:	2300      	movs	r3, #0
 80044b4:	e040      	b.n	8004538 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	4922      	ldr	r1, [pc, #136]	@ (8004544 <inc_lock+0x118>)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	011b      	lsls	r3, r3, #4
 80044c0:	440b      	add	r3, r1
 80044c2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	491e      	ldr	r1, [pc, #120]	@ (8004544 <inc_lock+0x118>)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	011b      	lsls	r3, r3, #4
 80044ce:	440b      	add	r3, r1
 80044d0:	3304      	adds	r3, #4
 80044d2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	695a      	ldr	r2, [r3, #20]
 80044d8:	491a      	ldr	r1, [pc, #104]	@ (8004544 <inc_lock+0x118>)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	011b      	lsls	r3, r3, #4
 80044de:	440b      	add	r3, r1
 80044e0:	3308      	adds	r3, #8
 80044e2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80044e4:	4a17      	ldr	r2, [pc, #92]	@ (8004544 <inc_lock+0x118>)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	011b      	lsls	r3, r3, #4
 80044ea:	4413      	add	r3, r2
 80044ec:	330c      	adds	r3, #12
 80044ee:	2200      	movs	r2, #0
 80044f0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d009      	beq.n	800450c <inc_lock+0xe0>
 80044f8:	4a12      	ldr	r2, [pc, #72]	@ (8004544 <inc_lock+0x118>)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	4413      	add	r3, r2
 8004500:	330c      	adds	r3, #12
 8004502:	881b      	ldrh	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d001      	beq.n	800450c <inc_lock+0xe0>
 8004508:	2300      	movs	r3, #0
 800450a:	e015      	b.n	8004538 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d108      	bne.n	8004524 <inc_lock+0xf8>
 8004512:	4a0c      	ldr	r2, [pc, #48]	@ (8004544 <inc_lock+0x118>)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	011b      	lsls	r3, r3, #4
 8004518:	4413      	add	r3, r2
 800451a:	330c      	adds	r3, #12
 800451c:	881b      	ldrh	r3, [r3, #0]
 800451e:	3301      	adds	r3, #1
 8004520:	b29a      	uxth	r2, r3
 8004522:	e001      	b.n	8004528 <inc_lock+0xfc>
 8004524:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004528:	4906      	ldr	r1, [pc, #24]	@ (8004544 <inc_lock+0x118>)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	011b      	lsls	r3, r3, #4
 800452e:	440b      	add	r3, r1
 8004530:	330c      	adds	r3, #12
 8004532:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	3301      	adds	r3, #1
}
 8004538:	4618      	mov	r0, r3
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	200050d8 	.word	0x200050d8

08004548 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	3b01      	subs	r3, #1
 8004554:	607b      	str	r3, [r7, #4]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d825      	bhi.n	80045a8 <dec_lock+0x60>
		n = Files[i].ctr;
 800455c:	4a17      	ldr	r2, [pc, #92]	@ (80045bc <dec_lock+0x74>)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	011b      	lsls	r3, r3, #4
 8004562:	4413      	add	r3, r2
 8004564:	330c      	adds	r3, #12
 8004566:	881b      	ldrh	r3, [r3, #0]
 8004568:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800456a:	89fb      	ldrh	r3, [r7, #14]
 800456c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004570:	d101      	bne.n	8004576 <dec_lock+0x2e>
 8004572:	2300      	movs	r3, #0
 8004574:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004576:	89fb      	ldrh	r3, [r7, #14]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d002      	beq.n	8004582 <dec_lock+0x3a>
 800457c:	89fb      	ldrh	r3, [r7, #14]
 800457e:	3b01      	subs	r3, #1
 8004580:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004582:	4a0e      	ldr	r2, [pc, #56]	@ (80045bc <dec_lock+0x74>)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	011b      	lsls	r3, r3, #4
 8004588:	4413      	add	r3, r2
 800458a:	330c      	adds	r3, #12
 800458c:	89fa      	ldrh	r2, [r7, #14]
 800458e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004590:	89fb      	ldrh	r3, [r7, #14]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d105      	bne.n	80045a2 <dec_lock+0x5a>
 8004596:	4a09      	ldr	r2, [pc, #36]	@ (80045bc <dec_lock+0x74>)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	011b      	lsls	r3, r3, #4
 800459c:	4413      	add	r3, r2
 800459e:	2200      	movs	r2, #0
 80045a0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	737b      	strb	r3, [r7, #13]
 80045a6:	e001      	b.n	80045ac <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80045a8:	2302      	movs	r3, #2
 80045aa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80045ac:	7b7b      	ldrb	r3, [r7, #13]
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	200050d8 	.word	0x200050d8

080045c0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80045c8:	2300      	movs	r3, #0
 80045ca:	60fb      	str	r3, [r7, #12]
 80045cc:	e010      	b.n	80045f0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80045ce:	4a0d      	ldr	r2, [pc, #52]	@ (8004604 <clear_lock+0x44>)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	011b      	lsls	r3, r3, #4
 80045d4:	4413      	add	r3, r2
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d105      	bne.n	80045ea <clear_lock+0x2a>
 80045de:	4a09      	ldr	r2, [pc, #36]	@ (8004604 <clear_lock+0x44>)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	011b      	lsls	r3, r3, #4
 80045e4:	4413      	add	r3, r2
 80045e6:	2200      	movs	r2, #0
 80045e8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	3301      	adds	r3, #1
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d9eb      	bls.n	80045ce <clear_lock+0xe>
	}
}
 80045f6:	bf00      	nop
 80045f8:	bf00      	nop
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	200050d8 	.word	0x200050d8

08004608 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004610:	2300      	movs	r3, #0
 8004612:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	78db      	ldrb	r3, [r3, #3]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d034      	beq.n	8004686 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004620:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	7858      	ldrb	r0, [r3, #1]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800462c:	2301      	movs	r3, #1
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	f7ff fd40 	bl	80040b4 <disk_write>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d002      	beq.n	8004640 <sync_window+0x38>
			res = FR_DISK_ERR;
 800463a:	2301      	movs	r3, #1
 800463c:	73fb      	strb	r3, [r7, #15]
 800463e:	e022      	b.n	8004686 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	1ad2      	subs	r2, r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	429a      	cmp	r2, r3
 8004654:	d217      	bcs.n	8004686 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	789b      	ldrb	r3, [r3, #2]
 800465a:	613b      	str	r3, [r7, #16]
 800465c:	e010      	b.n	8004680 <sync_window+0x78>
					wsect += fs->fsize;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	4413      	add	r3, r2
 8004666:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	7858      	ldrb	r0, [r3, #1]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004672:	2301      	movs	r3, #1
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	f7ff fd1d 	bl	80040b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	3b01      	subs	r3, #1
 800467e:	613b      	str	r3, [r7, #16]
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d8eb      	bhi.n	800465e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004686:	7bfb      	ldrb	r3, [r7, #15]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800469a:	2300      	movs	r3, #0
 800469c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d01b      	beq.n	80046e0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f7ff ffad 	bl	8004608 <sync_window>
 80046ae:	4603      	mov	r3, r0
 80046b0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80046b2:	7bfb      	ldrb	r3, [r7, #15]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d113      	bne.n	80046e0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	7858      	ldrb	r0, [r3, #1]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80046c2:	2301      	movs	r3, #1
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	f7ff fcd5 	bl	8004074 <disk_read>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d004      	beq.n	80046da <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80046d0:	f04f 33ff 	mov.w	r3, #4294967295
 80046d4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 80046e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
	...

080046ec <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f7ff ff87 	bl	8004608 <sync_window>
 80046fa:	4603      	mov	r3, r0
 80046fc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d159      	bne.n	80047b8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	2b03      	cmp	r3, #3
 800470a:	d149      	bne.n	80047a0 <sync_fs+0xb4>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	791b      	ldrb	r3, [r3, #4]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d145      	bne.n	80047a0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	899b      	ldrh	r3, [r3, #12]
 800471e:	461a      	mov	r2, r3
 8004720:	2100      	movs	r1, #0
 8004722:	f7ff fda8 	bl	8004276 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	3338      	adds	r3, #56	@ 0x38
 800472a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800472e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8004732:	4618      	mov	r0, r3
 8004734:	f7ff fd37 	bl	80041a6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	3338      	adds	r3, #56	@ 0x38
 800473c:	4921      	ldr	r1, [pc, #132]	@ (80047c4 <sync_fs+0xd8>)
 800473e:	4618      	mov	r0, r3
 8004740:	f7ff fd4c 	bl	80041dc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3338      	adds	r3, #56	@ 0x38
 8004748:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800474c:	491e      	ldr	r1, [pc, #120]	@ (80047c8 <sync_fs+0xdc>)
 800474e:	4618      	mov	r0, r3
 8004750:	f7ff fd44 	bl	80041dc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	3338      	adds	r3, #56	@ 0x38
 8004758:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	4619      	mov	r1, r3
 8004762:	4610      	mov	r0, r2
 8004764:	f7ff fd3a 	bl	80041dc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	3338      	adds	r3, #56	@ 0x38
 800476c:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	4619      	mov	r1, r3
 8004776:	4610      	mov	r0, r2
 8004778:	f7ff fd30 	bl	80041dc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004780:	1c5a      	adds	r2, r3, #1
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	7858      	ldrb	r0, [r3, #1]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004794:	2301      	movs	r3, #1
 8004796:	f7ff fc8d 	bl	80040b4 <disk_write>
			fs->fsi_flag = 0;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	785b      	ldrb	r3, [r3, #1]
 80047a4:	2200      	movs	r2, #0
 80047a6:	2100      	movs	r1, #0
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff fca3 	bl	80040f4 <disk_ioctl>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <sync_fs+0xcc>
 80047b4:	2301      	movs	r3, #1
 80047b6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	41615252 	.word	0x41615252
 80047c8:	61417272 	.word	0x61417272

080047cc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	3b02      	subs	r3, #2
 80047da:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	69db      	ldr	r3, [r3, #28]
 80047e0:	3b02      	subs	r3, #2
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d301      	bcc.n	80047ec <clust2sect+0x20>
 80047e8:	2300      	movs	r3, #0
 80047ea:	e008      	b.n	80047fe <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	895b      	ldrh	r3, [r3, #10]
 80047f0:	461a      	mov	r2, r3
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	fb03 f202 	mul.w	r2, r3, r2
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047fc:	4413      	add	r3, r2
}
 80047fe:	4618      	mov	r0, r3
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b086      	sub	sp, #24
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
 8004812:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d904      	bls.n	800482a <get_fat+0x20>
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	69db      	ldr	r3, [r3, #28]
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	429a      	cmp	r2, r3
 8004828:	d302      	bcc.n	8004830 <get_fat+0x26>
		val = 1;	/* Internal error */
 800482a:	2301      	movs	r3, #1
 800482c:	617b      	str	r3, [r7, #20]
 800482e:	e0ba      	b.n	80049a6 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004830:	f04f 33ff 	mov.w	r3, #4294967295
 8004834:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	2b03      	cmp	r3, #3
 800483c:	f000 8082 	beq.w	8004944 <get_fat+0x13a>
 8004840:	2b03      	cmp	r3, #3
 8004842:	f300 80a6 	bgt.w	8004992 <get_fat+0x188>
 8004846:	2b01      	cmp	r3, #1
 8004848:	d002      	beq.n	8004850 <get_fat+0x46>
 800484a:	2b02      	cmp	r3, #2
 800484c:	d055      	beq.n	80048fa <get_fat+0xf0>
 800484e:	e0a0      	b.n	8004992 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	60fb      	str	r3, [r7, #12]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	085b      	lsrs	r3, r3, #1
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	4413      	add	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	899b      	ldrh	r3, [r3, #12]
 8004866:	4619      	mov	r1, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	fbb3 f3f1 	udiv	r3, r3, r1
 800486e:	4413      	add	r3, r2
 8004870:	4619      	mov	r1, r3
 8004872:	6938      	ldr	r0, [r7, #16]
 8004874:	f7ff ff0c 	bl	8004690 <move_window>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	f040 808c 	bne.w	8004998 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	1c5a      	adds	r2, r3, #1
 8004884:	60fa      	str	r2, [r7, #12]
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	8992      	ldrh	r2, [r2, #12]
 800488a:	fbb3 f1f2 	udiv	r1, r3, r2
 800488e:	fb01 f202 	mul.w	r2, r1, r2
 8004892:	1a9b      	subs	r3, r3, r2
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	4413      	add	r3, r2
 8004898:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800489c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	899b      	ldrh	r3, [r3, #12]
 80048a6:	4619      	mov	r1, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80048ae:	4413      	add	r3, r2
 80048b0:	4619      	mov	r1, r3
 80048b2:	6938      	ldr	r0, [r7, #16]
 80048b4:	f7ff feec 	bl	8004690 <move_window>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d16e      	bne.n	800499c <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	899b      	ldrh	r3, [r3, #12]
 80048c2:	461a      	mov	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80048ca:	fb01 f202 	mul.w	r2, r1, r2
 80048ce:	1a9b      	subs	r3, r3, r2
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	4413      	add	r3, r2
 80048d4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80048d8:	021b      	lsls	r3, r3, #8
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	4313      	orrs	r3, r2
 80048de:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d002      	beq.n	80048f0 <get_fat+0xe6>
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	091b      	lsrs	r3, r3, #4
 80048ee:	e002      	b.n	80048f6 <get_fat+0xec>
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048f6:	617b      	str	r3, [r7, #20]
			break;
 80048f8:	e055      	b.n	80049a6 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	899b      	ldrh	r3, [r3, #12]
 8004902:	085b      	lsrs	r3, r3, #1
 8004904:	b29b      	uxth	r3, r3
 8004906:	4619      	mov	r1, r3
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	fbb3 f3f1 	udiv	r3, r3, r1
 800490e:	4413      	add	r3, r2
 8004910:	4619      	mov	r1, r3
 8004912:	6938      	ldr	r0, [r7, #16]
 8004914:	f7ff febc 	bl	8004690 <move_window>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d140      	bne.n	80049a0 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	8992      	ldrh	r2, [r2, #12]
 800492c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004930:	fb00 f202 	mul.w	r2, r0, r2
 8004934:	1a9b      	subs	r3, r3, r2
 8004936:	440b      	add	r3, r1
 8004938:	4618      	mov	r0, r3
 800493a:	f7ff fbf9 	bl	8004130 <ld_word>
 800493e:	4603      	mov	r3, r0
 8004940:	617b      	str	r3, [r7, #20]
			break;
 8004942:	e030      	b.n	80049a6 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	899b      	ldrh	r3, [r3, #12]
 800494c:	089b      	lsrs	r3, r3, #2
 800494e:	b29b      	uxth	r3, r3
 8004950:	4619      	mov	r1, r3
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	fbb3 f3f1 	udiv	r3, r3, r1
 8004958:	4413      	add	r3, r2
 800495a:	4619      	mov	r1, r3
 800495c:	6938      	ldr	r0, [r7, #16]
 800495e:	f7ff fe97 	bl	8004690 <move_window>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d11d      	bne.n	80049a4 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	8992      	ldrh	r2, [r2, #12]
 8004976:	fbb3 f0f2 	udiv	r0, r3, r2
 800497a:	fb00 f202 	mul.w	r2, r0, r2
 800497e:	1a9b      	subs	r3, r3, r2
 8004980:	440b      	add	r3, r1
 8004982:	4618      	mov	r0, r3
 8004984:	f7ff fbec 	bl	8004160 <ld_dword>
 8004988:	4603      	mov	r3, r0
 800498a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800498e:	617b      	str	r3, [r7, #20]
			break;
 8004990:	e009      	b.n	80049a6 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004992:	2301      	movs	r3, #1
 8004994:	617b      	str	r3, [r7, #20]
 8004996:	e006      	b.n	80049a6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004998:	bf00      	nop
 800499a:	e004      	b.n	80049a6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800499c:	bf00      	nop
 800499e:	e002      	b.n	80049a6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80049a0:	bf00      	nop
 80049a2:	e000      	b.n	80049a6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80049a4:	bf00      	nop
		}
	}

	return val;
 80049a6:	697b      	ldr	r3, [r7, #20]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3718      	adds	r7, #24
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80049b0:	b590      	push	{r4, r7, lr}
 80049b2:	b089      	sub	sp, #36	@ 0x24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80049bc:	2302      	movs	r3, #2
 80049be:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	f240 8109 	bls.w	8004bda <put_fat+0x22a>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	69db      	ldr	r3, [r3, #28]
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	f080 8103 	bcs.w	8004bda <put_fat+0x22a>
		switch (fs->fs_type) {
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	2b03      	cmp	r3, #3
 80049da:	f000 80b6 	beq.w	8004b4a <put_fat+0x19a>
 80049de:	2b03      	cmp	r3, #3
 80049e0:	f300 80fb 	bgt.w	8004bda <put_fat+0x22a>
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d003      	beq.n	80049f0 <put_fat+0x40>
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	f000 8083 	beq.w	8004af4 <put_fat+0x144>
 80049ee:	e0f4      	b.n	8004bda <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	61bb      	str	r3, [r7, #24]
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	085b      	lsrs	r3, r3, #1
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	4413      	add	r3, r2
 80049fc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	899b      	ldrh	r3, [r3, #12]
 8004a06:	4619      	mov	r1, r3
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a0e:	4413      	add	r3, r2
 8004a10:	4619      	mov	r1, r3
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f7ff fe3c 	bl	8004690 <move_window>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004a1c:	7ffb      	ldrb	r3, [r7, #31]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f040 80d4 	bne.w	8004bcc <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	61ba      	str	r2, [r7, #24]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	8992      	ldrh	r2, [r2, #12]
 8004a34:	fbb3 f0f2 	udiv	r0, r3, r2
 8004a38:	fb00 f202 	mul.w	r2, r0, r2
 8004a3c:	1a9b      	subs	r3, r3, r2
 8004a3e:	440b      	add	r3, r1
 8004a40:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00d      	beq.n	8004a68 <put_fat+0xb8>
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	b25b      	sxtb	r3, r3
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	b25a      	sxtb	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	011b      	lsls	r3, r3, #4
 8004a5e:	b25b      	sxtb	r3, r3
 8004a60:	4313      	orrs	r3, r2
 8004a62:	b25b      	sxtb	r3, r3
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	e001      	b.n	8004a6c <put_fat+0xbc>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2201      	movs	r2, #1
 8004a74:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	899b      	ldrh	r3, [r3, #12]
 8004a7e:	4619      	mov	r1, r3
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a86:	4413      	add	r3, r2
 8004a88:	4619      	mov	r1, r3
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f7ff fe00 	bl	8004690 <move_window>
 8004a90:	4603      	mov	r3, r0
 8004a92:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004a94:	7ffb      	ldrb	r3, [r7, #31]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f040 809a 	bne.w	8004bd0 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	899b      	ldrh	r3, [r3, #12]
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	fbb3 f0f2 	udiv	r0, r3, r2
 8004aae:	fb00 f202 	mul.w	r2, r0, r2
 8004ab2:	1a9b      	subs	r3, r3, r2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <put_fat+0x11a>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	091b      	lsrs	r3, r3, #4
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	e00e      	b.n	8004ae8 <put_fat+0x138>
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	b25b      	sxtb	r3, r3
 8004ad0:	f023 030f 	bic.w	r3, r3, #15
 8004ad4:	b25a      	sxtb	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	0a1b      	lsrs	r3, r3, #8
 8004ada:	b25b      	sxtb	r3, r3
 8004adc:	f003 030f 	and.w	r3, r3, #15
 8004ae0:	b25b      	sxtb	r3, r3
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	b25b      	sxtb	r3, r3
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2201      	movs	r2, #1
 8004af0:	70da      	strb	r2, [r3, #3]
			break;
 8004af2:	e072      	b.n	8004bda <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	899b      	ldrh	r3, [r3, #12]
 8004afc:	085b      	lsrs	r3, r3, #1
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	4619      	mov	r1, r3
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b08:	4413      	add	r3, r2
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f7ff fdbf 	bl	8004690 <move_window>
 8004b12:	4603      	mov	r3, r0
 8004b14:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004b16:	7ffb      	ldrb	r3, [r7, #31]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d15b      	bne.n	8004bd4 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	005b      	lsls	r3, r3, #1
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	8992      	ldrh	r2, [r2, #12]
 8004b2a:	fbb3 f0f2 	udiv	r0, r3, r2
 8004b2e:	fb00 f202 	mul.w	r2, r0, r2
 8004b32:	1a9b      	subs	r3, r3, r2
 8004b34:	440b      	add	r3, r1
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	b292      	uxth	r2, r2
 8004b3a:	4611      	mov	r1, r2
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7ff fb32 	bl	80041a6 <st_word>
			fs->wflag = 1;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2201      	movs	r2, #1
 8004b46:	70da      	strb	r2, [r3, #3]
			break;
 8004b48:	e047      	b.n	8004bda <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	899b      	ldrh	r3, [r3, #12]
 8004b52:	089b      	lsrs	r3, r3, #2
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	4619      	mov	r1, r3
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b5e:	4413      	add	r3, r2
 8004b60:	4619      	mov	r1, r3
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f7ff fd94 	bl	8004690 <move_window>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004b6c:	7ffb      	ldrb	r3, [r7, #31]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d132      	bne.n	8004bd8 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	8992      	ldrh	r2, [r2, #12]
 8004b86:	fbb3 f0f2 	udiv	r0, r3, r2
 8004b8a:	fb00 f202 	mul.w	r2, r0, r2
 8004b8e:	1a9b      	subs	r3, r3, r2
 8004b90:	440b      	add	r3, r1
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7ff fae4 	bl	8004160 <ld_dword>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004b9e:	4323      	orrs	r3, r4
 8004ba0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	8992      	ldrh	r2, [r2, #12]
 8004bb0:	fbb3 f0f2 	udiv	r0, r3, r2
 8004bb4:	fb00 f202 	mul.w	r2, r0, r2
 8004bb8:	1a9b      	subs	r3, r3, r2
 8004bba:	440b      	add	r3, r1
 8004bbc:	6879      	ldr	r1, [r7, #4]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7ff fb0c 	bl	80041dc <st_dword>
			fs->wflag = 1;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	70da      	strb	r2, [r3, #3]
			break;
 8004bca:	e006      	b.n	8004bda <put_fat+0x22a>
			if (res != FR_OK) break;
 8004bcc:	bf00      	nop
 8004bce:	e004      	b.n	8004bda <put_fat+0x22a>
			if (res != FR_OK) break;
 8004bd0:	bf00      	nop
 8004bd2:	e002      	b.n	8004bda <put_fat+0x22a>
			if (res != FR_OK) break;
 8004bd4:	bf00      	nop
 8004bd6:	e000      	b.n	8004bda <put_fat+0x22a>
			if (res != FR_OK) break;
 8004bd8:	bf00      	nop
		}
	}
	return res;
 8004bda:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3724      	adds	r7, #36	@ 0x24
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd90      	pop	{r4, r7, pc}

08004be4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b088      	sub	sp, #32
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d904      	bls.n	8004c0a <remove_chain+0x26>
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d301      	bcc.n	8004c0e <remove_chain+0x2a>
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	e04b      	b.n	8004ca6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00c      	beq.n	8004c2e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004c14:	f04f 32ff 	mov.w	r2, #4294967295
 8004c18:	6879      	ldr	r1, [r7, #4]
 8004c1a:	69b8      	ldr	r0, [r7, #24]
 8004c1c:	f7ff fec8 	bl	80049b0 <put_fat>
 8004c20:	4603      	mov	r3, r0
 8004c22:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004c24:	7ffb      	ldrb	r3, [r7, #31]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <remove_chain+0x4a>
 8004c2a:	7ffb      	ldrb	r3, [r7, #31]
 8004c2c:	e03b      	b.n	8004ca6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004c2e:	68b9      	ldr	r1, [r7, #8]
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f7ff fdea 	bl	800480a <get_fat>
 8004c36:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d031      	beq.n	8004ca2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d101      	bne.n	8004c48 <remove_chain+0x64>
 8004c44:	2302      	movs	r3, #2
 8004c46:	e02e      	b.n	8004ca6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4e:	d101      	bne.n	8004c54 <remove_chain+0x70>
 8004c50:	2301      	movs	r3, #1
 8004c52:	e028      	b.n	8004ca6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004c54:	2200      	movs	r2, #0
 8004c56:	68b9      	ldr	r1, [r7, #8]
 8004c58:	69b8      	ldr	r0, [r7, #24]
 8004c5a:	f7ff fea9 	bl	80049b0 <put_fat>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004c62:	7ffb      	ldrb	r3, [r7, #31]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d001      	beq.n	8004c6c <remove_chain+0x88>
 8004c68:	7ffb      	ldrb	r3, [r7, #31]
 8004c6a:	e01c      	b.n	8004ca6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	699a      	ldr	r2, [r3, #24]
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	3b02      	subs	r3, #2
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d20b      	bcs.n	8004c92 <remove_chain+0xae>
			fs->free_clst++;
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	1c5a      	adds	r2, r3, #1
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	791b      	ldrb	r3, [r3, #4]
 8004c88:	f043 0301 	orr.w	r3, r3, #1
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d3c6      	bcc.n	8004c2e <remove_chain+0x4a>
 8004ca0:	e000      	b.n	8004ca4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004ca2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3720      	adds	r7, #32
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b088      	sub	sp, #32
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
 8004cb6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10d      	bne.n	8004ce0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	695b      	ldr	r3, [r3, #20]
 8004cc8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d004      	beq.n	8004cda <create_chain+0x2c>
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	69db      	ldr	r3, [r3, #28]
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d31b      	bcc.n	8004d12 <create_chain+0x64>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	61bb      	str	r3, [r7, #24]
 8004cde:	e018      	b.n	8004d12 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004ce0:	6839      	ldr	r1, [r7, #0]
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7ff fd91 	bl	800480a <get_fat>
 8004ce8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d801      	bhi.n	8004cf4 <create_chain+0x46>
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e070      	b.n	8004dd6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfa:	d101      	bne.n	8004d00 <create_chain+0x52>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	e06a      	b.n	8004dd6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	69db      	ldr	r3, [r3, #28]
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d201      	bcs.n	8004d0e <create_chain+0x60>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	e063      	b.n	8004dd6 <create_chain+0x128>
		scl = clst;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	69db      	ldr	r3, [r3, #28]
 8004d20:	69fa      	ldr	r2, [r7, #28]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d307      	bcc.n	8004d36 <create_chain+0x88>
				ncl = 2;
 8004d26:	2302      	movs	r3, #2
 8004d28:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004d2a:	69fa      	ldr	r2, [r7, #28]
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d901      	bls.n	8004d36 <create_chain+0x88>
 8004d32:	2300      	movs	r3, #0
 8004d34:	e04f      	b.n	8004dd6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004d36:	69f9      	ldr	r1, [r7, #28]
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f7ff fd66 	bl	800480a <get_fat>
 8004d3e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00e      	beq.n	8004d64 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d003      	beq.n	8004d54 <create_chain+0xa6>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d52:	d101      	bne.n	8004d58 <create_chain+0xaa>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	e03e      	b.n	8004dd6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004d58:	69fa      	ldr	r2, [r7, #28]
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d1da      	bne.n	8004d16 <create_chain+0x68>
 8004d60:	2300      	movs	r3, #0
 8004d62:	e038      	b.n	8004dd6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004d64:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004d66:	f04f 32ff 	mov.w	r2, #4294967295
 8004d6a:	69f9      	ldr	r1, [r7, #28]
 8004d6c:	6938      	ldr	r0, [r7, #16]
 8004d6e:	f7ff fe1f 	bl	80049b0 <put_fat>
 8004d72:	4603      	mov	r3, r0
 8004d74:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004d76:	7dfb      	ldrb	r3, [r7, #23]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d109      	bne.n	8004d90 <create_chain+0xe2>
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d006      	beq.n	8004d90 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004d82:	69fa      	ldr	r2, [r7, #28]
 8004d84:	6839      	ldr	r1, [r7, #0]
 8004d86:	6938      	ldr	r0, [r7, #16]
 8004d88:	f7ff fe12 	bl	80049b0 <put_fat>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004d90:	7dfb      	ldrb	r3, [r7, #23]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d116      	bne.n	8004dc4 <create_chain+0x116>
		fs->last_clst = ncl;
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	69fa      	ldr	r2, [r7, #28]
 8004d9a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	699a      	ldr	r2, [r3, #24]
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	3b02      	subs	r3, #2
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d804      	bhi.n	8004db4 <create_chain+0x106>
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	1e5a      	subs	r2, r3, #1
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	791b      	ldrb	r3, [r3, #4]
 8004db8:	f043 0301 	orr.w	r3, r3, #1
 8004dbc:	b2da      	uxtb	r2, r3
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	711a      	strb	r2, [r3, #4]
 8004dc2:	e007      	b.n	8004dd4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004dc4:	7dfb      	ldrb	r3, [r7, #23]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d102      	bne.n	8004dd0 <create_chain+0x122>
 8004dca:	f04f 33ff 	mov.w	r3, #4294967295
 8004dce:	e000      	b.n	8004dd2 <create_chain+0x124>
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004dd4:	69fb      	ldr	r3, [r7, #28]
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3720      	adds	r7, #32
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b087      	sub	sp, #28
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
 8004de6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df2:	3304      	adds	r3, #4
 8004df4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	899b      	ldrh	r3, [r3, #12]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	8952      	ldrh	r2, [r2, #10]
 8004e06:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e0a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	1d1a      	adds	r2, r3, #4
 8004e10:	613a      	str	r2, [r7, #16]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <clmt_clust+0x42>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	e010      	b.n	8004e42 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d307      	bcc.n	8004e38 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	617b      	str	r3, [r7, #20]
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	3304      	adds	r3, #4
 8004e34:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004e36:	e7e9      	b.n	8004e0c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8004e38:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	4413      	add	r3, r2
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	371c      	adds	r7, #28
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b086      	sub	sp, #24
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
 8004e56:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e64:	d204      	bcs.n	8004e70 <dir_sdi+0x22>
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	f003 031f 	and.w	r3, r3, #31
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d001      	beq.n	8004e74 <dir_sdi+0x26>
		return FR_INT_ERR;
 8004e70:	2302      	movs	r3, #2
 8004e72:	e071      	b.n	8004f58 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d106      	bne.n	8004e94 <dir_sdi+0x46>
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d902      	bls.n	8004e94 <dir_sdi+0x46>
		clst = fs->dirbase;
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e92:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10c      	bne.n	8004eb4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	095b      	lsrs	r3, r3, #5
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	8912      	ldrh	r2, [r2, #8]
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d301      	bcc.n	8004eaa <dir_sdi+0x5c>
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	e056      	b.n	8004f58 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	61da      	str	r2, [r3, #28]
 8004eb2:	e02d      	b.n	8004f10 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	895b      	ldrh	r3, [r3, #10]
 8004eb8:	461a      	mov	r2, r3
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	899b      	ldrh	r3, [r3, #12]
 8004ebe:	fb02 f303 	mul.w	r3, r2, r3
 8004ec2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004ec4:	e019      	b.n	8004efa <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6979      	ldr	r1, [r7, #20]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7ff fc9d 	bl	800480a <get_fat>
 8004ed0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed8:	d101      	bne.n	8004ede <dir_sdi+0x90>
 8004eda:	2301      	movs	r3, #1
 8004edc:	e03c      	b.n	8004f58 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d904      	bls.n	8004eee <dir_sdi+0xa0>
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	69db      	ldr	r3, [r3, #28]
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d301      	bcc.n	8004ef2 <dir_sdi+0xa4>
 8004eee:	2302      	movs	r3, #2
 8004ef0:	e032      	b.n	8004f58 <dir_sdi+0x10a>
			ofs -= csz;
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d2e1      	bcs.n	8004ec6 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8004f02:	6979      	ldr	r1, [r7, #20]
 8004f04:	6938      	ldr	r0, [r7, #16]
 8004f06:	f7ff fc61 	bl	80047cc <clust2sect>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <dir_sdi+0xd4>
 8004f1e:	2302      	movs	r3, #2
 8004f20:	e01a      	b.n	8004f58 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	69da      	ldr	r2, [r3, #28]
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	899b      	ldrh	r3, [r3, #12]
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f32:	441a      	add	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	899b      	ldrh	r3, [r3, #12]
 8004f42:	461a      	mov	r2, r3
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	fbb3 f0f2 	udiv	r0, r3, r2
 8004f4a:	fb00 f202 	mul.w	r2, r0, r2
 8004f4e:	1a9b      	subs	r3, r3, r2
 8004f50:	18ca      	adds	r2, r1, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3718      	adds	r7, #24
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	3320      	adds	r3, #32
 8004f76:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	69db      	ldr	r3, [r3, #28]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d003      	beq.n	8004f88 <dir_next+0x28>
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f86:	d301      	bcc.n	8004f8c <dir_next+0x2c>
 8004f88:	2304      	movs	r3, #4
 8004f8a:	e0bb      	b.n	8005104 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	899b      	ldrh	r3, [r3, #12]
 8004f90:	461a      	mov	r2, r3
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f98:	fb01 f202 	mul.w	r2, r1, r2
 8004f9c:	1a9b      	subs	r3, r3, r2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f040 809d 	bne.w	80050de <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	1c5a      	adds	r2, r3, #1
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10b      	bne.n	8004fce <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	095b      	lsrs	r3, r3, #5
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	8912      	ldrh	r2, [r2, #8]
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	f0c0 808d 	bcc.w	80050de <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	61da      	str	r2, [r3, #28]
 8004fca:	2304      	movs	r3, #4
 8004fcc:	e09a      	b.n	8005104 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	899b      	ldrh	r3, [r3, #12]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	8952      	ldrh	r2, [r2, #10]
 8004fde:	3a01      	subs	r2, #1
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d17b      	bne.n	80050de <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	4619      	mov	r1, r3
 8004fee:	4610      	mov	r0, r2
 8004ff0:	f7ff fc0b 	bl	800480a <get_fat>
 8004ff4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d801      	bhi.n	8005000 <dir_next+0xa0>
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	e081      	b.n	8005104 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005006:	d101      	bne.n	800500c <dir_next+0xac>
 8005008:	2301      	movs	r3, #1
 800500a:	e07b      	b.n	8005104 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	69db      	ldr	r3, [r3, #28]
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	429a      	cmp	r2, r3
 8005014:	d359      	bcc.n	80050ca <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d104      	bne.n	8005026 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	61da      	str	r2, [r3, #28]
 8005022:	2304      	movs	r3, #4
 8005024:	e06e      	b.n	8005104 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	4619      	mov	r1, r3
 800502e:	4610      	mov	r0, r2
 8005030:	f7ff fe3d 	bl	8004cae <create_chain>
 8005034:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <dir_next+0xe0>
 800503c:	2307      	movs	r3, #7
 800503e:	e061      	b.n	8005104 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d101      	bne.n	800504a <dir_next+0xea>
 8005046:	2302      	movs	r3, #2
 8005048:	e05c      	b.n	8005104 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005050:	d101      	bne.n	8005056 <dir_next+0xf6>
 8005052:	2301      	movs	r3, #1
 8005054:	e056      	b.n	8005104 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f7ff fad6 	bl	8004608 <sync_window>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d001      	beq.n	8005066 <dir_next+0x106>
 8005062:	2301      	movs	r3, #1
 8005064:	e04e      	b.n	8005104 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	899b      	ldrh	r3, [r3, #12]
 8005070:	461a      	mov	r2, r3
 8005072:	2100      	movs	r1, #0
 8005074:	f7ff f8ff 	bl	8004276 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005078:	2300      	movs	r3, #0
 800507a:	613b      	str	r3, [r7, #16]
 800507c:	6979      	ldr	r1, [r7, #20]
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f7ff fba4 	bl	80047cc <clust2sect>
 8005084:	4602      	mov	r2, r0
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	635a      	str	r2, [r3, #52]	@ 0x34
 800508a:	e012      	b.n	80050b2 <dir_next+0x152>
						fs->wflag = 1;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2201      	movs	r2, #1
 8005090:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f7ff fab8 	bl	8004608 <sync_window>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d001      	beq.n	80050a2 <dir_next+0x142>
 800509e:	2301      	movs	r3, #1
 80050a0:	e030      	b.n	8005104 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	3301      	adds	r3, #1
 80050a6:	613b      	str	r3, [r7, #16]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050ac:	1c5a      	adds	r2, r3, #1
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	895b      	ldrh	r3, [r3, #10]
 80050b6:	461a      	mov	r2, r3
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d3e6      	bcc.n	800508c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	1ad2      	subs	r2, r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80050d0:	6979      	ldr	r1, [r7, #20]
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f7ff fb7a 	bl	80047cc <clust2sect>
 80050d8:	4602      	mov	r2, r0
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	899b      	ldrh	r3, [r3, #12]
 80050ee:	461a      	mov	r2, r3
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	fbb3 f0f2 	udiv	r0, r3, r2
 80050f6:	fb00 f202 	mul.w	r2, r0, r2
 80050fa:	1a9b      	subs	r3, r3, r2
 80050fc:	18ca      	adds	r2, r1, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3718      	adds	r7, #24
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800511c:	2100      	movs	r1, #0
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7ff fe95 	bl	8004e4e <dir_sdi>
 8005124:	4603      	mov	r3, r0
 8005126:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005128:	7dfb      	ldrb	r3, [r7, #23]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d12b      	bne.n	8005186 <dir_alloc+0x7a>
		n = 0;
 800512e:	2300      	movs	r3, #0
 8005130:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	69db      	ldr	r3, [r3, #28]
 8005136:	4619      	mov	r1, r3
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f7ff faa9 	bl	8004690 <move_window>
 800513e:	4603      	mov	r3, r0
 8005140:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005142:	7dfb      	ldrb	r3, [r7, #23]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d11d      	bne.n	8005184 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	2be5      	cmp	r3, #229	@ 0xe5
 8005150:	d004      	beq.n	800515c <dir_alloc+0x50>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a1b      	ldr	r3, [r3, #32]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d107      	bne.n	800516c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	3301      	adds	r3, #1
 8005160:	613b      	str	r3, [r7, #16]
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	429a      	cmp	r2, r3
 8005168:	d102      	bne.n	8005170 <dir_alloc+0x64>
 800516a:	e00c      	b.n	8005186 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800516c:	2300      	movs	r3, #0
 800516e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005170:	2101      	movs	r1, #1
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7ff fef4 	bl	8004f60 <dir_next>
 8005178:	4603      	mov	r3, r0
 800517a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800517c:	7dfb      	ldrb	r3, [r7, #23]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d0d7      	beq.n	8005132 <dir_alloc+0x26>
 8005182:	e000      	b.n	8005186 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005184:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005186:	7dfb      	ldrb	r3, [r7, #23]
 8005188:	2b04      	cmp	r3, #4
 800518a:	d101      	bne.n	8005190 <dir_alloc+0x84>
 800518c:	2307      	movs	r3, #7
 800518e:	75fb      	strb	r3, [r7, #23]
	return res;
 8005190:	7dfb      	ldrb	r3, [r7, #23]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3718      	adds	r7, #24
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b084      	sub	sp, #16
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
 80051a2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	331a      	adds	r3, #26
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7fe ffc1 	bl	8004130 <ld_word>
 80051ae:	4603      	mov	r3, r0
 80051b0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	2b03      	cmp	r3, #3
 80051b8:	d109      	bne.n	80051ce <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	3314      	adds	r3, #20
 80051be:	4618      	mov	r0, r3
 80051c0:	f7fe ffb6 	bl	8004130 <ld_word>
 80051c4:	4603      	mov	r3, r0
 80051c6:	041b      	lsls	r3, r3, #16
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80051ce:	68fb      	ldr	r3, [r7, #12]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3710      	adds	r7, #16
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	331a      	adds	r3, #26
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	b292      	uxth	r2, r2
 80051ec:	4611      	mov	r1, r2
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fe ffd9 	bl	80041a6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	2b03      	cmp	r3, #3
 80051fa:	d109      	bne.n	8005210 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	f103 0214 	add.w	r2, r3, #20
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	0c1b      	lsrs	r3, r3, #16
 8005206:	b29b      	uxth	r3, r3
 8005208:	4619      	mov	r1, r3
 800520a:	4610      	mov	r0, r2
 800520c:	f7fe ffcb 	bl	80041a6 <st_word>
	}
}
 8005210:	bf00      	nop
 8005212:	3710      	adds	r7, #16
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005218:	b590      	push	{r4, r7, lr}
 800521a:	b087      	sub	sp, #28
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	331a      	adds	r3, #26
 8005226:	4618      	mov	r0, r3
 8005228:	f7fe ff82 	bl	8004130 <ld_word>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d001      	beq.n	8005236 <cmp_lfn+0x1e>
 8005232:	2300      	movs	r3, #0
 8005234:	e059      	b.n	80052ea <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800523e:	1e5a      	subs	r2, r3, #1
 8005240:	4613      	mov	r3, r2
 8005242:	005b      	lsls	r3, r3, #1
 8005244:	4413      	add	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800524c:	2301      	movs	r3, #1
 800524e:	81fb      	strh	r3, [r7, #14]
 8005250:	2300      	movs	r3, #0
 8005252:	613b      	str	r3, [r7, #16]
 8005254:	e033      	b.n	80052be <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005256:	4a27      	ldr	r2, [pc, #156]	@ (80052f4 <cmp_lfn+0xdc>)
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	4413      	add	r3, r2
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	461a      	mov	r2, r3
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	4413      	add	r3, r2
 8005264:	4618      	mov	r0, r3
 8005266:	f7fe ff63 	bl	8004130 <ld_word>
 800526a:	4603      	mov	r3, r0
 800526c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800526e:	89fb      	ldrh	r3, [r7, #14]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d01a      	beq.n	80052aa <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	2bfe      	cmp	r3, #254	@ 0xfe
 8005278:	d812      	bhi.n	80052a0 <cmp_lfn+0x88>
 800527a:	89bb      	ldrh	r3, [r7, #12]
 800527c:	4618      	mov	r0, r3
 800527e:	f001 fd3d 	bl	8006cfc <ff_wtoupper>
 8005282:	4603      	mov	r3, r0
 8005284:	461c      	mov	r4, r3
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	1c5a      	adds	r2, r3, #1
 800528a:	617a      	str	r2, [r7, #20]
 800528c:	005b      	lsls	r3, r3, #1
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	4413      	add	r3, r2
 8005292:	881b      	ldrh	r3, [r3, #0]
 8005294:	4618      	mov	r0, r3
 8005296:	f001 fd31 	bl	8006cfc <ff_wtoupper>
 800529a:	4603      	mov	r3, r0
 800529c:	429c      	cmp	r4, r3
 800529e:	d001      	beq.n	80052a4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80052a0:	2300      	movs	r3, #0
 80052a2:	e022      	b.n	80052ea <cmp_lfn+0xd2>
			}
			wc = uc;
 80052a4:	89bb      	ldrh	r3, [r7, #12]
 80052a6:	81fb      	strh	r3, [r7, #14]
 80052a8:	e006      	b.n	80052b8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80052aa:	89bb      	ldrh	r3, [r7, #12]
 80052ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d001      	beq.n	80052b8 <cmp_lfn+0xa0>
 80052b4:	2300      	movs	r3, #0
 80052b6:	e018      	b.n	80052ea <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	3301      	adds	r3, #1
 80052bc:	613b      	str	r3, [r7, #16]
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	2b0c      	cmp	r3, #12
 80052c2:	d9c8      	bls.n	8005256 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00b      	beq.n	80052e8 <cmp_lfn+0xd0>
 80052d0:	89fb      	ldrh	r3, [r7, #14]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d008      	beq.n	80052e8 <cmp_lfn+0xd0>
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	005b      	lsls	r3, r3, #1
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	4413      	add	r3, r2
 80052de:	881b      	ldrh	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d001      	beq.n	80052e8 <cmp_lfn+0xd0>
 80052e4:	2300      	movs	r3, #0
 80052e6:	e000      	b.n	80052ea <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80052e8:	2301      	movs	r3, #1
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	371c      	adds	r7, #28
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd90      	pop	{r4, r7, pc}
 80052f2:	bf00      	nop
 80052f4:	080079a8 	.word	0x080079a8

080052f8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b088      	sub	sp, #32
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	4611      	mov	r1, r2
 8005304:	461a      	mov	r2, r3
 8005306:	460b      	mov	r3, r1
 8005308:	71fb      	strb	r3, [r7, #7]
 800530a:	4613      	mov	r3, r2
 800530c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	330d      	adds	r3, #13
 8005312:	79ba      	ldrb	r2, [r7, #6]
 8005314:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	330b      	adds	r3, #11
 800531a:	220f      	movs	r2, #15
 800531c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	330c      	adds	r3, #12
 8005322:	2200      	movs	r2, #0
 8005324:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	331a      	adds	r3, #26
 800532a:	2100      	movs	r1, #0
 800532c:	4618      	mov	r0, r3
 800532e:	f7fe ff3a 	bl	80041a6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005332:	79fb      	ldrb	r3, [r7, #7]
 8005334:	1e5a      	subs	r2, r3, #1
 8005336:	4613      	mov	r3, r2
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	4413      	add	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005342:	2300      	movs	r3, #0
 8005344:	82fb      	strh	r3, [r7, #22]
 8005346:	2300      	movs	r3, #0
 8005348:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800534a:	8afb      	ldrh	r3, [r7, #22]
 800534c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005350:	4293      	cmp	r3, r2
 8005352:	d007      	beq.n	8005364 <put_lfn+0x6c>
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	1c5a      	adds	r2, r3, #1
 8005358:	61fa      	str	r2, [r7, #28]
 800535a:	005b      	lsls	r3, r3, #1
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	4413      	add	r3, r2
 8005360:	881b      	ldrh	r3, [r3, #0]
 8005362:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005364:	4a17      	ldr	r2, [pc, #92]	@ (80053c4 <put_lfn+0xcc>)
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	4413      	add	r3, r2
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	461a      	mov	r2, r3
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	4413      	add	r3, r2
 8005372:	8afa      	ldrh	r2, [r7, #22]
 8005374:	4611      	mov	r1, r2
 8005376:	4618      	mov	r0, r3
 8005378:	f7fe ff15 	bl	80041a6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800537c:	8afb      	ldrh	r3, [r7, #22]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d102      	bne.n	8005388 <put_lfn+0x90>
 8005382:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005386:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	3301      	adds	r3, #1
 800538c:	61bb      	str	r3, [r7, #24]
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	2b0c      	cmp	r3, #12
 8005392:	d9da      	bls.n	800534a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005394:	8afb      	ldrh	r3, [r7, #22]
 8005396:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800539a:	4293      	cmp	r3, r2
 800539c:	d006      	beq.n	80053ac <put_lfn+0xb4>
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	4413      	add	r3, r2
 80053a6:	881b      	ldrh	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d103      	bne.n	80053b4 <put_lfn+0xbc>
 80053ac:	79fb      	ldrb	r3, [r7, #7]
 80053ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053b2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	79fa      	ldrb	r2, [r7, #7]
 80053b8:	701a      	strb	r2, [r3, #0]
}
 80053ba:	bf00      	nop
 80053bc:	3720      	adds	r7, #32
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	080079a8 	.word	0x080079a8

080053c8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b08c      	sub	sp, #48	@ 0x30
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
 80053d4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80053d6:	220b      	movs	r2, #11
 80053d8:	68b9      	ldr	r1, [r7, #8]
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f7fe ff2a 	bl	8004234 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	2b05      	cmp	r3, #5
 80053e4:	d92b      	bls.n	800543e <gen_numname+0x76>
		sr = seq;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80053ea:	e022      	b.n	8005432 <gen_numname+0x6a>
			wc = *lfn++;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	1c9a      	adds	r2, r3, #2
 80053f0:	607a      	str	r2, [r7, #4]
 80053f2:	881b      	ldrh	r3, [r3, #0]
 80053f4:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 80053f6:	2300      	movs	r3, #0
 80053f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053fa:	e017      	b.n	800542c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	005a      	lsls	r2, r3, #1
 8005400:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	4413      	add	r3, r2
 8005408:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800540a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800540c:	085b      	lsrs	r3, r3, #1
 800540e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d005      	beq.n	8005426 <gen_numname+0x5e>
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8005420:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8005424:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005428:	3301      	adds	r3, #1
 800542a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800542c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800542e:	2b0f      	cmp	r3, #15
 8005430:	d9e4      	bls.n	80053fc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	881b      	ldrh	r3, [r3, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1d8      	bne.n	80053ec <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800543e:	2307      	movs	r3, #7
 8005440:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	b2db      	uxtb	r3, r3
 8005446:	f003 030f 	and.w	r3, r3, #15
 800544a:	b2db      	uxtb	r3, r3
 800544c:	3330      	adds	r3, #48	@ 0x30
 800544e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8005452:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005456:	2b39      	cmp	r3, #57	@ 0x39
 8005458:	d904      	bls.n	8005464 <gen_numname+0x9c>
 800545a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800545e:	3307      	adds	r3, #7
 8005460:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8005464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005466:	1e5a      	subs	r2, r3, #1
 8005468:	62ba      	str	r2, [r7, #40]	@ 0x28
 800546a:	3330      	adds	r3, #48	@ 0x30
 800546c:	443b      	add	r3, r7
 800546e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005472:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	091b      	lsrs	r3, r3, #4
 800547a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1df      	bne.n	8005442 <gen_numname+0x7a>
	ns[i] = '~';
 8005482:	f107 0214 	add.w	r2, r7, #20
 8005486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005488:	4413      	add	r3, r2
 800548a:	227e      	movs	r2, #126	@ 0x7e
 800548c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800548e:	2300      	movs	r3, #0
 8005490:	627b      	str	r3, [r7, #36]	@ 0x24
 8005492:	e002      	b.n	800549a <gen_numname+0xd2>
 8005494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005496:	3301      	adds	r3, #1
 8005498:	627b      	str	r3, [r7, #36]	@ 0x24
 800549a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800549c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800549e:	429a      	cmp	r2, r3
 80054a0:	d205      	bcs.n	80054ae <gen_numname+0xe6>
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a6:	4413      	add	r3, r2
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	2b20      	cmp	r3, #32
 80054ac:	d1f2      	bne.n	8005494 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80054ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b0:	2b07      	cmp	r3, #7
 80054b2:	d807      	bhi.n	80054c4 <gen_numname+0xfc>
 80054b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b6:	1c5a      	adds	r2, r3, #1
 80054b8:	62ba      	str	r2, [r7, #40]	@ 0x28
 80054ba:	3330      	adds	r3, #48	@ 0x30
 80054bc:	443b      	add	r3, r7
 80054be:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80054c2:	e000      	b.n	80054c6 <gen_numname+0xfe>
 80054c4:	2120      	movs	r1, #32
 80054c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c8:	1c5a      	adds	r2, r3, #1
 80054ca:	627a      	str	r2, [r7, #36]	@ 0x24
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	4413      	add	r3, r2
 80054d0:	460a      	mov	r2, r1
 80054d2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80054d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d6:	2b07      	cmp	r3, #7
 80054d8:	d9e9      	bls.n	80054ae <gen_numname+0xe6>
}
 80054da:	bf00      	nop
 80054dc:	bf00      	nop
 80054de:	3730      	adds	r7, #48	@ 0x30
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80054ec:	2300      	movs	r3, #0
 80054ee:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80054f0:	230b      	movs	r3, #11
 80054f2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80054f4:	7bfb      	ldrb	r3, [r7, #15]
 80054f6:	b2da      	uxtb	r2, r3
 80054f8:	0852      	lsrs	r2, r2, #1
 80054fa:	01db      	lsls	r3, r3, #7
 80054fc:	4313      	orrs	r3, r2
 80054fe:	b2da      	uxtb	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	1c59      	adds	r1, r3, #1
 8005504:	6079      	str	r1, [r7, #4]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	4413      	add	r3, r2
 800550a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	3b01      	subs	r3, #1
 8005510:	60bb      	str	r3, [r7, #8]
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1ed      	bne.n	80054f4 <sum_sfn+0x10>
	return sum;
 8005518:	7bfb      	ldrb	r3, [r7, #15]
}
 800551a:	4618      	mov	r0, r3
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b086      	sub	sp, #24
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005534:	2100      	movs	r1, #0
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f7ff fc89 	bl	8004e4e <dir_sdi>
 800553c:	4603      	mov	r3, r0
 800553e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005540:	7dfb      	ldrb	r3, [r7, #23]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <dir_find+0x24>
 8005546:	7dfb      	ldrb	r3, [r7, #23]
 8005548:	e0a9      	b.n	800569e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800554a:	23ff      	movs	r3, #255	@ 0xff
 800554c:	753b      	strb	r3, [r7, #20]
 800554e:	7d3b      	ldrb	r3, [r7, #20]
 8005550:	757b      	strb	r3, [r7, #21]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f04f 32ff 	mov.w	r2, #4294967295
 8005558:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	4619      	mov	r1, r3
 8005560:	6938      	ldr	r0, [r7, #16]
 8005562:	f7ff f895 	bl	8004690 <move_window>
 8005566:	4603      	mov	r3, r0
 8005568:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800556a:	7dfb      	ldrb	r3, [r7, #23]
 800556c:	2b00      	cmp	r3, #0
 800556e:	f040 8090 	bne.w	8005692 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800557a:	7dbb      	ldrb	r3, [r7, #22]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d102      	bne.n	8005586 <dir_find+0x60>
 8005580:	2304      	movs	r3, #4
 8005582:	75fb      	strb	r3, [r7, #23]
 8005584:	e08a      	b.n	800569c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	330b      	adds	r3, #11
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005592:	73fb      	strb	r3, [r7, #15]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	7bfa      	ldrb	r2, [r7, #15]
 8005598:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800559a:	7dbb      	ldrb	r3, [r7, #22]
 800559c:	2be5      	cmp	r3, #229	@ 0xe5
 800559e:	d007      	beq.n	80055b0 <dir_find+0x8a>
 80055a0:	7bfb      	ldrb	r3, [r7, #15]
 80055a2:	f003 0308 	and.w	r3, r3, #8
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d009      	beq.n	80055be <dir_find+0x98>
 80055aa:	7bfb      	ldrb	r3, [r7, #15]
 80055ac:	2b0f      	cmp	r3, #15
 80055ae:	d006      	beq.n	80055be <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80055b0:	23ff      	movs	r3, #255	@ 0xff
 80055b2:	757b      	strb	r3, [r7, #21]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f04f 32ff 	mov.w	r2, #4294967295
 80055ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80055bc:	e05e      	b.n	800567c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80055be:	7bfb      	ldrb	r3, [r7, #15]
 80055c0:	2b0f      	cmp	r3, #15
 80055c2:	d136      	bne.n	8005632 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80055ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d154      	bne.n	800567c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80055d2:	7dbb      	ldrb	r3, [r7, #22]
 80055d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00d      	beq.n	80055f8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a1b      	ldr	r3, [r3, #32]
 80055e0:	7b5b      	ldrb	r3, [r3, #13]
 80055e2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80055e4:	7dbb      	ldrb	r3, [r7, #22]
 80055e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055ea:	75bb      	strb	r3, [r7, #22]
 80055ec:	7dbb      	ldrb	r3, [r7, #22]
 80055ee:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	695a      	ldr	r2, [r3, #20]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80055f8:	7dba      	ldrb	r2, [r7, #22]
 80055fa:	7d7b      	ldrb	r3, [r7, #21]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d115      	bne.n	800562c <dir_find+0x106>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	330d      	adds	r3, #13
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	7d3a      	ldrb	r2, [r7, #20]
 800560a:	429a      	cmp	r2, r3
 800560c:	d10e      	bne.n	800562c <dir_find+0x106>
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	691a      	ldr	r2, [r3, #16]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	4619      	mov	r1, r3
 8005618:	4610      	mov	r0, r2
 800561a:	f7ff fdfd 	bl	8005218 <cmp_lfn>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d003      	beq.n	800562c <dir_find+0x106>
 8005624:	7d7b      	ldrb	r3, [r7, #21]
 8005626:	3b01      	subs	r3, #1
 8005628:	b2db      	uxtb	r3, r3
 800562a:	e000      	b.n	800562e <dir_find+0x108>
 800562c:	23ff      	movs	r3, #255	@ 0xff
 800562e:	757b      	strb	r3, [r7, #21]
 8005630:	e024      	b.n	800567c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005632:	7d7b      	ldrb	r3, [r7, #21]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d109      	bne.n	800564c <dir_find+0x126>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	4618      	mov	r0, r3
 800563e:	f7ff ff51 	bl	80054e4 <sum_sfn>
 8005642:	4603      	mov	r3, r0
 8005644:	461a      	mov	r2, r3
 8005646:	7d3b      	ldrb	r3, [r7, #20]
 8005648:	4293      	cmp	r3, r2
 800564a:	d024      	beq.n	8005696 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10a      	bne.n	8005670 <dir_find+0x14a>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a18      	ldr	r0, [r3, #32]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	3324      	adds	r3, #36	@ 0x24
 8005662:	220b      	movs	r2, #11
 8005664:	4619      	mov	r1, r3
 8005666:	f7fe fe21 	bl	80042ac <mem_cmp>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d014      	beq.n	800569a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005670:	23ff      	movs	r3, #255	@ 0xff
 8005672:	757b      	strb	r3, [r7, #21]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f04f 32ff 	mov.w	r2, #4294967295
 800567a:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800567c:	2100      	movs	r1, #0
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7ff fc6e 	bl	8004f60 <dir_next>
 8005684:	4603      	mov	r3, r0
 8005686:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005688:	7dfb      	ldrb	r3, [r7, #23]
 800568a:	2b00      	cmp	r3, #0
 800568c:	f43f af65 	beq.w	800555a <dir_find+0x34>
 8005690:	e004      	b.n	800569c <dir_find+0x176>
		if (res != FR_OK) break;
 8005692:	bf00      	nop
 8005694:	e002      	b.n	800569c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005696:	bf00      	nop
 8005698:	e000      	b.n	800569c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800569a:	bf00      	nop

	return res;
 800569c:	7dfb      	ldrb	r3, [r7, #23]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3718      	adds	r7, #24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
	...

080056a8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b08c      	sub	sp, #48	@ 0x30
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80056bc:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d001      	beq.n	80056c8 <dir_register+0x20>
 80056c4:	2306      	movs	r3, #6
 80056c6:	e0e0      	b.n	800588a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80056c8:	2300      	movs	r3, #0
 80056ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80056cc:	e002      	b.n	80056d4 <dir_register+0x2c>
 80056ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d0:	3301      	adds	r3, #1
 80056d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	691a      	ldr	r2, [r3, #16]
 80056d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056da:	005b      	lsls	r3, r3, #1
 80056dc:	4413      	add	r3, r2
 80056de:	881b      	ldrh	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1f4      	bne.n	80056ce <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80056ea:	f107 030c 	add.w	r3, r7, #12
 80056ee:	220c      	movs	r2, #12
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7fe fd9f 	bl	8004234 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80056f6:	7dfb      	ldrb	r3, [r7, #23]
 80056f8:	f003 0301 	and.w	r3, r3, #1
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d032      	beq.n	8005766 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2240      	movs	r2, #64	@ 0x40
 8005704:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8005708:	2301      	movs	r3, #1
 800570a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800570c:	e016      	b.n	800573c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	691a      	ldr	r2, [r3, #16]
 8005718:	f107 010c 	add.w	r1, r7, #12
 800571c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800571e:	f7ff fe53 	bl	80053c8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7ff feff 	bl	8005526 <dir_find>
 8005728:	4603      	mov	r3, r0
 800572a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800572e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005732:	2b00      	cmp	r3, #0
 8005734:	d106      	bne.n	8005744 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8005736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005738:	3301      	adds	r3, #1
 800573a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800573c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800573e:	2b63      	cmp	r3, #99	@ 0x63
 8005740:	d9e5      	bls.n	800570e <dir_register+0x66>
 8005742:	e000      	b.n	8005746 <dir_register+0x9e>
			if (res != FR_OK) break;
 8005744:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005748:	2b64      	cmp	r3, #100	@ 0x64
 800574a:	d101      	bne.n	8005750 <dir_register+0xa8>
 800574c:	2307      	movs	r3, #7
 800574e:	e09c      	b.n	800588a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005750:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005754:	2b04      	cmp	r3, #4
 8005756:	d002      	beq.n	800575e <dir_register+0xb6>
 8005758:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800575c:	e095      	b.n	800588a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800575e:	7dfa      	ldrb	r2, [r7, #23]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8005766:	7dfb      	ldrb	r3, [r7, #23]
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d007      	beq.n	8005780 <dir_register+0xd8>
 8005770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005772:	330c      	adds	r3, #12
 8005774:	4a47      	ldr	r2, [pc, #284]	@ (8005894 <dir_register+0x1ec>)
 8005776:	fba2 2303 	umull	r2, r3, r2, r3
 800577a:	089b      	lsrs	r3, r3, #2
 800577c:	3301      	adds	r3, #1
 800577e:	e000      	b.n	8005782 <dir_register+0xda>
 8005780:	2301      	movs	r3, #1
 8005782:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005784:	6a39      	ldr	r1, [r7, #32]
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7ff fcc0 	bl	800510c <dir_alloc>
 800578c:	4603      	mov	r3, r0
 800578e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005792:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005796:	2b00      	cmp	r3, #0
 8005798:	d148      	bne.n	800582c <dir_register+0x184>
 800579a:	6a3b      	ldr	r3, [r7, #32]
 800579c:	3b01      	subs	r3, #1
 800579e:	623b      	str	r3, [r7, #32]
 80057a0:	6a3b      	ldr	r3, [r7, #32]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d042      	beq.n	800582c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	695a      	ldr	r2, [r3, #20]
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	015b      	lsls	r3, r3, #5
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	4619      	mov	r1, r3
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f7ff fb4b 	bl	8004e4e <dir_sdi>
 80057b8:	4603      	mov	r3, r0
 80057ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80057be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d132      	bne.n	800582c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	3324      	adds	r3, #36	@ 0x24
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7ff fe8a 	bl	80054e4 <sum_sfn>
 80057d0:	4603      	mov	r3, r0
 80057d2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	69db      	ldr	r3, [r3, #28]
 80057d8:	4619      	mov	r1, r3
 80057da:	69f8      	ldr	r0, [r7, #28]
 80057dc:	f7fe ff58 	bl	8004690 <move_window>
 80057e0:	4603      	mov	r3, r0
 80057e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80057e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d11d      	bne.n	800582a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	6918      	ldr	r0, [r3, #16]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a19      	ldr	r1, [r3, #32]
 80057f6:	6a3b      	ldr	r3, [r7, #32]
 80057f8:	b2da      	uxtb	r2, r3
 80057fa:	7efb      	ldrb	r3, [r7, #27]
 80057fc:	f7ff fd7c 	bl	80052f8 <put_lfn>
				fs->wflag = 1;
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	2201      	movs	r2, #1
 8005804:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8005806:	2100      	movs	r1, #0
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7ff fba9 	bl	8004f60 <dir_next>
 800580e:	4603      	mov	r3, r0
 8005810:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8005814:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005818:	2b00      	cmp	r3, #0
 800581a:	d107      	bne.n	800582c <dir_register+0x184>
 800581c:	6a3b      	ldr	r3, [r7, #32]
 800581e:	3b01      	subs	r3, #1
 8005820:	623b      	str	r3, [r7, #32]
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1d5      	bne.n	80057d4 <dir_register+0x12c>
 8005828:	e000      	b.n	800582c <dir_register+0x184>
				if (res != FR_OK) break;
 800582a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800582c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005830:	2b00      	cmp	r3, #0
 8005832:	d128      	bne.n	8005886 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	69db      	ldr	r3, [r3, #28]
 8005838:	4619      	mov	r1, r3
 800583a:	69f8      	ldr	r0, [r7, #28]
 800583c:	f7fe ff28 	bl	8004690 <move_window>
 8005840:	4603      	mov	r3, r0
 8005842:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8005846:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800584a:	2b00      	cmp	r3, #0
 800584c:	d11b      	bne.n	8005886 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	2220      	movs	r2, #32
 8005854:	2100      	movs	r1, #0
 8005856:	4618      	mov	r0, r3
 8005858:	f7fe fd0d 	bl	8004276 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a18      	ldr	r0, [r3, #32]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	3324      	adds	r3, #36	@ 0x24
 8005864:	220b      	movs	r2, #11
 8005866:	4619      	mov	r1, r3
 8005868:	f7fe fce4 	bl	8004234 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	330c      	adds	r3, #12
 8005878:	f002 0218 	and.w	r2, r2, #24
 800587c:	b2d2      	uxtb	r2, r2
 800587e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	2201      	movs	r2, #1
 8005884:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005886:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800588a:	4618      	mov	r0, r3
 800588c:	3730      	adds	r7, #48	@ 0x30
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	4ec4ec4f 	.word	0x4ec4ec4f

08005898 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b08a      	sub	sp, #40	@ 0x28
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	613b      	str	r3, [r7, #16]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	60fb      	str	r3, [r7, #12]
 80058b0:	2300      	movs	r3, #0
 80058b2:	617b      	str	r3, [r7, #20]
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	61ba      	str	r2, [r7, #24]
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	4413      	add	r3, r2
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80058c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80058c8:	2b1f      	cmp	r3, #31
 80058ca:	d940      	bls.n	800594e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80058cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80058ce:	2b2f      	cmp	r3, #47	@ 0x2f
 80058d0:	d006      	beq.n	80058e0 <create_name+0x48>
 80058d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80058d4:	2b5c      	cmp	r3, #92	@ 0x5c
 80058d6:	d110      	bne.n	80058fa <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80058d8:	e002      	b.n	80058e0 <create_name+0x48>
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	3301      	adds	r3, #1
 80058de:	61bb      	str	r3, [r7, #24]
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	4413      	add	r3, r2
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	2b2f      	cmp	r3, #47	@ 0x2f
 80058ea:	d0f6      	beq.n	80058da <create_name+0x42>
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	4413      	add	r3, r2
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	2b5c      	cmp	r3, #92	@ 0x5c
 80058f6:	d0f0      	beq.n	80058da <create_name+0x42>
			break;
 80058f8:	e02a      	b.n	8005950 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	2bfe      	cmp	r3, #254	@ 0xfe
 80058fe:	d901      	bls.n	8005904 <create_name+0x6c>
 8005900:	2306      	movs	r3, #6
 8005902:	e17d      	b.n	8005c00 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8005904:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005906:	b2db      	uxtb	r3, r3
 8005908:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800590a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800590c:	2101      	movs	r1, #1
 800590e:	4618      	mov	r0, r3
 8005910:	f001 f9b8 	bl	8006c84 <ff_convert>
 8005914:	4603      	mov	r3, r0
 8005916:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005918:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <create_name+0x8a>
 800591e:	2306      	movs	r3, #6
 8005920:	e16e      	b.n	8005c00 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8005922:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005924:	2b7f      	cmp	r3, #127	@ 0x7f
 8005926:	d809      	bhi.n	800593c <create_name+0xa4>
 8005928:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800592a:	4619      	mov	r1, r3
 800592c:	488d      	ldr	r0, [pc, #564]	@ (8005b64 <create_name+0x2cc>)
 800592e:	f7fe fce4 	bl	80042fa <chk_chr>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d001      	beq.n	800593c <create_name+0xa4>
 8005938:	2306      	movs	r3, #6
 800593a:	e161      	b.n	8005c00 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	1c5a      	adds	r2, r3, #1
 8005940:	617a      	str	r2, [r7, #20]
 8005942:	005b      	lsls	r3, r3, #1
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	4413      	add	r3, r2
 8005948:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800594a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800594c:	e7b4      	b.n	80058b8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800594e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	441a      	add	r2, r3
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800595a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800595c:	2b1f      	cmp	r3, #31
 800595e:	d801      	bhi.n	8005964 <create_name+0xcc>
 8005960:	2304      	movs	r3, #4
 8005962:	e000      	b.n	8005966 <create_name+0xce>
 8005964:	2300      	movs	r3, #0
 8005966:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800596a:	e011      	b.n	8005990 <create_name+0xf8>
		w = lfn[di - 1];
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005972:	3b01      	subs	r3, #1
 8005974:	005b      	lsls	r3, r3, #1
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	4413      	add	r3, r2
 800597a:	881b      	ldrh	r3, [r3, #0]
 800597c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800597e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005980:	2b20      	cmp	r3, #32
 8005982:	d002      	beq.n	800598a <create_name+0xf2>
 8005984:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005986:	2b2e      	cmp	r3, #46	@ 0x2e
 8005988:	d106      	bne.n	8005998 <create_name+0x100>
		di--;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	3b01      	subs	r3, #1
 800598e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1ea      	bne.n	800596c <create_name+0xd4>
 8005996:	e000      	b.n	800599a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8005998:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	005b      	lsls	r3, r3, #1
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	4413      	add	r3, r2
 80059a2:	2200      	movs	r2, #0
 80059a4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <create_name+0x118>
 80059ac:	2306      	movs	r3, #6
 80059ae:	e127      	b.n	8005c00 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	3324      	adds	r3, #36	@ 0x24
 80059b4:	220b      	movs	r2, #11
 80059b6:	2120      	movs	r1, #32
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7fe fc5c 	bl	8004276 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80059be:	2300      	movs	r3, #0
 80059c0:	61bb      	str	r3, [r7, #24]
 80059c2:	e002      	b.n	80059ca <create_name+0x132>
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	3301      	adds	r3, #1
 80059c8:	61bb      	str	r3, [r7, #24]
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	005b      	lsls	r3, r3, #1
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	4413      	add	r3, r2
 80059d2:	881b      	ldrh	r3, [r3, #0]
 80059d4:	2b20      	cmp	r3, #32
 80059d6:	d0f5      	beq.n	80059c4 <create_name+0x12c>
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	005b      	lsls	r3, r3, #1
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	4413      	add	r3, r2
 80059e0:	881b      	ldrh	r3, [r3, #0]
 80059e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80059e4:	d0ee      	beq.n	80059c4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d009      	beq.n	8005a00 <create_name+0x168>
 80059ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80059f0:	f043 0303 	orr.w	r3, r3, #3
 80059f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80059f8:	e002      	b.n	8005a00 <create_name+0x168>
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	3b01      	subs	r3, #1
 80059fe:	617b      	str	r3, [r7, #20]
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d009      	beq.n	8005a1a <create_name+0x182>
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	4413      	add	r3, r2
 8005a14:	881b      	ldrh	r3, [r3, #0]
 8005a16:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a18:	d1ef      	bne.n	80059fa <create_name+0x162>

	i = b = 0; ni = 8;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005a20:	2300      	movs	r3, #0
 8005a22:	623b      	str	r3, [r7, #32]
 8005a24:	2308      	movs	r3, #8
 8005a26:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	1c5a      	adds	r2, r3, #1
 8005a2c:	61ba      	str	r2, [r7, #24]
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	4413      	add	r3, r2
 8005a34:	881b      	ldrh	r3, [r3, #0]
 8005a36:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005a38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f000 8090 	beq.w	8005b60 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005a40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005a42:	2b20      	cmp	r3, #32
 8005a44:	d006      	beq.n	8005a54 <create_name+0x1bc>
 8005a46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005a48:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a4a:	d10a      	bne.n	8005a62 <create_name+0x1ca>
 8005a4c:	69ba      	ldr	r2, [r7, #24]
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d006      	beq.n	8005a62 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8005a54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a58:	f043 0303 	orr.w	r3, r3, #3
 8005a5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005a60:	e07d      	b.n	8005b5e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005a62:	6a3a      	ldr	r2, [r7, #32]
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d203      	bcs.n	8005a72 <create_name+0x1da>
 8005a6a:	69ba      	ldr	r2, [r7, #24]
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d123      	bne.n	8005aba <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	2b0b      	cmp	r3, #11
 8005a76:	d106      	bne.n	8005a86 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8005a78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a7c:	f043 0303 	orr.w	r3, r3, #3
 8005a80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005a84:	e075      	b.n	8005b72 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005a86:	69ba      	ldr	r2, [r7, #24]
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d005      	beq.n	8005a9a <create_name+0x202>
 8005a8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a92:	f043 0303 	orr.w	r3, r3, #3
 8005a96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d866      	bhi.n	8005b70 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	61bb      	str	r3, [r7, #24]
 8005aa6:	2308      	movs	r3, #8
 8005aa8:	623b      	str	r3, [r7, #32]
 8005aaa:	230b      	movs	r3, #11
 8005aac:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005aae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005ab8:	e051      	b.n	8005b5e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005aba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005abc:	2b7f      	cmp	r3, #127	@ 0x7f
 8005abe:	d914      	bls.n	8005aea <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005ac0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f001 f8dd 	bl	8006c84 <ff_convert>
 8005aca:	4603      	mov	r3, r0
 8005acc:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005ace:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d004      	beq.n	8005ade <create_name+0x246>
 8005ad4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ad6:	3b80      	subs	r3, #128	@ 0x80
 8005ad8:	4a23      	ldr	r2, [pc, #140]	@ (8005b68 <create_name+0x2d0>)
 8005ada:	5cd3      	ldrb	r3, [r2, r3]
 8005adc:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005ade:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ae2:	f043 0302 	orr.w	r3, r3, #2
 8005ae6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005aea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d007      	beq.n	8005b00 <create_name+0x268>
 8005af0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005af2:	4619      	mov	r1, r3
 8005af4:	481d      	ldr	r0, [pc, #116]	@ (8005b6c <create_name+0x2d4>)
 8005af6:	f7fe fc00 	bl	80042fa <chk_chr>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d008      	beq.n	8005b12 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005b00:	235f      	movs	r3, #95	@ 0x5f
 8005b02:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005b04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b08:	f043 0303 	orr.w	r3, r3, #3
 8005b0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005b10:	e01b      	b.n	8005b4a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005b12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005b14:	2b40      	cmp	r3, #64	@ 0x40
 8005b16:	d909      	bls.n	8005b2c <create_name+0x294>
 8005b18:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005b1a:	2b5a      	cmp	r3, #90	@ 0x5a
 8005b1c:	d806      	bhi.n	8005b2c <create_name+0x294>
					b |= 2;
 8005b1e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005b22:	f043 0302 	orr.w	r3, r3, #2
 8005b26:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005b2a:	e00e      	b.n	8005b4a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005b2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005b2e:	2b60      	cmp	r3, #96	@ 0x60
 8005b30:	d90b      	bls.n	8005b4a <create_name+0x2b2>
 8005b32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005b34:	2b7a      	cmp	r3, #122	@ 0x7a
 8005b36:	d808      	bhi.n	8005b4a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8005b38:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005b3c:	f043 0301 	orr.w	r3, r3, #1
 8005b40:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005b44:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005b46:	3b20      	subs	r3, #32
 8005b48:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005b4a:	6a3b      	ldr	r3, [r7, #32]
 8005b4c:	1c5a      	adds	r2, r3, #1
 8005b4e:	623a      	str	r2, [r7, #32]
 8005b50:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005b52:	b2d1      	uxtb	r1, r2
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	4413      	add	r3, r2
 8005b58:	460a      	mov	r2, r1
 8005b5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8005b5e:	e763      	b.n	8005a28 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8005b60:	bf00      	nop
 8005b62:	e006      	b.n	8005b72 <create_name+0x2da>
 8005b64:	080078c8 	.word	0x080078c8
 8005b68:	08007928 	.word	0x08007928
 8005b6c:	080078d4 	.word	0x080078d4
			if (si > di) break;			/* No extension */
 8005b70:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005b78:	2be5      	cmp	r3, #229	@ 0xe5
 8005b7a:	d103      	bne.n	8005b84 <create_name+0x2ec>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2205      	movs	r2, #5
 8005b80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	2b08      	cmp	r3, #8
 8005b88:	d104      	bne.n	8005b94 <create_name+0x2fc>
 8005b8a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8005b94:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005b98:	f003 030c 	and.w	r3, r3, #12
 8005b9c:	2b0c      	cmp	r3, #12
 8005b9e:	d005      	beq.n	8005bac <create_name+0x314>
 8005ba0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005ba4:	f003 0303 	and.w	r3, r3, #3
 8005ba8:	2b03      	cmp	r3, #3
 8005baa:	d105      	bne.n	8005bb8 <create_name+0x320>
 8005bac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005bb0:	f043 0302 	orr.w	r3, r3, #2
 8005bb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005bbc:	f003 0302 	and.w	r3, r3, #2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d117      	bne.n	8005bf4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005bc4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005bc8:	f003 0303 	and.w	r3, r3, #3
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d105      	bne.n	8005bdc <create_name+0x344>
 8005bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005bd4:	f043 0310 	orr.w	r3, r3, #16
 8005bd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005bdc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005be0:	f003 030c 	and.w	r3, r3, #12
 8005be4:	2b04      	cmp	r3, #4
 8005be6:	d105      	bne.n	8005bf4 <create_name+0x35c>
 8005be8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005bec:	f043 0308 	orr.w	r3, r3, #8
 8005bf0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005bfa:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8005bfe:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3728      	adds	r7, #40	@ 0x28
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005c1c:	e002      	b.n	8005c24 <follow_path+0x1c>
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	3301      	adds	r3, #1
 8005c22:	603b      	str	r3, [r7, #0]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	2b2f      	cmp	r3, #47	@ 0x2f
 8005c2a:	d0f8      	beq.n	8005c1e <follow_path+0x16>
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	2b5c      	cmp	r3, #92	@ 0x5c
 8005c32:	d0f4      	beq.n	8005c1e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	2200      	movs	r2, #0
 8005c38:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	2b1f      	cmp	r3, #31
 8005c40:	d80a      	bhi.n	8005c58 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2280      	movs	r2, #128	@ 0x80
 8005c46:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f7ff f8fe 	bl	8004e4e <dir_sdi>
 8005c52:	4603      	mov	r3, r0
 8005c54:	75fb      	strb	r3, [r7, #23]
 8005c56:	e048      	b.n	8005cea <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005c58:	463b      	mov	r3, r7
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7ff fe1b 	bl	8005898 <create_name>
 8005c62:	4603      	mov	r3, r0
 8005c64:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005c66:	7dfb      	ldrb	r3, [r7, #23]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d139      	bne.n	8005ce0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f7ff fc5a 	bl	8005526 <dir_find>
 8005c72:	4603      	mov	r3, r0
 8005c74:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005c7c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005c7e:	7dfb      	ldrb	r3, [r7, #23]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00a      	beq.n	8005c9a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005c84:	7dfb      	ldrb	r3, [r7, #23]
 8005c86:	2b04      	cmp	r3, #4
 8005c88:	d12c      	bne.n	8005ce4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005c8a:	7afb      	ldrb	r3, [r7, #11]
 8005c8c:	f003 0304 	and.w	r3, r3, #4
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d127      	bne.n	8005ce4 <follow_path+0xdc>
 8005c94:	2305      	movs	r3, #5
 8005c96:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005c98:	e024      	b.n	8005ce4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005c9a:	7afb      	ldrb	r3, [r7, #11]
 8005c9c:	f003 0304 	and.w	r3, r3, #4
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d121      	bne.n	8005ce8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	799b      	ldrb	r3, [r3, #6]
 8005ca8:	f003 0310 	and.w	r3, r3, #16
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d102      	bne.n	8005cb6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005cb0:	2305      	movs	r3, #5
 8005cb2:	75fb      	strb	r3, [r7, #23]
 8005cb4:	e019      	b.n	8005cea <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	8992      	ldrh	r2, [r2, #12]
 8005cc4:	fbb3 f0f2 	udiv	r0, r3, r2
 8005cc8:	fb00 f202 	mul.w	r2, r0, r2
 8005ccc:	1a9b      	subs	r3, r3, r2
 8005cce:	440b      	add	r3, r1
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f7ff fa61 	bl	800519a <ld_clust>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005cde:	e7bb      	b.n	8005c58 <follow_path+0x50>
			if (res != FR_OK) break;
 8005ce0:	bf00      	nop
 8005ce2:	e002      	b.n	8005cea <follow_path+0xe2>
				break;
 8005ce4:	bf00      	nop
 8005ce6:	e000      	b.n	8005cea <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005ce8:	bf00      	nop
			}
		}
	}

	return res;
 8005cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3718      	adds	r7, #24
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b087      	sub	sp, #28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8005d00:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d031      	beq.n	8005d6e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	617b      	str	r3, [r7, #20]
 8005d10:	e002      	b.n	8005d18 <get_ldnumber+0x24>
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	3301      	adds	r3, #1
 8005d16:	617b      	str	r3, [r7, #20]
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	2b1f      	cmp	r3, #31
 8005d1e:	d903      	bls.n	8005d28 <get_ldnumber+0x34>
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	2b3a      	cmp	r3, #58	@ 0x3a
 8005d26:	d1f4      	bne.n	8005d12 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	2b3a      	cmp	r3, #58	@ 0x3a
 8005d2e:	d11c      	bne.n	8005d6a <get_ldnumber+0x76>
			tp = *path;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	1c5a      	adds	r2, r3, #1
 8005d3a:	60fa      	str	r2, [r7, #12]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	3b30      	subs	r3, #48	@ 0x30
 8005d40:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	2b09      	cmp	r3, #9
 8005d46:	d80e      	bhi.n	8005d66 <get_ldnumber+0x72>
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d10a      	bne.n	8005d66 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d107      	bne.n	8005d66 <get_ldnumber+0x72>
					vol = (int)i;
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	617b      	str	r3, [r7, #20]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	e002      	b.n	8005d70 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005d6e:	693b      	ldr	r3, [r7, #16]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	371c      	adds	r7, #28
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	70da      	strb	r2, [r3, #3]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d92:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005d94:	6839      	ldr	r1, [r7, #0]
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f7fe fc7a 	bl	8004690 <move_window>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d001      	beq.n	8005da6 <check_fs+0x2a>
 8005da2:	2304      	movs	r3, #4
 8005da4:	e038      	b.n	8005e18 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	3338      	adds	r3, #56	@ 0x38
 8005daa:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7fe f9be 	bl	8004130 <ld_word>
 8005db4:	4603      	mov	r3, r0
 8005db6:	461a      	mov	r2, r3
 8005db8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d001      	beq.n	8005dc4 <check_fs+0x48>
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e029      	b.n	8005e18 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005dca:	2be9      	cmp	r3, #233	@ 0xe9
 8005dcc:	d009      	beq.n	8005de2 <check_fs+0x66>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005dd4:	2beb      	cmp	r3, #235	@ 0xeb
 8005dd6:	d11e      	bne.n	8005e16 <check_fs+0x9a>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005dde:	2b90      	cmp	r3, #144	@ 0x90
 8005de0:	d119      	bne.n	8005e16 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	3338      	adds	r3, #56	@ 0x38
 8005de6:	3336      	adds	r3, #54	@ 0x36
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7fe f9b9 	bl	8004160 <ld_dword>
 8005dee:	4603      	mov	r3, r0
 8005df0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005df4:	4a0a      	ldr	r2, [pc, #40]	@ (8005e20 <check_fs+0xa4>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d101      	bne.n	8005dfe <check_fs+0x82>
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	e00c      	b.n	8005e18 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	3338      	adds	r3, #56	@ 0x38
 8005e02:	3352      	adds	r3, #82	@ 0x52
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7fe f9ab 	bl	8004160 <ld_dword>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	4a05      	ldr	r2, [pc, #20]	@ (8005e24 <check_fs+0xa8>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d101      	bne.n	8005e16 <check_fs+0x9a>
 8005e12:	2300      	movs	r3, #0
 8005e14:	e000      	b.n	8005e18 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005e16:	2302      	movs	r3, #2
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3708      	adds	r7, #8
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	00544146 	.word	0x00544146
 8005e24:	33544146 	.word	0x33544146

08005e28 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b096      	sub	sp, #88	@ 0x58
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	4613      	mov	r3, r2
 8005e34:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f7ff ff59 	bl	8005cf4 <get_ldnumber>
 8005e42:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005e44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	da01      	bge.n	8005e4e <find_volume+0x26>
 8005e4a:	230b      	movs	r3, #11
 8005e4c:	e265      	b.n	800631a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005e4e:	4a9f      	ldr	r2, [pc, #636]	@ (80060cc <find_volume+0x2a4>)
 8005e50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e56:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d101      	bne.n	8005e62 <find_volume+0x3a>
 8005e5e:	230c      	movs	r3, #12
 8005e60:	e25b      	b.n	800631a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e66:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005e68:	79fb      	ldrb	r3, [r7, #7]
 8005e6a:	f023 0301 	bic.w	r3, r3, #1
 8005e6e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d01a      	beq.n	8005eae <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e7a:	785b      	ldrb	r3, [r3, #1]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7fe f8b7 	bl	8003ff0 <disk_status>
 8005e82:	4603      	mov	r3, r0
 8005e84:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005e88:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005e8c:	f003 0301 	and.w	r3, r3, #1
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10c      	bne.n	8005eae <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005e94:	79fb      	ldrb	r3, [r7, #7]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d007      	beq.n	8005eaa <find_volume+0x82>
 8005e9a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005e9e:	f003 0304 	and.w	r3, r3, #4
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d001      	beq.n	8005eaa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005ea6:	230a      	movs	r3, #10
 8005ea8:	e237      	b.n	800631a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8005eaa:	2300      	movs	r3, #0
 8005eac:	e235      	b.n	800631a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005eb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eb6:	b2da      	uxtb	r2, r3
 8005eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eba:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ebe:	785b      	ldrb	r3, [r3, #1]
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7fe f8af 	bl	8004024 <disk_initialize>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005ecc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005ed0:	f003 0301 	and.w	r3, r3, #1
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d001      	beq.n	8005edc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e21e      	b.n	800631a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005edc:	79fb      	ldrb	r3, [r7, #7]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d007      	beq.n	8005ef2 <find_volume+0xca>
 8005ee2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005ee6:	f003 0304 	and.w	r3, r3, #4
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005eee:	230a      	movs	r3, #10
 8005ef0:	e213      	b.n	800631a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef4:	7858      	ldrb	r0, [r3, #1]
 8005ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef8:	330c      	adds	r3, #12
 8005efa:	461a      	mov	r2, r3
 8005efc:	2102      	movs	r1, #2
 8005efe:	f7fe f8f9 	bl	80040f4 <disk_ioctl>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d001      	beq.n	8005f0c <find_volume+0xe4>
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e206      	b.n	800631a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f0e:	899b      	ldrh	r3, [r3, #12]
 8005f10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f14:	d80d      	bhi.n	8005f32 <find_volume+0x10a>
 8005f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f18:	899b      	ldrh	r3, [r3, #12]
 8005f1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f1e:	d308      	bcc.n	8005f32 <find_volume+0x10a>
 8005f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f22:	899b      	ldrh	r3, [r3, #12]
 8005f24:	461a      	mov	r2, r3
 8005f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f28:	899b      	ldrh	r3, [r3, #12]
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d001      	beq.n	8005f36 <find_volume+0x10e>
 8005f32:	2301      	movs	r3, #1
 8005f34:	e1f1      	b.n	800631a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005f36:	2300      	movs	r3, #0
 8005f38:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005f3a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005f3c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005f3e:	f7ff ff1d 	bl	8005d7c <check_fs>
 8005f42:	4603      	mov	r3, r0
 8005f44:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005f48:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d149      	bne.n	8005fe4 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005f50:	2300      	movs	r3, #0
 8005f52:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f54:	e01e      	b.n	8005f94 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f58:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005f5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f5e:	011b      	lsls	r3, r3, #4
 8005f60:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8005f64:	4413      	add	r3, r2
 8005f66:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6a:	3304      	adds	r3, #4
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d006      	beq.n	8005f80 <find_volume+0x158>
 8005f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f74:	3308      	adds	r3, #8
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7fe f8f2 	bl	8004160 <ld_dword>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	e000      	b.n	8005f82 <find_volume+0x15a>
 8005f80:	2200      	movs	r2, #0
 8005f82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	3358      	adds	r3, #88	@ 0x58
 8005f88:	443b      	add	r3, r7
 8005f8a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005f8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f90:	3301      	adds	r3, #1
 8005f92:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f96:	2b03      	cmp	r3, #3
 8005f98:	d9dd      	bls.n	8005f56 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8005f9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d002      	beq.n	8005faa <find_volume+0x182>
 8005fa4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005faa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	3358      	adds	r3, #88	@ 0x58
 8005fb0:	443b      	add	r3, r7
 8005fb2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005fb6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005fb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d005      	beq.n	8005fca <find_volume+0x1a2>
 8005fbe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005fc0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005fc2:	f7ff fedb 	bl	8005d7c <check_fs>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	e000      	b.n	8005fcc <find_volume+0x1a4>
 8005fca:	2303      	movs	r3, #3
 8005fcc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005fd0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d905      	bls.n	8005fe4 <find_volume+0x1bc>
 8005fd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fda:	3301      	adds	r3, #1
 8005fdc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fe0:	2b03      	cmp	r3, #3
 8005fe2:	d9e2      	bls.n	8005faa <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005fe4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005fe8:	2b04      	cmp	r3, #4
 8005fea:	d101      	bne.n	8005ff0 <find_volume+0x1c8>
 8005fec:	2301      	movs	r3, #1
 8005fee:	e194      	b.n	800631a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005ff0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d901      	bls.n	8005ffc <find_volume+0x1d4>
 8005ff8:	230d      	movs	r3, #13
 8005ffa:	e18e      	b.n	800631a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ffe:	3338      	adds	r3, #56	@ 0x38
 8006000:	330b      	adds	r3, #11
 8006002:	4618      	mov	r0, r3
 8006004:	f7fe f894 	bl	8004130 <ld_word>
 8006008:	4603      	mov	r3, r0
 800600a:	461a      	mov	r2, r3
 800600c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800600e:	899b      	ldrh	r3, [r3, #12]
 8006010:	429a      	cmp	r2, r3
 8006012:	d001      	beq.n	8006018 <find_volume+0x1f0>
 8006014:	230d      	movs	r3, #13
 8006016:	e180      	b.n	800631a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800601a:	3338      	adds	r3, #56	@ 0x38
 800601c:	3316      	adds	r3, #22
 800601e:	4618      	mov	r0, r3
 8006020:	f7fe f886 	bl	8004130 <ld_word>
 8006024:	4603      	mov	r3, r0
 8006026:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006028:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800602a:	2b00      	cmp	r3, #0
 800602c:	d106      	bne.n	800603c <find_volume+0x214>
 800602e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006030:	3338      	adds	r3, #56	@ 0x38
 8006032:	3324      	adds	r3, #36	@ 0x24
 8006034:	4618      	mov	r0, r3
 8006036:	f7fe f893 	bl	8004160 <ld_dword>
 800603a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800603c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800603e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006040:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006044:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8006048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800604a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800604c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800604e:	789b      	ldrb	r3, [r3, #2]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d005      	beq.n	8006060 <find_volume+0x238>
 8006054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006056:	789b      	ldrb	r3, [r3, #2]
 8006058:	2b02      	cmp	r3, #2
 800605a:	d001      	beq.n	8006060 <find_volume+0x238>
 800605c:	230d      	movs	r3, #13
 800605e:	e15c      	b.n	800631a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006062:	789b      	ldrb	r3, [r3, #2]
 8006064:	461a      	mov	r2, r3
 8006066:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006068:	fb02 f303 	mul.w	r3, r2, r3
 800606c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800606e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006070:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006074:	461a      	mov	r2, r3
 8006076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006078:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800607a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800607c:	895b      	ldrh	r3, [r3, #10]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d008      	beq.n	8006094 <find_volume+0x26c>
 8006082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006084:	895b      	ldrh	r3, [r3, #10]
 8006086:	461a      	mov	r2, r3
 8006088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800608a:	895b      	ldrh	r3, [r3, #10]
 800608c:	3b01      	subs	r3, #1
 800608e:	4013      	ands	r3, r2
 8006090:	2b00      	cmp	r3, #0
 8006092:	d001      	beq.n	8006098 <find_volume+0x270>
 8006094:	230d      	movs	r3, #13
 8006096:	e140      	b.n	800631a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800609a:	3338      	adds	r3, #56	@ 0x38
 800609c:	3311      	adds	r3, #17
 800609e:	4618      	mov	r0, r3
 80060a0:	f7fe f846 	bl	8004130 <ld_word>
 80060a4:	4603      	mov	r3, r0
 80060a6:	461a      	mov	r2, r3
 80060a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060aa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80060ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ae:	891b      	ldrh	r3, [r3, #8]
 80060b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80060b2:	8992      	ldrh	r2, [r2, #12]
 80060b4:	0952      	lsrs	r2, r2, #5
 80060b6:	b292      	uxth	r2, r2
 80060b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80060bc:	fb01 f202 	mul.w	r2, r1, r2
 80060c0:	1a9b      	subs	r3, r3, r2
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d003      	beq.n	80060d0 <find_volume+0x2a8>
 80060c8:	230d      	movs	r3, #13
 80060ca:	e126      	b.n	800631a <find_volume+0x4f2>
 80060cc:	200050d0 	.word	0x200050d0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80060d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060d2:	3338      	adds	r3, #56	@ 0x38
 80060d4:	3313      	adds	r3, #19
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7fe f82a 	bl	8004130 <ld_word>
 80060dc:	4603      	mov	r3, r0
 80060de:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80060e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d106      	bne.n	80060f4 <find_volume+0x2cc>
 80060e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060e8:	3338      	adds	r3, #56	@ 0x38
 80060ea:	3320      	adds	r3, #32
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7fe f837 	bl	8004160 <ld_dword>
 80060f2:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80060f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060f6:	3338      	adds	r3, #56	@ 0x38
 80060f8:	330e      	adds	r3, #14
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7fe f818 	bl	8004130 <ld_word>
 8006100:	4603      	mov	r3, r0
 8006102:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006104:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006106:	2b00      	cmp	r3, #0
 8006108:	d101      	bne.n	800610e <find_volume+0x2e6>
 800610a:	230d      	movs	r3, #13
 800610c:	e105      	b.n	800631a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800610e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006110:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006112:	4413      	add	r3, r2
 8006114:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006116:	8911      	ldrh	r1, [r2, #8]
 8006118:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800611a:	8992      	ldrh	r2, [r2, #12]
 800611c:	0952      	lsrs	r2, r2, #5
 800611e:	b292      	uxth	r2, r2
 8006120:	fbb1 f2f2 	udiv	r2, r1, r2
 8006124:	b292      	uxth	r2, r2
 8006126:	4413      	add	r3, r2
 8006128:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800612a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800612c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800612e:	429a      	cmp	r2, r3
 8006130:	d201      	bcs.n	8006136 <find_volume+0x30e>
 8006132:	230d      	movs	r3, #13
 8006134:	e0f1      	b.n	800631a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006136:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800613e:	8952      	ldrh	r2, [r2, #10]
 8006140:	fbb3 f3f2 	udiv	r3, r3, r2
 8006144:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006148:	2b00      	cmp	r3, #0
 800614a:	d101      	bne.n	8006150 <find_volume+0x328>
 800614c:	230d      	movs	r3, #13
 800614e:	e0e4      	b.n	800631a <find_volume+0x4f2>
		fmt = FS_FAT32;
 8006150:	2303      	movs	r3, #3
 8006152:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006158:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800615c:	4293      	cmp	r3, r2
 800615e:	d802      	bhi.n	8006166 <find_volume+0x33e>
 8006160:	2302      	movs	r3, #2
 8006162:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006168:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800616c:	4293      	cmp	r3, r2
 800616e:	d802      	bhi.n	8006176 <find_volume+0x34e>
 8006170:	2301      	movs	r3, #1
 8006172:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006178:	1c9a      	adds	r2, r3, #2
 800617a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800617c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800617e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006180:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006182:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006184:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006186:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006188:	441a      	add	r2, r3
 800618a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800618c:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800618e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006192:	441a      	add	r2, r3
 8006194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006196:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8006198:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800619c:	2b03      	cmp	r3, #3
 800619e:	d11e      	bne.n	80061de <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80061a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061a2:	3338      	adds	r3, #56	@ 0x38
 80061a4:	332a      	adds	r3, #42	@ 0x2a
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7fd ffc2 	bl	8004130 <ld_word>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <find_volume+0x38e>
 80061b2:	230d      	movs	r3, #13
 80061b4:	e0b1      	b.n	800631a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80061b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061b8:	891b      	ldrh	r3, [r3, #8]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d001      	beq.n	80061c2 <find_volume+0x39a>
 80061be:	230d      	movs	r3, #13
 80061c0:	e0ab      	b.n	800631a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80061c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061c4:	3338      	adds	r3, #56	@ 0x38
 80061c6:	332c      	adds	r3, #44	@ 0x2c
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7fd ffc9 	bl	8004160 <ld_dword>
 80061ce:	4602      	mov	r2, r0
 80061d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d2:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80061d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d6:	69db      	ldr	r3, [r3, #28]
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	647b      	str	r3, [r7, #68]	@ 0x44
 80061dc:	e01f      	b.n	800621e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80061de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e0:	891b      	ldrh	r3, [r3, #8]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d101      	bne.n	80061ea <find_volume+0x3c2>
 80061e6:	230d      	movs	r3, #13
 80061e8:	e097      	b.n	800631a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80061ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061f0:	441a      	add	r2, r3
 80061f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061f4:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80061f6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d103      	bne.n	8006206 <find_volume+0x3de>
 80061fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006200:	69db      	ldr	r3, [r3, #28]
 8006202:	005b      	lsls	r3, r3, #1
 8006204:	e00a      	b.n	800621c <find_volume+0x3f4>
 8006206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006208:	69da      	ldr	r2, [r3, #28]
 800620a:	4613      	mov	r3, r2
 800620c:	005b      	lsls	r3, r3, #1
 800620e:	4413      	add	r3, r2
 8006210:	085a      	lsrs	r2, r3, #1
 8006212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006214:	69db      	ldr	r3, [r3, #28]
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800621c:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800621e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006220:	6a1a      	ldr	r2, [r3, #32]
 8006222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006224:	899b      	ldrh	r3, [r3, #12]
 8006226:	4619      	mov	r1, r3
 8006228:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800622a:	440b      	add	r3, r1
 800622c:	3b01      	subs	r3, #1
 800622e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006230:	8989      	ldrh	r1, [r1, #12]
 8006232:	fbb3 f3f1 	udiv	r3, r3, r1
 8006236:	429a      	cmp	r2, r3
 8006238:	d201      	bcs.n	800623e <find_volume+0x416>
 800623a:	230d      	movs	r3, #13
 800623c:	e06d      	b.n	800631a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800623e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006240:	f04f 32ff 	mov.w	r2, #4294967295
 8006244:	619a      	str	r2, [r3, #24]
 8006246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006248:	699a      	ldr	r2, [r3, #24]
 800624a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800624c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800624e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006250:	2280      	movs	r2, #128	@ 0x80
 8006252:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006254:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006258:	2b03      	cmp	r3, #3
 800625a:	d149      	bne.n	80062f0 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800625c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800625e:	3338      	adds	r3, #56	@ 0x38
 8006260:	3330      	adds	r3, #48	@ 0x30
 8006262:	4618      	mov	r0, r3
 8006264:	f7fd ff64 	bl	8004130 <ld_word>
 8006268:	4603      	mov	r3, r0
 800626a:	2b01      	cmp	r3, #1
 800626c:	d140      	bne.n	80062f0 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800626e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006270:	3301      	adds	r3, #1
 8006272:	4619      	mov	r1, r3
 8006274:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006276:	f7fe fa0b 	bl	8004690 <move_window>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d137      	bne.n	80062f0 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8006280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006282:	2200      	movs	r2, #0
 8006284:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006288:	3338      	adds	r3, #56	@ 0x38
 800628a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800628e:	4618      	mov	r0, r3
 8006290:	f7fd ff4e 	bl	8004130 <ld_word>
 8006294:	4603      	mov	r3, r0
 8006296:	461a      	mov	r2, r3
 8006298:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800629c:	429a      	cmp	r2, r3
 800629e:	d127      	bne.n	80062f0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80062a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062a2:	3338      	adds	r3, #56	@ 0x38
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7fd ff5b 	bl	8004160 <ld_dword>
 80062aa:	4603      	mov	r3, r0
 80062ac:	4a1d      	ldr	r2, [pc, #116]	@ (8006324 <find_volume+0x4fc>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d11e      	bne.n	80062f0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80062b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b4:	3338      	adds	r3, #56	@ 0x38
 80062b6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7fd ff50 	bl	8004160 <ld_dword>
 80062c0:	4603      	mov	r3, r0
 80062c2:	4a19      	ldr	r2, [pc, #100]	@ (8006328 <find_volume+0x500>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d113      	bne.n	80062f0 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80062c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ca:	3338      	adds	r3, #56	@ 0x38
 80062cc:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7fd ff45 	bl	8004160 <ld_dword>
 80062d6:	4602      	mov	r2, r0
 80062d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062da:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80062dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062de:	3338      	adds	r3, #56	@ 0x38
 80062e0:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80062e4:	4618      	mov	r0, r3
 80062e6:	f7fd ff3b 	bl	8004160 <ld_dword>
 80062ea:	4602      	mov	r2, r0
 80062ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ee:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80062f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062f2:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80062f6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80062f8:	4b0c      	ldr	r3, [pc, #48]	@ (800632c <find_volume+0x504>)
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	3301      	adds	r3, #1
 80062fe:	b29a      	uxth	r2, r3
 8006300:	4b0a      	ldr	r3, [pc, #40]	@ (800632c <find_volume+0x504>)
 8006302:	801a      	strh	r2, [r3, #0]
 8006304:	4b09      	ldr	r3, [pc, #36]	@ (800632c <find_volume+0x504>)
 8006306:	881a      	ldrh	r2, [r3, #0]
 8006308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800630a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800630c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800630e:	4a08      	ldr	r2, [pc, #32]	@ (8006330 <find_volume+0x508>)
 8006310:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006312:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006314:	f7fe f954 	bl	80045c0 <clear_lock>
#endif
	return FR_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3758      	adds	r7, #88	@ 0x58
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	41615252 	.word	0x41615252
 8006328:	61417272 	.word	0x61417272
 800632c:	200050d4 	.word	0x200050d4
 8006330:	200050f8 	.word	0x200050f8

08006334 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800633e:	2309      	movs	r3, #9
 8006340:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d01c      	beq.n	8006382 <validate+0x4e>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d018      	beq.n	8006382 <validate+0x4e>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d013      	beq.n	8006382 <validate+0x4e>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	889a      	ldrh	r2, [r3, #4]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	88db      	ldrh	r3, [r3, #6]
 8006364:	429a      	cmp	r2, r3
 8006366:	d10c      	bne.n	8006382 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	785b      	ldrb	r3, [r3, #1]
 800636e:	4618      	mov	r0, r3
 8006370:	f7fd fe3e 	bl	8003ff0 <disk_status>
 8006374:	4603      	mov	r3, r0
 8006376:	f003 0301 	and.w	r3, r3, #1
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <validate+0x4e>
			res = FR_OK;
 800637e:	2300      	movs	r3, #0
 8006380:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006382:	7bfb      	ldrb	r3, [r7, #15]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d102      	bne.n	800638e <validate+0x5a>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	e000      	b.n	8006390 <validate+0x5c>
 800638e:	2300      	movs	r3, #0
 8006390:	683a      	ldr	r2, [r7, #0]
 8006392:	6013      	str	r3, [r2, #0]
	return res;
 8006394:	7bfb      	ldrb	r3, [r7, #15]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
	...

080063a0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b088      	sub	sp, #32
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	4613      	mov	r3, r2
 80063ac:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80063b2:	f107 0310 	add.w	r3, r7, #16
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7ff fc9c 	bl	8005cf4 <get_ldnumber>
 80063bc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	da01      	bge.n	80063c8 <f_mount+0x28>
 80063c4:	230b      	movs	r3, #11
 80063c6:	e02b      	b.n	8006420 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80063c8:	4a17      	ldr	r2, [pc, #92]	@ (8006428 <f_mount+0x88>)
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063d0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d005      	beq.n	80063e4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80063d8:	69b8      	ldr	r0, [r7, #24]
 80063da:	f7fe f8f1 	bl	80045c0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	2200      	movs	r2, #0
 80063e2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d002      	beq.n	80063f0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	490d      	ldr	r1, [pc, #52]	@ (8006428 <f_mount+0x88>)
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d002      	beq.n	8006406 <f_mount+0x66>
 8006400:	79fb      	ldrb	r3, [r7, #7]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d001      	beq.n	800640a <f_mount+0x6a>
 8006406:	2300      	movs	r3, #0
 8006408:	e00a      	b.n	8006420 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800640a:	f107 010c 	add.w	r1, r7, #12
 800640e:	f107 0308 	add.w	r3, r7, #8
 8006412:	2200      	movs	r2, #0
 8006414:	4618      	mov	r0, r3
 8006416:	f7ff fd07 	bl	8005e28 <find_volume>
 800641a:	4603      	mov	r3, r0
 800641c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800641e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3720      	adds	r7, #32
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	200050d0 	.word	0x200050d0

0800642c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b09a      	sub	sp, #104	@ 0x68
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	4613      	mov	r3, r2
 8006438:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d101      	bne.n	8006444 <f_open+0x18>
 8006440:	2309      	movs	r3, #9
 8006442:	e1b7      	b.n	80067b4 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006444:	79fb      	ldrb	r3, [r7, #7]
 8006446:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800644a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800644c:	79fa      	ldrb	r2, [r7, #7]
 800644e:	f107 0114 	add.w	r1, r7, #20
 8006452:	f107 0308 	add.w	r3, r7, #8
 8006456:	4618      	mov	r0, r3
 8006458:	f7ff fce6 	bl	8005e28 <find_volume>
 800645c:	4603      	mov	r3, r0
 800645e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8006462:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006466:	2b00      	cmp	r3, #0
 8006468:	f040 819b 	bne.w	80067a2 <f_open+0x376>
		dj.obj.fs = fs;
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	f107 0318 	add.w	r3, r7, #24
 8006476:	4611      	mov	r1, r2
 8006478:	4618      	mov	r0, r3
 800647a:	f7ff fbc5 	bl	8005c08 <follow_path>
 800647e:	4603      	mov	r3, r0
 8006480:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006484:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006488:	2b00      	cmp	r3, #0
 800648a:	d118      	bne.n	80064be <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800648c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006490:	b25b      	sxtb	r3, r3
 8006492:	2b00      	cmp	r3, #0
 8006494:	da03      	bge.n	800649e <f_open+0x72>
				res = FR_INVALID_NAME;
 8006496:	2306      	movs	r3, #6
 8006498:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800649c:	e00f      	b.n	80064be <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800649e:	79fb      	ldrb	r3, [r7, #7]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	bf8c      	ite	hi
 80064a4:	2301      	movhi	r3, #1
 80064a6:	2300      	movls	r3, #0
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	461a      	mov	r2, r3
 80064ac:	f107 0318 	add.w	r3, r7, #24
 80064b0:	4611      	mov	r1, r2
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7fd ff3c 	bl	8004330 <chk_lock>
 80064b8:	4603      	mov	r3, r0
 80064ba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80064be:	79fb      	ldrb	r3, [r7, #7]
 80064c0:	f003 031c 	and.w	r3, r3, #28
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d07f      	beq.n	80065c8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80064c8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d017      	beq.n	8006500 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80064d0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80064d4:	2b04      	cmp	r3, #4
 80064d6:	d10e      	bne.n	80064f6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80064d8:	f7fd ff86 	bl	80043e8 <enq_lock>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d006      	beq.n	80064f0 <f_open+0xc4>
 80064e2:	f107 0318 	add.w	r3, r7, #24
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7ff f8de 	bl	80056a8 <dir_register>
 80064ec:	4603      	mov	r3, r0
 80064ee:	e000      	b.n	80064f2 <f_open+0xc6>
 80064f0:	2312      	movs	r3, #18
 80064f2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80064f6:	79fb      	ldrb	r3, [r7, #7]
 80064f8:	f043 0308 	orr.w	r3, r3, #8
 80064fc:	71fb      	strb	r3, [r7, #7]
 80064fe:	e010      	b.n	8006522 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006500:	7fbb      	ldrb	r3, [r7, #30]
 8006502:	f003 0311 	and.w	r3, r3, #17
 8006506:	2b00      	cmp	r3, #0
 8006508:	d003      	beq.n	8006512 <f_open+0xe6>
					res = FR_DENIED;
 800650a:	2307      	movs	r3, #7
 800650c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006510:	e007      	b.n	8006522 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006512:	79fb      	ldrb	r3, [r7, #7]
 8006514:	f003 0304 	and.w	r3, r3, #4
 8006518:	2b00      	cmp	r3, #0
 800651a:	d002      	beq.n	8006522 <f_open+0xf6>
 800651c:	2308      	movs	r3, #8
 800651e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006522:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006526:	2b00      	cmp	r3, #0
 8006528:	d168      	bne.n	80065fc <f_open+0x1d0>
 800652a:	79fb      	ldrb	r3, [r7, #7]
 800652c:	f003 0308 	and.w	r3, r3, #8
 8006530:	2b00      	cmp	r3, #0
 8006532:	d063      	beq.n	80065fc <f_open+0x1d0>
				dw = GET_FATTIME();
 8006534:	f7fd fcfe 	bl	8003f34 <get_fattime>
 8006538:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800653a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800653c:	330e      	adds	r3, #14
 800653e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006540:	4618      	mov	r0, r3
 8006542:	f7fd fe4b 	bl	80041dc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006548:	3316      	adds	r3, #22
 800654a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800654c:	4618      	mov	r0, r3
 800654e:	f7fd fe45 	bl	80041dc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006554:	330b      	adds	r3, #11
 8006556:	2220      	movs	r2, #32
 8006558:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800655e:	4611      	mov	r1, r2
 8006560:	4618      	mov	r0, r3
 8006562:	f7fe fe1a 	bl	800519a <ld_clust>
 8006566:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800656c:	2200      	movs	r2, #0
 800656e:	4618      	mov	r0, r3
 8006570:	f7fe fe32 	bl	80051d8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006576:	331c      	adds	r3, #28
 8006578:	2100      	movs	r1, #0
 800657a:	4618      	mov	r0, r3
 800657c:	f7fd fe2e 	bl	80041dc <st_dword>
					fs->wflag = 1;
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	2201      	movs	r2, #1
 8006584:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006586:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006588:	2b00      	cmp	r3, #0
 800658a:	d037      	beq.n	80065fc <f_open+0x1d0>
						dw = fs->winsect;
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006590:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8006592:	f107 0318 	add.w	r3, r7, #24
 8006596:	2200      	movs	r2, #0
 8006598:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800659a:	4618      	mov	r0, r3
 800659c:	f7fe fb22 	bl	8004be4 <remove_chain>
 80065a0:	4603      	mov	r3, r0
 80065a2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 80065a6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d126      	bne.n	80065fc <f_open+0x1d0>
							res = move_window(fs, dw);
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7fe f86c 	bl	8004690 <move_window>
 80065b8:	4603      	mov	r3, r0
 80065ba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80065c2:	3a01      	subs	r2, #1
 80065c4:	615a      	str	r2, [r3, #20]
 80065c6:	e019      	b.n	80065fc <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80065c8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d115      	bne.n	80065fc <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80065d0:	7fbb      	ldrb	r3, [r7, #30]
 80065d2:	f003 0310 	and.w	r3, r3, #16
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d003      	beq.n	80065e2 <f_open+0x1b6>
					res = FR_NO_FILE;
 80065da:	2304      	movs	r3, #4
 80065dc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80065e0:	e00c      	b.n	80065fc <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80065e2:	79fb      	ldrb	r3, [r7, #7]
 80065e4:	f003 0302 	and.w	r3, r3, #2
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d007      	beq.n	80065fc <f_open+0x1d0>
 80065ec:	7fbb      	ldrb	r3, [r7, #30]
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d002      	beq.n	80065fc <f_open+0x1d0>
						res = FR_DENIED;
 80065f6:	2307      	movs	r3, #7
 80065f8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80065fc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006600:	2b00      	cmp	r3, #0
 8006602:	d126      	bne.n	8006652 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006604:	79fb      	ldrb	r3, [r7, #7]
 8006606:	f003 0308 	and.w	r3, r3, #8
 800660a:	2b00      	cmp	r3, #0
 800660c:	d003      	beq.n	8006616 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800660e:	79fb      	ldrb	r3, [r7, #7]
 8006610:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006614:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800661e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006624:	79fb      	ldrb	r3, [r7, #7]
 8006626:	2b01      	cmp	r3, #1
 8006628:	bf8c      	ite	hi
 800662a:	2301      	movhi	r3, #1
 800662c:	2300      	movls	r3, #0
 800662e:	b2db      	uxtb	r3, r3
 8006630:	461a      	mov	r2, r3
 8006632:	f107 0318 	add.w	r3, r7, #24
 8006636:	4611      	mov	r1, r2
 8006638:	4618      	mov	r0, r3
 800663a:	f7fd fef7 	bl	800442c <inc_lock>
 800663e:	4602      	mov	r2, r0
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d102      	bne.n	8006652 <f_open+0x226>
 800664c:	2302      	movs	r3, #2
 800664e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006652:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006656:	2b00      	cmp	r3, #0
 8006658:	f040 80a3 	bne.w	80067a2 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006660:	4611      	mov	r1, r2
 8006662:	4618      	mov	r0, r3
 8006664:	f7fe fd99 	bl	800519a <ld_clust>
 8006668:	4602      	mov	r2, r0
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800666e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006670:	331c      	adds	r3, #28
 8006672:	4618      	mov	r0, r3
 8006674:	f7fd fd74 	bl	8004160 <ld_dword>
 8006678:	4602      	mov	r2, r0
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2200      	movs	r2, #0
 8006682:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	88da      	ldrh	r2, [r3, #6]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	79fa      	ldrb	r2, [r7, #7]
 8006696:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	3330      	adds	r3, #48	@ 0x30
 80066ae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80066b2:	2100      	movs	r1, #0
 80066b4:	4618      	mov	r0, r3
 80066b6:	f7fd fdde 	bl	8004276 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80066ba:	79fb      	ldrb	r3, [r7, #7]
 80066bc:	f003 0320 	and.w	r3, r3, #32
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d06e      	beq.n	80067a2 <f_open+0x376>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d06a      	beq.n	80067a2 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	68da      	ldr	r2, [r3, #12]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	895b      	ldrh	r3, [r3, #10]
 80066d8:	461a      	mov	r2, r3
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	899b      	ldrh	r3, [r3, #12]
 80066de:	fb02 f303 	mul.w	r3, r2, r3
 80066e2:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066f0:	e016      	b.n	8006720 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7fe f887 	bl	800480a <get_fat>
 80066fc:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80066fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006700:	2b01      	cmp	r3, #1
 8006702:	d802      	bhi.n	800670a <f_open+0x2de>
 8006704:	2302      	movs	r3, #2
 8006706:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800670a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800670c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006710:	d102      	bne.n	8006718 <f_open+0x2ec>
 8006712:	2301      	movs	r3, #1
 8006714:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006718:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800671a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006720:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006724:	2b00      	cmp	r3, #0
 8006726:	d103      	bne.n	8006730 <f_open+0x304>
 8006728:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800672a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800672c:	429a      	cmp	r2, r3
 800672e:	d8e0      	bhi.n	80066f2 <f_open+0x2c6>
				}
				fp->clust = clst;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006734:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006736:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800673a:	2b00      	cmp	r3, #0
 800673c:	d131      	bne.n	80067a2 <f_open+0x376>
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	899b      	ldrh	r3, [r3, #12]
 8006742:	461a      	mov	r2, r3
 8006744:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006746:	fbb3 f1f2 	udiv	r1, r3, r2
 800674a:	fb01 f202 	mul.w	r2, r1, r2
 800674e:	1a9b      	subs	r3, r3, r2
 8006750:	2b00      	cmp	r3, #0
 8006752:	d026      	beq.n	80067a2 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8006758:	4618      	mov	r0, r3
 800675a:	f7fe f837 	bl	80047cc <clust2sect>
 800675e:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8006760:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006762:	2b00      	cmp	r3, #0
 8006764:	d103      	bne.n	800676e <f_open+0x342>
						res = FR_INT_ERR;
 8006766:	2302      	movs	r3, #2
 8006768:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800676c:	e019      	b.n	80067a2 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	899b      	ldrh	r3, [r3, #12]
 8006772:	461a      	mov	r2, r3
 8006774:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006776:	fbb3 f2f2 	udiv	r2, r3, r2
 800677a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800677c:	441a      	add	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	7858      	ldrb	r0, [r3, #1]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6a1a      	ldr	r2, [r3, #32]
 8006790:	2301      	movs	r3, #1
 8006792:	f7fd fc6f 	bl	8004074 <disk_read>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d002      	beq.n	80067a2 <f_open+0x376>
 800679c:	2301      	movs	r3, #1
 800679e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80067a2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d002      	beq.n	80067b0 <f_open+0x384>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80067b0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3768      	adds	r7, #104	@ 0x68
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b08e      	sub	sp, #56	@ 0x38
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	607a      	str	r2, [r7, #4]
 80067c8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	2200      	movs	r2, #0
 80067d2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f107 0214 	add.w	r2, r7, #20
 80067da:	4611      	mov	r1, r2
 80067dc:	4618      	mov	r0, r3
 80067de:	f7ff fda9 	bl	8006334 <validate>
 80067e2:	4603      	mov	r3, r0
 80067e4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80067e8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d107      	bne.n	8006800 <f_read+0x44>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	7d5b      	ldrb	r3, [r3, #21]
 80067f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80067f8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d002      	beq.n	8006806 <f_read+0x4a>
 8006800:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006804:	e135      	b.n	8006a72 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	7d1b      	ldrb	r3, [r3, #20]
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <f_read+0x5a>
 8006812:	2307      	movs	r3, #7
 8006814:	e12d      	b.n	8006a72 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	68da      	ldr	r2, [r3, #12]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	6a3b      	ldr	r3, [r7, #32]
 8006826:	429a      	cmp	r2, r3
 8006828:	f240 811e 	bls.w	8006a68 <f_read+0x2ac>
 800682c:	6a3b      	ldr	r3, [r7, #32]
 800682e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006830:	e11a      	b.n	8006a68 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	8992      	ldrh	r2, [r2, #12]
 800683a:	fbb3 f1f2 	udiv	r1, r3, r2
 800683e:	fb01 f202 	mul.w	r2, r1, r2
 8006842:	1a9b      	subs	r3, r3, r2
 8006844:	2b00      	cmp	r3, #0
 8006846:	f040 80d5 	bne.w	80069f4 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	8992      	ldrh	r2, [r2, #12]
 8006852:	fbb3 f3f2 	udiv	r3, r3, r2
 8006856:	697a      	ldr	r2, [r7, #20]
 8006858:	8952      	ldrh	r2, [r2, #10]
 800685a:	3a01      	subs	r2, #1
 800685c:	4013      	ands	r3, r2
 800685e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d12f      	bne.n	80068c6 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d103      	bne.n	8006876 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	633b      	str	r3, [r7, #48]	@ 0x30
 8006874:	e013      	b.n	800689e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800687a:	2b00      	cmp	r3, #0
 800687c:	d007      	beq.n	800688e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	4619      	mov	r1, r3
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f7fe faaa 	bl	8004dde <clmt_clust>
 800688a:	6338      	str	r0, [r7, #48]	@ 0x30
 800688c:	e007      	b.n	800689e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	69db      	ldr	r3, [r3, #28]
 8006894:	4619      	mov	r1, r3
 8006896:	4610      	mov	r0, r2
 8006898:	f7fd ffb7 	bl	800480a <get_fat>
 800689c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800689e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d804      	bhi.n	80068ae <f_read+0xf2>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2202      	movs	r2, #2
 80068a8:	755a      	strb	r2, [r3, #21]
 80068aa:	2302      	movs	r3, #2
 80068ac:	e0e1      	b.n	8006a72 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80068ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b4:	d104      	bne.n	80068c0 <f_read+0x104>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2201      	movs	r2, #1
 80068ba:	755a      	strb	r2, [r3, #21]
 80068bc:	2301      	movs	r3, #1
 80068be:	e0d8      	b.n	8006a72 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068c4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	69db      	ldr	r3, [r3, #28]
 80068cc:	4619      	mov	r1, r3
 80068ce:	4610      	mov	r0, r2
 80068d0:	f7fd ff7c 	bl	80047cc <clust2sect>
 80068d4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d104      	bne.n	80068e6 <f_read+0x12a>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2202      	movs	r2, #2
 80068e0:	755a      	strb	r2, [r3, #21]
 80068e2:	2302      	movs	r3, #2
 80068e4:	e0c5      	b.n	8006a72 <f_read+0x2b6>
			sect += csect;
 80068e6:	69ba      	ldr	r2, [r7, #24]
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	4413      	add	r3, r2
 80068ec:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	899b      	ldrh	r3, [r3, #12]
 80068f2:	461a      	mov	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80068fa:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80068fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d041      	beq.n	8006986 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006902:	69fa      	ldr	r2, [r7, #28]
 8006904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006906:	4413      	add	r3, r2
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	8952      	ldrh	r2, [r2, #10]
 800690c:	4293      	cmp	r3, r2
 800690e:	d905      	bls.n	800691c <f_read+0x160>
					cc = fs->csize - csect;
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	895b      	ldrh	r3, [r3, #10]
 8006914:	461a      	mov	r2, r3
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	7858      	ldrb	r0, [r3, #1]
 8006920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006922:	69ba      	ldr	r2, [r7, #24]
 8006924:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006926:	f7fd fba5 	bl	8004074 <disk_read>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d004      	beq.n	800693a <f_read+0x17e>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2201      	movs	r2, #1
 8006934:	755a      	strb	r2, [r3, #21]
 8006936:	2301      	movs	r3, #1
 8006938:	e09b      	b.n	8006a72 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	7d1b      	ldrb	r3, [r3, #20]
 800693e:	b25b      	sxtb	r3, r3
 8006940:	2b00      	cmp	r3, #0
 8006942:	da18      	bge.n	8006976 <f_read+0x1ba>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6a1a      	ldr	r2, [r3, #32]
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800694e:	429a      	cmp	r2, r3
 8006950:	d911      	bls.n	8006976 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6a1a      	ldr	r2, [r3, #32]
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	8992      	ldrh	r2, [r2, #12]
 800695e:	fb02 f303 	mul.w	r3, r2, r3
 8006962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006964:	18d0      	adds	r0, r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	899b      	ldrh	r3, [r3, #12]
 8006970:	461a      	mov	r2, r3
 8006972:	f7fd fc5f 	bl	8004234 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	899b      	ldrh	r3, [r3, #12]
 800697a:	461a      	mov	r2, r3
 800697c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800697e:	fb02 f303 	mul.w	r3, r2, r3
 8006982:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8006984:	e05c      	b.n	8006a40 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	69ba      	ldr	r2, [r7, #24]
 800698c:	429a      	cmp	r2, r3
 800698e:	d02e      	beq.n	80069ee <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	7d1b      	ldrb	r3, [r3, #20]
 8006994:	b25b      	sxtb	r3, r3
 8006996:	2b00      	cmp	r3, #0
 8006998:	da18      	bge.n	80069cc <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	7858      	ldrb	r0, [r3, #1]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6a1a      	ldr	r2, [r3, #32]
 80069a8:	2301      	movs	r3, #1
 80069aa:	f7fd fb83 	bl	80040b4 <disk_write>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d004      	beq.n	80069be <f_read+0x202>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2201      	movs	r2, #1
 80069b8:	755a      	strb	r2, [r3, #21]
 80069ba:	2301      	movs	r3, #1
 80069bc:	e059      	b.n	8006a72 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	7d1b      	ldrb	r3, [r3, #20]
 80069c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069c6:	b2da      	uxtb	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	7858      	ldrb	r0, [r3, #1]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80069d6:	2301      	movs	r3, #1
 80069d8:	69ba      	ldr	r2, [r7, #24]
 80069da:	f7fd fb4b 	bl	8004074 <disk_read>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d004      	beq.n	80069ee <f_read+0x232>
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2201      	movs	r2, #1
 80069e8:	755a      	strb	r2, [r3, #21]
 80069ea:	2301      	movs	r3, #1
 80069ec:	e041      	b.n	8006a72 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	69ba      	ldr	r2, [r7, #24]
 80069f2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	899b      	ldrh	r3, [r3, #12]
 80069f8:	4618      	mov	r0, r3
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	697a      	ldr	r2, [r7, #20]
 8006a00:	8992      	ldrh	r2, [r2, #12]
 8006a02:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a06:	fb01 f202 	mul.w	r2, r1, r2
 8006a0a:	1a9b      	subs	r3, r3, r2
 8006a0c:	1ac3      	subs	r3, r0, r3
 8006a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006a10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d901      	bls.n	8006a1c <f_read+0x260>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	8992      	ldrh	r2, [r2, #12]
 8006a2a:	fbb3 f0f2 	udiv	r0, r3, r2
 8006a2e:	fb00 f202 	mul.w	r2, r0, r2
 8006a32:	1a9b      	subs	r3, r3, r2
 8006a34:	440b      	add	r3, r1
 8006a36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a38:	4619      	mov	r1, r3
 8006a3a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006a3c:	f7fd fbfa 	bl	8004234 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006a40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a44:	4413      	add	r3, r2
 8006a46:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	699a      	ldr	r2, [r3, #24]
 8006a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a4e:	441a      	add	r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	619a      	str	r2, [r3, #24]
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a5a:	441a      	add	r2, r3
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	601a      	str	r2, [r3, #0]
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f47f aee1 	bne.w	8006832 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3738      	adds	r7, #56	@ 0x38
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b086      	sub	sp, #24
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f107 0208 	add.w	r2, r7, #8
 8006a88:	4611      	mov	r1, r2
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7ff fc52 	bl	8006334 <validate>
 8006a90:	4603      	mov	r3, r0
 8006a92:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006a94:	7dfb      	ldrb	r3, [r7, #23]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d168      	bne.n	8006b6c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	7d1b      	ldrb	r3, [r3, #20]
 8006a9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d062      	beq.n	8006b6c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	7d1b      	ldrb	r3, [r3, #20]
 8006aaa:	b25b      	sxtb	r3, r3
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	da15      	bge.n	8006adc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	7858      	ldrb	r0, [r3, #1]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a1a      	ldr	r2, [r3, #32]
 8006abe:	2301      	movs	r3, #1
 8006ac0:	f7fd faf8 	bl	80040b4 <disk_write>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d001      	beq.n	8006ace <f_sync+0x54>
 8006aca:	2301      	movs	r3, #1
 8006acc:	e04f      	b.n	8006b6e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	7d1b      	ldrb	r3, [r3, #20]
 8006ad2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ad6:	b2da      	uxtb	r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006adc:	f7fd fa2a 	bl	8003f34 <get_fattime>
 8006ae0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006ae2:	68ba      	ldr	r2, [r7, #8]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae8:	4619      	mov	r1, r3
 8006aea:	4610      	mov	r0, r2
 8006aec:	f7fd fdd0 	bl	8004690 <move_window>
 8006af0:	4603      	mov	r3, r0
 8006af2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006af4:	7dfb      	ldrb	r3, [r7, #23]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d138      	bne.n	8006b6c <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006afe:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	330b      	adds	r3, #11
 8006b04:	781a      	ldrb	r2, [r3, #0]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	330b      	adds	r3, #11
 8006b0a:	f042 0220 	orr.w	r2, r2, #32
 8006b0e:	b2d2      	uxtb	r2, r2
 8006b10:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6818      	ldr	r0, [r3, #0]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	68f9      	ldr	r1, [r7, #12]
 8006b1e:	f7fe fb5b 	bl	80051d8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f103 021c 	add.w	r2, r3, #28
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	4610      	mov	r0, r2
 8006b30:	f7fd fb54 	bl	80041dc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	3316      	adds	r3, #22
 8006b38:	6939      	ldr	r1, [r7, #16]
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7fd fb4e 	bl	80041dc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	3312      	adds	r3, #18
 8006b44:	2100      	movs	r1, #0
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7fd fb2d 	bl	80041a6 <st_word>
					fs->wflag = 1;
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	4618      	mov	r0, r3
 8006b56:	f7fd fdc9 	bl	80046ec <sync_fs>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	7d1b      	ldrb	r3, [r3, #20]
 8006b62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b66:	b2da      	uxtb	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3718      	adds	r7, #24
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b084      	sub	sp, #16
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7ff ff7b 	bl	8006a7a <f_sync>
 8006b84:	4603      	mov	r3, r0
 8006b86:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006b88:	7bfb      	ldrb	r3, [r7, #15]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d118      	bne.n	8006bc0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f107 0208 	add.w	r2, r7, #8
 8006b94:	4611      	mov	r1, r2
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7ff fbcc 	bl	8006334 <validate>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006ba0:	7bfb      	ldrb	r3, [r7, #15]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d10c      	bne.n	8006bc0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7fd fccc 	bl	8004548 <dec_lock>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006bb4:	7bfb      	ldrb	r3, [r7, #15]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d102      	bne.n	8006bc0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
	...

08006bcc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b087      	sub	sp, #28
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006bde:	2300      	movs	r3, #0
 8006be0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006be2:	4b1f      	ldr	r3, [pc, #124]	@ (8006c60 <FATFS_LinkDriverEx+0x94>)
 8006be4:	7a5b      	ldrb	r3, [r3, #9]
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d131      	bne.n	8006c50 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006bec:	4b1c      	ldr	r3, [pc, #112]	@ (8006c60 <FATFS_LinkDriverEx+0x94>)
 8006bee:	7a5b      	ldrb	r3, [r3, #9]
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8006c60 <FATFS_LinkDriverEx+0x94>)
 8006bf6:	2100      	movs	r1, #0
 8006bf8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006bfa:	4b19      	ldr	r3, [pc, #100]	@ (8006c60 <FATFS_LinkDriverEx+0x94>)
 8006bfc:	7a5b      	ldrb	r3, [r3, #9]
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	4a17      	ldr	r2, [pc, #92]	@ (8006c60 <FATFS_LinkDriverEx+0x94>)
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006c0a:	4b15      	ldr	r3, [pc, #84]	@ (8006c60 <FATFS_LinkDriverEx+0x94>)
 8006c0c:	7a5b      	ldrb	r3, [r3, #9]
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	461a      	mov	r2, r3
 8006c12:	4b13      	ldr	r3, [pc, #76]	@ (8006c60 <FATFS_LinkDriverEx+0x94>)
 8006c14:	4413      	add	r3, r2
 8006c16:	79fa      	ldrb	r2, [r7, #7]
 8006c18:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006c1a:	4b11      	ldr	r3, [pc, #68]	@ (8006c60 <FATFS_LinkDriverEx+0x94>)
 8006c1c:	7a5b      	ldrb	r3, [r3, #9]
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	1c5a      	adds	r2, r3, #1
 8006c22:	b2d1      	uxtb	r1, r2
 8006c24:	4a0e      	ldr	r2, [pc, #56]	@ (8006c60 <FATFS_LinkDriverEx+0x94>)
 8006c26:	7251      	strb	r1, [r2, #9]
 8006c28:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006c2a:	7dbb      	ldrb	r3, [r7, #22]
 8006c2c:	3330      	adds	r3, #48	@ 0x30
 8006c2e:	b2da      	uxtb	r2, r3
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	3301      	adds	r3, #1
 8006c38:	223a      	movs	r2, #58	@ 0x3a
 8006c3a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	3302      	adds	r3, #2
 8006c40:	222f      	movs	r2, #47	@ 0x2f
 8006c42:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	3303      	adds	r3, #3
 8006c48:	2200      	movs	r2, #0
 8006c4a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006c50:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	371c      	adds	r7, #28
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	200052f8 	.word	0x200052f8

08006c64 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006c6e:	2200      	movs	r2, #0
 8006c70:	6839      	ldr	r1, [r7, #0]
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7ff ffaa 	bl	8006bcc <FATFS_LinkDriverEx>
 8006c78:	4603      	mov	r3, r0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
	...

08006c84 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	6039      	str	r1, [r7, #0]
 8006c8e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8006c90:	88fb      	ldrh	r3, [r7, #6]
 8006c92:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c94:	d802      	bhi.n	8006c9c <ff_convert+0x18>
		c = chr;
 8006c96:	88fb      	ldrh	r3, [r7, #6]
 8006c98:	81fb      	strh	r3, [r7, #14]
 8006c9a:	e025      	b.n	8006ce8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00b      	beq.n	8006cba <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8006ca2:	88fb      	ldrh	r3, [r7, #6]
 8006ca4:	2bff      	cmp	r3, #255	@ 0xff
 8006ca6:	d805      	bhi.n	8006cb4 <ff_convert+0x30>
 8006ca8:	88fb      	ldrh	r3, [r7, #6]
 8006caa:	3b80      	subs	r3, #128	@ 0x80
 8006cac:	4a12      	ldr	r2, [pc, #72]	@ (8006cf8 <ff_convert+0x74>)
 8006cae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cb2:	e000      	b.n	8006cb6 <ff_convert+0x32>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	81fb      	strh	r3, [r7, #14]
 8006cb8:	e016      	b.n	8006ce8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8006cba:	2300      	movs	r3, #0
 8006cbc:	81fb      	strh	r3, [r7, #14]
 8006cbe:	e009      	b.n	8006cd4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8006cc0:	89fb      	ldrh	r3, [r7, #14]
 8006cc2:	4a0d      	ldr	r2, [pc, #52]	@ (8006cf8 <ff_convert+0x74>)
 8006cc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cc8:	88fa      	ldrh	r2, [r7, #6]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d006      	beq.n	8006cdc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8006cce:	89fb      	ldrh	r3, [r7, #14]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	81fb      	strh	r3, [r7, #14]
 8006cd4:	89fb      	ldrh	r3, [r7, #14]
 8006cd6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cd8:	d9f2      	bls.n	8006cc0 <ff_convert+0x3c>
 8006cda:	e000      	b.n	8006cde <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8006cdc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8006cde:	89fb      	ldrh	r3, [r7, #14]
 8006ce0:	3380      	adds	r3, #128	@ 0x80
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8006ce8:	89fb      	ldrh	r3, [r7, #14]
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3714      	adds	r7, #20
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	080079b8 	.word	0x080079b8

08006cfc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b087      	sub	sp, #28
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	4603      	mov	r3, r0
 8006d04:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8006d06:	88fb      	ldrh	r3, [r7, #6]
 8006d08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d0c:	d201      	bcs.n	8006d12 <ff_wtoupper+0x16>
 8006d0e:	4b3e      	ldr	r3, [pc, #248]	@ (8006e08 <ff_wtoupper+0x10c>)
 8006d10:	e000      	b.n	8006d14 <ff_wtoupper+0x18>
 8006d12:	4b3e      	ldr	r3, [pc, #248]	@ (8006e0c <ff_wtoupper+0x110>)
 8006d14:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	1c9a      	adds	r2, r3, #2
 8006d1a:	617a      	str	r2, [r7, #20]
 8006d1c:	881b      	ldrh	r3, [r3, #0]
 8006d1e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8006d20:	8a7b      	ldrh	r3, [r7, #18]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d068      	beq.n	8006df8 <ff_wtoupper+0xfc>
 8006d26:	88fa      	ldrh	r2, [r7, #6]
 8006d28:	8a7b      	ldrh	r3, [r7, #18]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d364      	bcc.n	8006df8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	1c9a      	adds	r2, r3, #2
 8006d32:	617a      	str	r2, [r7, #20]
 8006d34:	881b      	ldrh	r3, [r3, #0]
 8006d36:	823b      	strh	r3, [r7, #16]
 8006d38:	8a3b      	ldrh	r3, [r7, #16]
 8006d3a:	0a1b      	lsrs	r3, r3, #8
 8006d3c:	81fb      	strh	r3, [r7, #14]
 8006d3e:	8a3b      	ldrh	r3, [r7, #16]
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8006d44:	88fa      	ldrh	r2, [r7, #6]
 8006d46:	8a79      	ldrh	r1, [r7, #18]
 8006d48:	8a3b      	ldrh	r3, [r7, #16]
 8006d4a:	440b      	add	r3, r1
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	da49      	bge.n	8006de4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8006d50:	89fb      	ldrh	r3, [r7, #14]
 8006d52:	2b08      	cmp	r3, #8
 8006d54:	d84f      	bhi.n	8006df6 <ff_wtoupper+0xfa>
 8006d56:	a201      	add	r2, pc, #4	@ (adr r2, 8006d5c <ff_wtoupper+0x60>)
 8006d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d5c:	08006d81 	.word	0x08006d81
 8006d60:	08006d93 	.word	0x08006d93
 8006d64:	08006da9 	.word	0x08006da9
 8006d68:	08006db1 	.word	0x08006db1
 8006d6c:	08006db9 	.word	0x08006db9
 8006d70:	08006dc1 	.word	0x08006dc1
 8006d74:	08006dc9 	.word	0x08006dc9
 8006d78:	08006dd1 	.word	0x08006dd1
 8006d7c:	08006dd9 	.word	0x08006dd9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8006d80:	88fa      	ldrh	r2, [r7, #6]
 8006d82:	8a7b      	ldrh	r3, [r7, #18]
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	005b      	lsls	r3, r3, #1
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	881b      	ldrh	r3, [r3, #0]
 8006d8e:	80fb      	strh	r3, [r7, #6]
 8006d90:	e027      	b.n	8006de2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8006d92:	88fa      	ldrh	r2, [r7, #6]
 8006d94:	8a7b      	ldrh	r3, [r7, #18]
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	f003 0301 	and.w	r3, r3, #1
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	88fa      	ldrh	r2, [r7, #6]
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	80fb      	strh	r3, [r7, #6]
 8006da6:	e01c      	b.n	8006de2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8006da8:	88fb      	ldrh	r3, [r7, #6]
 8006daa:	3b10      	subs	r3, #16
 8006dac:	80fb      	strh	r3, [r7, #6]
 8006dae:	e018      	b.n	8006de2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8006db0:	88fb      	ldrh	r3, [r7, #6]
 8006db2:	3b20      	subs	r3, #32
 8006db4:	80fb      	strh	r3, [r7, #6]
 8006db6:	e014      	b.n	8006de2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8006db8:	88fb      	ldrh	r3, [r7, #6]
 8006dba:	3b30      	subs	r3, #48	@ 0x30
 8006dbc:	80fb      	strh	r3, [r7, #6]
 8006dbe:	e010      	b.n	8006de2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8006dc0:	88fb      	ldrh	r3, [r7, #6]
 8006dc2:	3b1a      	subs	r3, #26
 8006dc4:	80fb      	strh	r3, [r7, #6]
 8006dc6:	e00c      	b.n	8006de2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8006dc8:	88fb      	ldrh	r3, [r7, #6]
 8006dca:	3308      	adds	r3, #8
 8006dcc:	80fb      	strh	r3, [r7, #6]
 8006dce:	e008      	b.n	8006de2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8006dd0:	88fb      	ldrh	r3, [r7, #6]
 8006dd2:	3b50      	subs	r3, #80	@ 0x50
 8006dd4:	80fb      	strh	r3, [r7, #6]
 8006dd6:	e004      	b.n	8006de2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8006dd8:	88fb      	ldrh	r3, [r7, #6]
 8006dda:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8006dde:	80fb      	strh	r3, [r7, #6]
 8006de0:	bf00      	nop
			}
			break;
 8006de2:	e008      	b.n	8006df6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8006de4:	89fb      	ldrh	r3, [r7, #14]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d195      	bne.n	8006d16 <ff_wtoupper+0x1a>
 8006dea:	8a3b      	ldrh	r3, [r7, #16]
 8006dec:	005b      	lsls	r3, r3, #1
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	4413      	add	r3, r2
 8006df2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8006df4:	e78f      	b.n	8006d16 <ff_wtoupper+0x1a>
			break;
 8006df6:	bf00      	nop
	}

	return chr;
 8006df8:	88fb      	ldrh	r3, [r7, #6]
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	371c      	adds	r7, #28
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	08007ab8 	.word	0x08007ab8
 8006e0c:	08007cac 	.word	0x08007cac

08006e10 <_vsiprintf_r>:
 8006e10:	b500      	push	{lr}
 8006e12:	b09b      	sub	sp, #108	@ 0x6c
 8006e14:	9100      	str	r1, [sp, #0]
 8006e16:	9104      	str	r1, [sp, #16]
 8006e18:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006e1c:	9105      	str	r1, [sp, #20]
 8006e1e:	9102      	str	r1, [sp, #8]
 8006e20:	4905      	ldr	r1, [pc, #20]	@ (8006e38 <_vsiprintf_r+0x28>)
 8006e22:	9103      	str	r1, [sp, #12]
 8006e24:	4669      	mov	r1, sp
 8006e26:	f000 f99b 	bl	8007160 <_svfiprintf_r>
 8006e2a:	9b00      	ldr	r3, [sp, #0]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	701a      	strb	r2, [r3, #0]
 8006e30:	b01b      	add	sp, #108	@ 0x6c
 8006e32:	f85d fb04 	ldr.w	pc, [sp], #4
 8006e36:	bf00      	nop
 8006e38:	ffff0208 	.word	0xffff0208

08006e3c <vsiprintf>:
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	460a      	mov	r2, r1
 8006e40:	4601      	mov	r1, r0
 8006e42:	4802      	ldr	r0, [pc, #8]	@ (8006e4c <vsiprintf+0x10>)
 8006e44:	6800      	ldr	r0, [r0, #0]
 8006e46:	f7ff bfe3 	b.w	8006e10 <_vsiprintf_r>
 8006e4a:	bf00      	nop
 8006e4c:	20000028 	.word	0x20000028

08006e50 <memset>:
 8006e50:	4402      	add	r2, r0
 8006e52:	4603      	mov	r3, r0
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d100      	bne.n	8006e5a <memset+0xa>
 8006e58:	4770      	bx	lr
 8006e5a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e5e:	e7f9      	b.n	8006e54 <memset+0x4>

08006e60 <__errno>:
 8006e60:	4b01      	ldr	r3, [pc, #4]	@ (8006e68 <__errno+0x8>)
 8006e62:	6818      	ldr	r0, [r3, #0]
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	20000028 	.word	0x20000028

08006e6c <__libc_init_array>:
 8006e6c:	b570      	push	{r4, r5, r6, lr}
 8006e6e:	4d0d      	ldr	r5, [pc, #52]	@ (8006ea4 <__libc_init_array+0x38>)
 8006e70:	4c0d      	ldr	r4, [pc, #52]	@ (8006ea8 <__libc_init_array+0x3c>)
 8006e72:	1b64      	subs	r4, r4, r5
 8006e74:	10a4      	asrs	r4, r4, #2
 8006e76:	2600      	movs	r6, #0
 8006e78:	42a6      	cmp	r6, r4
 8006e7a:	d109      	bne.n	8006e90 <__libc_init_array+0x24>
 8006e7c:	4d0b      	ldr	r5, [pc, #44]	@ (8006eac <__libc_init_array+0x40>)
 8006e7e:	4c0c      	ldr	r4, [pc, #48]	@ (8006eb0 <__libc_init_array+0x44>)
 8006e80:	f000 fc66 	bl	8007750 <_init>
 8006e84:	1b64      	subs	r4, r4, r5
 8006e86:	10a4      	asrs	r4, r4, #2
 8006e88:	2600      	movs	r6, #0
 8006e8a:	42a6      	cmp	r6, r4
 8006e8c:	d105      	bne.n	8006e9a <__libc_init_array+0x2e>
 8006e8e:	bd70      	pop	{r4, r5, r6, pc}
 8006e90:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e94:	4798      	blx	r3
 8006e96:	3601      	adds	r6, #1
 8006e98:	e7ee      	b.n	8006e78 <__libc_init_array+0xc>
 8006e9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e9e:	4798      	blx	r3
 8006ea0:	3601      	adds	r6, #1
 8006ea2:	e7f2      	b.n	8006e8a <__libc_init_array+0x1e>
 8006ea4:	08007da4 	.word	0x08007da4
 8006ea8:	08007da4 	.word	0x08007da4
 8006eac:	08007da4 	.word	0x08007da4
 8006eb0:	08007da8 	.word	0x08007da8

08006eb4 <__retarget_lock_acquire_recursive>:
 8006eb4:	4770      	bx	lr

08006eb6 <__retarget_lock_release_recursive>:
 8006eb6:	4770      	bx	lr

08006eb8 <_free_r>:
 8006eb8:	b538      	push	{r3, r4, r5, lr}
 8006eba:	4605      	mov	r5, r0
 8006ebc:	2900      	cmp	r1, #0
 8006ebe:	d041      	beq.n	8006f44 <_free_r+0x8c>
 8006ec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ec4:	1f0c      	subs	r4, r1, #4
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	bfb8      	it	lt
 8006eca:	18e4      	addlt	r4, r4, r3
 8006ecc:	f000 f8e0 	bl	8007090 <__malloc_lock>
 8006ed0:	4a1d      	ldr	r2, [pc, #116]	@ (8006f48 <_free_r+0x90>)
 8006ed2:	6813      	ldr	r3, [r2, #0]
 8006ed4:	b933      	cbnz	r3, 8006ee4 <_free_r+0x2c>
 8006ed6:	6063      	str	r3, [r4, #4]
 8006ed8:	6014      	str	r4, [r2, #0]
 8006eda:	4628      	mov	r0, r5
 8006edc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ee0:	f000 b8dc 	b.w	800709c <__malloc_unlock>
 8006ee4:	42a3      	cmp	r3, r4
 8006ee6:	d908      	bls.n	8006efa <_free_r+0x42>
 8006ee8:	6820      	ldr	r0, [r4, #0]
 8006eea:	1821      	adds	r1, r4, r0
 8006eec:	428b      	cmp	r3, r1
 8006eee:	bf01      	itttt	eq
 8006ef0:	6819      	ldreq	r1, [r3, #0]
 8006ef2:	685b      	ldreq	r3, [r3, #4]
 8006ef4:	1809      	addeq	r1, r1, r0
 8006ef6:	6021      	streq	r1, [r4, #0]
 8006ef8:	e7ed      	b.n	8006ed6 <_free_r+0x1e>
 8006efa:	461a      	mov	r2, r3
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	b10b      	cbz	r3, 8006f04 <_free_r+0x4c>
 8006f00:	42a3      	cmp	r3, r4
 8006f02:	d9fa      	bls.n	8006efa <_free_r+0x42>
 8006f04:	6811      	ldr	r1, [r2, #0]
 8006f06:	1850      	adds	r0, r2, r1
 8006f08:	42a0      	cmp	r0, r4
 8006f0a:	d10b      	bne.n	8006f24 <_free_r+0x6c>
 8006f0c:	6820      	ldr	r0, [r4, #0]
 8006f0e:	4401      	add	r1, r0
 8006f10:	1850      	adds	r0, r2, r1
 8006f12:	4283      	cmp	r3, r0
 8006f14:	6011      	str	r1, [r2, #0]
 8006f16:	d1e0      	bne.n	8006eda <_free_r+0x22>
 8006f18:	6818      	ldr	r0, [r3, #0]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	6053      	str	r3, [r2, #4]
 8006f1e:	4408      	add	r0, r1
 8006f20:	6010      	str	r0, [r2, #0]
 8006f22:	e7da      	b.n	8006eda <_free_r+0x22>
 8006f24:	d902      	bls.n	8006f2c <_free_r+0x74>
 8006f26:	230c      	movs	r3, #12
 8006f28:	602b      	str	r3, [r5, #0]
 8006f2a:	e7d6      	b.n	8006eda <_free_r+0x22>
 8006f2c:	6820      	ldr	r0, [r4, #0]
 8006f2e:	1821      	adds	r1, r4, r0
 8006f30:	428b      	cmp	r3, r1
 8006f32:	bf04      	itt	eq
 8006f34:	6819      	ldreq	r1, [r3, #0]
 8006f36:	685b      	ldreq	r3, [r3, #4]
 8006f38:	6063      	str	r3, [r4, #4]
 8006f3a:	bf04      	itt	eq
 8006f3c:	1809      	addeq	r1, r1, r0
 8006f3e:	6021      	streq	r1, [r4, #0]
 8006f40:	6054      	str	r4, [r2, #4]
 8006f42:	e7ca      	b.n	8006eda <_free_r+0x22>
 8006f44:	bd38      	pop	{r3, r4, r5, pc}
 8006f46:	bf00      	nop
 8006f48:	20005448 	.word	0x20005448

08006f4c <sbrk_aligned>:
 8006f4c:	b570      	push	{r4, r5, r6, lr}
 8006f4e:	4e0f      	ldr	r6, [pc, #60]	@ (8006f8c <sbrk_aligned+0x40>)
 8006f50:	460c      	mov	r4, r1
 8006f52:	6831      	ldr	r1, [r6, #0]
 8006f54:	4605      	mov	r5, r0
 8006f56:	b911      	cbnz	r1, 8006f5e <sbrk_aligned+0x12>
 8006f58:	f000 fba6 	bl	80076a8 <_sbrk_r>
 8006f5c:	6030      	str	r0, [r6, #0]
 8006f5e:	4621      	mov	r1, r4
 8006f60:	4628      	mov	r0, r5
 8006f62:	f000 fba1 	bl	80076a8 <_sbrk_r>
 8006f66:	1c43      	adds	r3, r0, #1
 8006f68:	d103      	bne.n	8006f72 <sbrk_aligned+0x26>
 8006f6a:	f04f 34ff 	mov.w	r4, #4294967295
 8006f6e:	4620      	mov	r0, r4
 8006f70:	bd70      	pop	{r4, r5, r6, pc}
 8006f72:	1cc4      	adds	r4, r0, #3
 8006f74:	f024 0403 	bic.w	r4, r4, #3
 8006f78:	42a0      	cmp	r0, r4
 8006f7a:	d0f8      	beq.n	8006f6e <sbrk_aligned+0x22>
 8006f7c:	1a21      	subs	r1, r4, r0
 8006f7e:	4628      	mov	r0, r5
 8006f80:	f000 fb92 	bl	80076a8 <_sbrk_r>
 8006f84:	3001      	adds	r0, #1
 8006f86:	d1f2      	bne.n	8006f6e <sbrk_aligned+0x22>
 8006f88:	e7ef      	b.n	8006f6a <sbrk_aligned+0x1e>
 8006f8a:	bf00      	nop
 8006f8c:	20005444 	.word	0x20005444

08006f90 <_malloc_r>:
 8006f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f94:	1ccd      	adds	r5, r1, #3
 8006f96:	f025 0503 	bic.w	r5, r5, #3
 8006f9a:	3508      	adds	r5, #8
 8006f9c:	2d0c      	cmp	r5, #12
 8006f9e:	bf38      	it	cc
 8006fa0:	250c      	movcc	r5, #12
 8006fa2:	2d00      	cmp	r5, #0
 8006fa4:	4606      	mov	r6, r0
 8006fa6:	db01      	blt.n	8006fac <_malloc_r+0x1c>
 8006fa8:	42a9      	cmp	r1, r5
 8006faa:	d904      	bls.n	8006fb6 <_malloc_r+0x26>
 8006fac:	230c      	movs	r3, #12
 8006fae:	6033      	str	r3, [r6, #0]
 8006fb0:	2000      	movs	r0, #0
 8006fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800708c <_malloc_r+0xfc>
 8006fba:	f000 f869 	bl	8007090 <__malloc_lock>
 8006fbe:	f8d8 3000 	ldr.w	r3, [r8]
 8006fc2:	461c      	mov	r4, r3
 8006fc4:	bb44      	cbnz	r4, 8007018 <_malloc_r+0x88>
 8006fc6:	4629      	mov	r1, r5
 8006fc8:	4630      	mov	r0, r6
 8006fca:	f7ff ffbf 	bl	8006f4c <sbrk_aligned>
 8006fce:	1c43      	adds	r3, r0, #1
 8006fd0:	4604      	mov	r4, r0
 8006fd2:	d158      	bne.n	8007086 <_malloc_r+0xf6>
 8006fd4:	f8d8 4000 	ldr.w	r4, [r8]
 8006fd8:	4627      	mov	r7, r4
 8006fda:	2f00      	cmp	r7, #0
 8006fdc:	d143      	bne.n	8007066 <_malloc_r+0xd6>
 8006fde:	2c00      	cmp	r4, #0
 8006fe0:	d04b      	beq.n	800707a <_malloc_r+0xea>
 8006fe2:	6823      	ldr	r3, [r4, #0]
 8006fe4:	4639      	mov	r1, r7
 8006fe6:	4630      	mov	r0, r6
 8006fe8:	eb04 0903 	add.w	r9, r4, r3
 8006fec:	f000 fb5c 	bl	80076a8 <_sbrk_r>
 8006ff0:	4581      	cmp	r9, r0
 8006ff2:	d142      	bne.n	800707a <_malloc_r+0xea>
 8006ff4:	6821      	ldr	r1, [r4, #0]
 8006ff6:	1a6d      	subs	r5, r5, r1
 8006ff8:	4629      	mov	r1, r5
 8006ffa:	4630      	mov	r0, r6
 8006ffc:	f7ff ffa6 	bl	8006f4c <sbrk_aligned>
 8007000:	3001      	adds	r0, #1
 8007002:	d03a      	beq.n	800707a <_malloc_r+0xea>
 8007004:	6823      	ldr	r3, [r4, #0]
 8007006:	442b      	add	r3, r5
 8007008:	6023      	str	r3, [r4, #0]
 800700a:	f8d8 3000 	ldr.w	r3, [r8]
 800700e:	685a      	ldr	r2, [r3, #4]
 8007010:	bb62      	cbnz	r2, 800706c <_malloc_r+0xdc>
 8007012:	f8c8 7000 	str.w	r7, [r8]
 8007016:	e00f      	b.n	8007038 <_malloc_r+0xa8>
 8007018:	6822      	ldr	r2, [r4, #0]
 800701a:	1b52      	subs	r2, r2, r5
 800701c:	d420      	bmi.n	8007060 <_malloc_r+0xd0>
 800701e:	2a0b      	cmp	r2, #11
 8007020:	d917      	bls.n	8007052 <_malloc_r+0xc2>
 8007022:	1961      	adds	r1, r4, r5
 8007024:	42a3      	cmp	r3, r4
 8007026:	6025      	str	r5, [r4, #0]
 8007028:	bf18      	it	ne
 800702a:	6059      	strne	r1, [r3, #4]
 800702c:	6863      	ldr	r3, [r4, #4]
 800702e:	bf08      	it	eq
 8007030:	f8c8 1000 	streq.w	r1, [r8]
 8007034:	5162      	str	r2, [r4, r5]
 8007036:	604b      	str	r3, [r1, #4]
 8007038:	4630      	mov	r0, r6
 800703a:	f000 f82f 	bl	800709c <__malloc_unlock>
 800703e:	f104 000b 	add.w	r0, r4, #11
 8007042:	1d23      	adds	r3, r4, #4
 8007044:	f020 0007 	bic.w	r0, r0, #7
 8007048:	1ac2      	subs	r2, r0, r3
 800704a:	bf1c      	itt	ne
 800704c:	1a1b      	subne	r3, r3, r0
 800704e:	50a3      	strne	r3, [r4, r2]
 8007050:	e7af      	b.n	8006fb2 <_malloc_r+0x22>
 8007052:	6862      	ldr	r2, [r4, #4]
 8007054:	42a3      	cmp	r3, r4
 8007056:	bf0c      	ite	eq
 8007058:	f8c8 2000 	streq.w	r2, [r8]
 800705c:	605a      	strne	r2, [r3, #4]
 800705e:	e7eb      	b.n	8007038 <_malloc_r+0xa8>
 8007060:	4623      	mov	r3, r4
 8007062:	6864      	ldr	r4, [r4, #4]
 8007064:	e7ae      	b.n	8006fc4 <_malloc_r+0x34>
 8007066:	463c      	mov	r4, r7
 8007068:	687f      	ldr	r7, [r7, #4]
 800706a:	e7b6      	b.n	8006fda <_malloc_r+0x4a>
 800706c:	461a      	mov	r2, r3
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	42a3      	cmp	r3, r4
 8007072:	d1fb      	bne.n	800706c <_malloc_r+0xdc>
 8007074:	2300      	movs	r3, #0
 8007076:	6053      	str	r3, [r2, #4]
 8007078:	e7de      	b.n	8007038 <_malloc_r+0xa8>
 800707a:	230c      	movs	r3, #12
 800707c:	6033      	str	r3, [r6, #0]
 800707e:	4630      	mov	r0, r6
 8007080:	f000 f80c 	bl	800709c <__malloc_unlock>
 8007084:	e794      	b.n	8006fb0 <_malloc_r+0x20>
 8007086:	6005      	str	r5, [r0, #0]
 8007088:	e7d6      	b.n	8007038 <_malloc_r+0xa8>
 800708a:	bf00      	nop
 800708c:	20005448 	.word	0x20005448

08007090 <__malloc_lock>:
 8007090:	4801      	ldr	r0, [pc, #4]	@ (8007098 <__malloc_lock+0x8>)
 8007092:	f7ff bf0f 	b.w	8006eb4 <__retarget_lock_acquire_recursive>
 8007096:	bf00      	nop
 8007098:	20005440 	.word	0x20005440

0800709c <__malloc_unlock>:
 800709c:	4801      	ldr	r0, [pc, #4]	@ (80070a4 <__malloc_unlock+0x8>)
 800709e:	f7ff bf0a 	b.w	8006eb6 <__retarget_lock_release_recursive>
 80070a2:	bf00      	nop
 80070a4:	20005440 	.word	0x20005440

080070a8 <__ssputs_r>:
 80070a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070ac:	688e      	ldr	r6, [r1, #8]
 80070ae:	461f      	mov	r7, r3
 80070b0:	42be      	cmp	r6, r7
 80070b2:	680b      	ldr	r3, [r1, #0]
 80070b4:	4682      	mov	sl, r0
 80070b6:	460c      	mov	r4, r1
 80070b8:	4690      	mov	r8, r2
 80070ba:	d82d      	bhi.n	8007118 <__ssputs_r+0x70>
 80070bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80070c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80070c4:	d026      	beq.n	8007114 <__ssputs_r+0x6c>
 80070c6:	6965      	ldr	r5, [r4, #20]
 80070c8:	6909      	ldr	r1, [r1, #16]
 80070ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80070ce:	eba3 0901 	sub.w	r9, r3, r1
 80070d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80070d6:	1c7b      	adds	r3, r7, #1
 80070d8:	444b      	add	r3, r9
 80070da:	106d      	asrs	r5, r5, #1
 80070dc:	429d      	cmp	r5, r3
 80070de:	bf38      	it	cc
 80070e0:	461d      	movcc	r5, r3
 80070e2:	0553      	lsls	r3, r2, #21
 80070e4:	d527      	bpl.n	8007136 <__ssputs_r+0x8e>
 80070e6:	4629      	mov	r1, r5
 80070e8:	f7ff ff52 	bl	8006f90 <_malloc_r>
 80070ec:	4606      	mov	r6, r0
 80070ee:	b360      	cbz	r0, 800714a <__ssputs_r+0xa2>
 80070f0:	6921      	ldr	r1, [r4, #16]
 80070f2:	464a      	mov	r2, r9
 80070f4:	f000 fae8 	bl	80076c8 <memcpy>
 80070f8:	89a3      	ldrh	r3, [r4, #12]
 80070fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80070fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007102:	81a3      	strh	r3, [r4, #12]
 8007104:	6126      	str	r6, [r4, #16]
 8007106:	6165      	str	r5, [r4, #20]
 8007108:	444e      	add	r6, r9
 800710a:	eba5 0509 	sub.w	r5, r5, r9
 800710e:	6026      	str	r6, [r4, #0]
 8007110:	60a5      	str	r5, [r4, #8]
 8007112:	463e      	mov	r6, r7
 8007114:	42be      	cmp	r6, r7
 8007116:	d900      	bls.n	800711a <__ssputs_r+0x72>
 8007118:	463e      	mov	r6, r7
 800711a:	6820      	ldr	r0, [r4, #0]
 800711c:	4632      	mov	r2, r6
 800711e:	4641      	mov	r1, r8
 8007120:	f000 faa8 	bl	8007674 <memmove>
 8007124:	68a3      	ldr	r3, [r4, #8]
 8007126:	1b9b      	subs	r3, r3, r6
 8007128:	60a3      	str	r3, [r4, #8]
 800712a:	6823      	ldr	r3, [r4, #0]
 800712c:	4433      	add	r3, r6
 800712e:	6023      	str	r3, [r4, #0]
 8007130:	2000      	movs	r0, #0
 8007132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007136:	462a      	mov	r2, r5
 8007138:	f000 fad4 	bl	80076e4 <_realloc_r>
 800713c:	4606      	mov	r6, r0
 800713e:	2800      	cmp	r0, #0
 8007140:	d1e0      	bne.n	8007104 <__ssputs_r+0x5c>
 8007142:	6921      	ldr	r1, [r4, #16]
 8007144:	4650      	mov	r0, sl
 8007146:	f7ff feb7 	bl	8006eb8 <_free_r>
 800714a:	230c      	movs	r3, #12
 800714c:	f8ca 3000 	str.w	r3, [sl]
 8007150:	89a3      	ldrh	r3, [r4, #12]
 8007152:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007156:	81a3      	strh	r3, [r4, #12]
 8007158:	f04f 30ff 	mov.w	r0, #4294967295
 800715c:	e7e9      	b.n	8007132 <__ssputs_r+0x8a>
	...

08007160 <_svfiprintf_r>:
 8007160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007164:	4698      	mov	r8, r3
 8007166:	898b      	ldrh	r3, [r1, #12]
 8007168:	061b      	lsls	r3, r3, #24
 800716a:	b09d      	sub	sp, #116	@ 0x74
 800716c:	4607      	mov	r7, r0
 800716e:	460d      	mov	r5, r1
 8007170:	4614      	mov	r4, r2
 8007172:	d510      	bpl.n	8007196 <_svfiprintf_r+0x36>
 8007174:	690b      	ldr	r3, [r1, #16]
 8007176:	b973      	cbnz	r3, 8007196 <_svfiprintf_r+0x36>
 8007178:	2140      	movs	r1, #64	@ 0x40
 800717a:	f7ff ff09 	bl	8006f90 <_malloc_r>
 800717e:	6028      	str	r0, [r5, #0]
 8007180:	6128      	str	r0, [r5, #16]
 8007182:	b930      	cbnz	r0, 8007192 <_svfiprintf_r+0x32>
 8007184:	230c      	movs	r3, #12
 8007186:	603b      	str	r3, [r7, #0]
 8007188:	f04f 30ff 	mov.w	r0, #4294967295
 800718c:	b01d      	add	sp, #116	@ 0x74
 800718e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007192:	2340      	movs	r3, #64	@ 0x40
 8007194:	616b      	str	r3, [r5, #20]
 8007196:	2300      	movs	r3, #0
 8007198:	9309      	str	r3, [sp, #36]	@ 0x24
 800719a:	2320      	movs	r3, #32
 800719c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80071a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80071a4:	2330      	movs	r3, #48	@ 0x30
 80071a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007344 <_svfiprintf_r+0x1e4>
 80071aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80071ae:	f04f 0901 	mov.w	r9, #1
 80071b2:	4623      	mov	r3, r4
 80071b4:	469a      	mov	sl, r3
 80071b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071ba:	b10a      	cbz	r2, 80071c0 <_svfiprintf_r+0x60>
 80071bc:	2a25      	cmp	r2, #37	@ 0x25
 80071be:	d1f9      	bne.n	80071b4 <_svfiprintf_r+0x54>
 80071c0:	ebba 0b04 	subs.w	fp, sl, r4
 80071c4:	d00b      	beq.n	80071de <_svfiprintf_r+0x7e>
 80071c6:	465b      	mov	r3, fp
 80071c8:	4622      	mov	r2, r4
 80071ca:	4629      	mov	r1, r5
 80071cc:	4638      	mov	r0, r7
 80071ce:	f7ff ff6b 	bl	80070a8 <__ssputs_r>
 80071d2:	3001      	adds	r0, #1
 80071d4:	f000 80a7 	beq.w	8007326 <_svfiprintf_r+0x1c6>
 80071d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071da:	445a      	add	r2, fp
 80071dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80071de:	f89a 3000 	ldrb.w	r3, [sl]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f000 809f 	beq.w	8007326 <_svfiprintf_r+0x1c6>
 80071e8:	2300      	movs	r3, #0
 80071ea:	f04f 32ff 	mov.w	r2, #4294967295
 80071ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071f2:	f10a 0a01 	add.w	sl, sl, #1
 80071f6:	9304      	str	r3, [sp, #16]
 80071f8:	9307      	str	r3, [sp, #28]
 80071fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80071fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8007200:	4654      	mov	r4, sl
 8007202:	2205      	movs	r2, #5
 8007204:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007208:	484e      	ldr	r0, [pc, #312]	@ (8007344 <_svfiprintf_r+0x1e4>)
 800720a:	f7f8 ffe9 	bl	80001e0 <memchr>
 800720e:	9a04      	ldr	r2, [sp, #16]
 8007210:	b9d8      	cbnz	r0, 800724a <_svfiprintf_r+0xea>
 8007212:	06d0      	lsls	r0, r2, #27
 8007214:	bf44      	itt	mi
 8007216:	2320      	movmi	r3, #32
 8007218:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800721c:	0711      	lsls	r1, r2, #28
 800721e:	bf44      	itt	mi
 8007220:	232b      	movmi	r3, #43	@ 0x2b
 8007222:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007226:	f89a 3000 	ldrb.w	r3, [sl]
 800722a:	2b2a      	cmp	r3, #42	@ 0x2a
 800722c:	d015      	beq.n	800725a <_svfiprintf_r+0xfa>
 800722e:	9a07      	ldr	r2, [sp, #28]
 8007230:	4654      	mov	r4, sl
 8007232:	2000      	movs	r0, #0
 8007234:	f04f 0c0a 	mov.w	ip, #10
 8007238:	4621      	mov	r1, r4
 800723a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800723e:	3b30      	subs	r3, #48	@ 0x30
 8007240:	2b09      	cmp	r3, #9
 8007242:	d94b      	bls.n	80072dc <_svfiprintf_r+0x17c>
 8007244:	b1b0      	cbz	r0, 8007274 <_svfiprintf_r+0x114>
 8007246:	9207      	str	r2, [sp, #28]
 8007248:	e014      	b.n	8007274 <_svfiprintf_r+0x114>
 800724a:	eba0 0308 	sub.w	r3, r0, r8
 800724e:	fa09 f303 	lsl.w	r3, r9, r3
 8007252:	4313      	orrs	r3, r2
 8007254:	9304      	str	r3, [sp, #16]
 8007256:	46a2      	mov	sl, r4
 8007258:	e7d2      	b.n	8007200 <_svfiprintf_r+0xa0>
 800725a:	9b03      	ldr	r3, [sp, #12]
 800725c:	1d19      	adds	r1, r3, #4
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	9103      	str	r1, [sp, #12]
 8007262:	2b00      	cmp	r3, #0
 8007264:	bfbb      	ittet	lt
 8007266:	425b      	neglt	r3, r3
 8007268:	f042 0202 	orrlt.w	r2, r2, #2
 800726c:	9307      	strge	r3, [sp, #28]
 800726e:	9307      	strlt	r3, [sp, #28]
 8007270:	bfb8      	it	lt
 8007272:	9204      	strlt	r2, [sp, #16]
 8007274:	7823      	ldrb	r3, [r4, #0]
 8007276:	2b2e      	cmp	r3, #46	@ 0x2e
 8007278:	d10a      	bne.n	8007290 <_svfiprintf_r+0x130>
 800727a:	7863      	ldrb	r3, [r4, #1]
 800727c:	2b2a      	cmp	r3, #42	@ 0x2a
 800727e:	d132      	bne.n	80072e6 <_svfiprintf_r+0x186>
 8007280:	9b03      	ldr	r3, [sp, #12]
 8007282:	1d1a      	adds	r2, r3, #4
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	9203      	str	r2, [sp, #12]
 8007288:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800728c:	3402      	adds	r4, #2
 800728e:	9305      	str	r3, [sp, #20]
 8007290:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007354 <_svfiprintf_r+0x1f4>
 8007294:	7821      	ldrb	r1, [r4, #0]
 8007296:	2203      	movs	r2, #3
 8007298:	4650      	mov	r0, sl
 800729a:	f7f8 ffa1 	bl	80001e0 <memchr>
 800729e:	b138      	cbz	r0, 80072b0 <_svfiprintf_r+0x150>
 80072a0:	9b04      	ldr	r3, [sp, #16]
 80072a2:	eba0 000a 	sub.w	r0, r0, sl
 80072a6:	2240      	movs	r2, #64	@ 0x40
 80072a8:	4082      	lsls	r2, r0
 80072aa:	4313      	orrs	r3, r2
 80072ac:	3401      	adds	r4, #1
 80072ae:	9304      	str	r3, [sp, #16]
 80072b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072b4:	4824      	ldr	r0, [pc, #144]	@ (8007348 <_svfiprintf_r+0x1e8>)
 80072b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80072ba:	2206      	movs	r2, #6
 80072bc:	f7f8 ff90 	bl	80001e0 <memchr>
 80072c0:	2800      	cmp	r0, #0
 80072c2:	d036      	beq.n	8007332 <_svfiprintf_r+0x1d2>
 80072c4:	4b21      	ldr	r3, [pc, #132]	@ (800734c <_svfiprintf_r+0x1ec>)
 80072c6:	bb1b      	cbnz	r3, 8007310 <_svfiprintf_r+0x1b0>
 80072c8:	9b03      	ldr	r3, [sp, #12]
 80072ca:	3307      	adds	r3, #7
 80072cc:	f023 0307 	bic.w	r3, r3, #7
 80072d0:	3308      	adds	r3, #8
 80072d2:	9303      	str	r3, [sp, #12]
 80072d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072d6:	4433      	add	r3, r6
 80072d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80072da:	e76a      	b.n	80071b2 <_svfiprintf_r+0x52>
 80072dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80072e0:	460c      	mov	r4, r1
 80072e2:	2001      	movs	r0, #1
 80072e4:	e7a8      	b.n	8007238 <_svfiprintf_r+0xd8>
 80072e6:	2300      	movs	r3, #0
 80072e8:	3401      	adds	r4, #1
 80072ea:	9305      	str	r3, [sp, #20]
 80072ec:	4619      	mov	r1, r3
 80072ee:	f04f 0c0a 	mov.w	ip, #10
 80072f2:	4620      	mov	r0, r4
 80072f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072f8:	3a30      	subs	r2, #48	@ 0x30
 80072fa:	2a09      	cmp	r2, #9
 80072fc:	d903      	bls.n	8007306 <_svfiprintf_r+0x1a6>
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d0c6      	beq.n	8007290 <_svfiprintf_r+0x130>
 8007302:	9105      	str	r1, [sp, #20]
 8007304:	e7c4      	b.n	8007290 <_svfiprintf_r+0x130>
 8007306:	fb0c 2101 	mla	r1, ip, r1, r2
 800730a:	4604      	mov	r4, r0
 800730c:	2301      	movs	r3, #1
 800730e:	e7f0      	b.n	80072f2 <_svfiprintf_r+0x192>
 8007310:	ab03      	add	r3, sp, #12
 8007312:	9300      	str	r3, [sp, #0]
 8007314:	462a      	mov	r2, r5
 8007316:	4b0e      	ldr	r3, [pc, #56]	@ (8007350 <_svfiprintf_r+0x1f0>)
 8007318:	a904      	add	r1, sp, #16
 800731a:	4638      	mov	r0, r7
 800731c:	f3af 8000 	nop.w
 8007320:	1c42      	adds	r2, r0, #1
 8007322:	4606      	mov	r6, r0
 8007324:	d1d6      	bne.n	80072d4 <_svfiprintf_r+0x174>
 8007326:	89ab      	ldrh	r3, [r5, #12]
 8007328:	065b      	lsls	r3, r3, #25
 800732a:	f53f af2d 	bmi.w	8007188 <_svfiprintf_r+0x28>
 800732e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007330:	e72c      	b.n	800718c <_svfiprintf_r+0x2c>
 8007332:	ab03      	add	r3, sp, #12
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	462a      	mov	r2, r5
 8007338:	4b05      	ldr	r3, [pc, #20]	@ (8007350 <_svfiprintf_r+0x1f0>)
 800733a:	a904      	add	r1, sp, #16
 800733c:	4638      	mov	r0, r7
 800733e:	f000 f879 	bl	8007434 <_printf_i>
 8007342:	e7ed      	b.n	8007320 <_svfiprintf_r+0x1c0>
 8007344:	08007d68 	.word	0x08007d68
 8007348:	08007d72 	.word	0x08007d72
 800734c:	00000000 	.word	0x00000000
 8007350:	080070a9 	.word	0x080070a9
 8007354:	08007d6e 	.word	0x08007d6e

08007358 <_printf_common>:
 8007358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800735c:	4616      	mov	r6, r2
 800735e:	4698      	mov	r8, r3
 8007360:	688a      	ldr	r2, [r1, #8]
 8007362:	690b      	ldr	r3, [r1, #16]
 8007364:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007368:	4293      	cmp	r3, r2
 800736a:	bfb8      	it	lt
 800736c:	4613      	movlt	r3, r2
 800736e:	6033      	str	r3, [r6, #0]
 8007370:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007374:	4607      	mov	r7, r0
 8007376:	460c      	mov	r4, r1
 8007378:	b10a      	cbz	r2, 800737e <_printf_common+0x26>
 800737a:	3301      	adds	r3, #1
 800737c:	6033      	str	r3, [r6, #0]
 800737e:	6823      	ldr	r3, [r4, #0]
 8007380:	0699      	lsls	r1, r3, #26
 8007382:	bf42      	ittt	mi
 8007384:	6833      	ldrmi	r3, [r6, #0]
 8007386:	3302      	addmi	r3, #2
 8007388:	6033      	strmi	r3, [r6, #0]
 800738a:	6825      	ldr	r5, [r4, #0]
 800738c:	f015 0506 	ands.w	r5, r5, #6
 8007390:	d106      	bne.n	80073a0 <_printf_common+0x48>
 8007392:	f104 0a19 	add.w	sl, r4, #25
 8007396:	68e3      	ldr	r3, [r4, #12]
 8007398:	6832      	ldr	r2, [r6, #0]
 800739a:	1a9b      	subs	r3, r3, r2
 800739c:	42ab      	cmp	r3, r5
 800739e:	dc26      	bgt.n	80073ee <_printf_common+0x96>
 80073a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80073a4:	6822      	ldr	r2, [r4, #0]
 80073a6:	3b00      	subs	r3, #0
 80073a8:	bf18      	it	ne
 80073aa:	2301      	movne	r3, #1
 80073ac:	0692      	lsls	r2, r2, #26
 80073ae:	d42b      	bmi.n	8007408 <_printf_common+0xb0>
 80073b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80073b4:	4641      	mov	r1, r8
 80073b6:	4638      	mov	r0, r7
 80073b8:	47c8      	blx	r9
 80073ba:	3001      	adds	r0, #1
 80073bc:	d01e      	beq.n	80073fc <_printf_common+0xa4>
 80073be:	6823      	ldr	r3, [r4, #0]
 80073c0:	6922      	ldr	r2, [r4, #16]
 80073c2:	f003 0306 	and.w	r3, r3, #6
 80073c6:	2b04      	cmp	r3, #4
 80073c8:	bf02      	ittt	eq
 80073ca:	68e5      	ldreq	r5, [r4, #12]
 80073cc:	6833      	ldreq	r3, [r6, #0]
 80073ce:	1aed      	subeq	r5, r5, r3
 80073d0:	68a3      	ldr	r3, [r4, #8]
 80073d2:	bf0c      	ite	eq
 80073d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073d8:	2500      	movne	r5, #0
 80073da:	4293      	cmp	r3, r2
 80073dc:	bfc4      	itt	gt
 80073de:	1a9b      	subgt	r3, r3, r2
 80073e0:	18ed      	addgt	r5, r5, r3
 80073e2:	2600      	movs	r6, #0
 80073e4:	341a      	adds	r4, #26
 80073e6:	42b5      	cmp	r5, r6
 80073e8:	d11a      	bne.n	8007420 <_printf_common+0xc8>
 80073ea:	2000      	movs	r0, #0
 80073ec:	e008      	b.n	8007400 <_printf_common+0xa8>
 80073ee:	2301      	movs	r3, #1
 80073f0:	4652      	mov	r2, sl
 80073f2:	4641      	mov	r1, r8
 80073f4:	4638      	mov	r0, r7
 80073f6:	47c8      	blx	r9
 80073f8:	3001      	adds	r0, #1
 80073fa:	d103      	bne.n	8007404 <_printf_common+0xac>
 80073fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007404:	3501      	adds	r5, #1
 8007406:	e7c6      	b.n	8007396 <_printf_common+0x3e>
 8007408:	18e1      	adds	r1, r4, r3
 800740a:	1c5a      	adds	r2, r3, #1
 800740c:	2030      	movs	r0, #48	@ 0x30
 800740e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007412:	4422      	add	r2, r4
 8007414:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007418:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800741c:	3302      	adds	r3, #2
 800741e:	e7c7      	b.n	80073b0 <_printf_common+0x58>
 8007420:	2301      	movs	r3, #1
 8007422:	4622      	mov	r2, r4
 8007424:	4641      	mov	r1, r8
 8007426:	4638      	mov	r0, r7
 8007428:	47c8      	blx	r9
 800742a:	3001      	adds	r0, #1
 800742c:	d0e6      	beq.n	80073fc <_printf_common+0xa4>
 800742e:	3601      	adds	r6, #1
 8007430:	e7d9      	b.n	80073e6 <_printf_common+0x8e>
	...

08007434 <_printf_i>:
 8007434:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007438:	7e0f      	ldrb	r7, [r1, #24]
 800743a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800743c:	2f78      	cmp	r7, #120	@ 0x78
 800743e:	4691      	mov	r9, r2
 8007440:	4680      	mov	r8, r0
 8007442:	460c      	mov	r4, r1
 8007444:	469a      	mov	sl, r3
 8007446:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800744a:	d807      	bhi.n	800745c <_printf_i+0x28>
 800744c:	2f62      	cmp	r7, #98	@ 0x62
 800744e:	d80a      	bhi.n	8007466 <_printf_i+0x32>
 8007450:	2f00      	cmp	r7, #0
 8007452:	f000 80d2 	beq.w	80075fa <_printf_i+0x1c6>
 8007456:	2f58      	cmp	r7, #88	@ 0x58
 8007458:	f000 80b9 	beq.w	80075ce <_printf_i+0x19a>
 800745c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007460:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007464:	e03a      	b.n	80074dc <_printf_i+0xa8>
 8007466:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800746a:	2b15      	cmp	r3, #21
 800746c:	d8f6      	bhi.n	800745c <_printf_i+0x28>
 800746e:	a101      	add	r1, pc, #4	@ (adr r1, 8007474 <_printf_i+0x40>)
 8007470:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007474:	080074cd 	.word	0x080074cd
 8007478:	080074e1 	.word	0x080074e1
 800747c:	0800745d 	.word	0x0800745d
 8007480:	0800745d 	.word	0x0800745d
 8007484:	0800745d 	.word	0x0800745d
 8007488:	0800745d 	.word	0x0800745d
 800748c:	080074e1 	.word	0x080074e1
 8007490:	0800745d 	.word	0x0800745d
 8007494:	0800745d 	.word	0x0800745d
 8007498:	0800745d 	.word	0x0800745d
 800749c:	0800745d 	.word	0x0800745d
 80074a0:	080075e1 	.word	0x080075e1
 80074a4:	0800750b 	.word	0x0800750b
 80074a8:	0800759b 	.word	0x0800759b
 80074ac:	0800745d 	.word	0x0800745d
 80074b0:	0800745d 	.word	0x0800745d
 80074b4:	08007603 	.word	0x08007603
 80074b8:	0800745d 	.word	0x0800745d
 80074bc:	0800750b 	.word	0x0800750b
 80074c0:	0800745d 	.word	0x0800745d
 80074c4:	0800745d 	.word	0x0800745d
 80074c8:	080075a3 	.word	0x080075a3
 80074cc:	6833      	ldr	r3, [r6, #0]
 80074ce:	1d1a      	adds	r2, r3, #4
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	6032      	str	r2, [r6, #0]
 80074d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80074d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80074dc:	2301      	movs	r3, #1
 80074de:	e09d      	b.n	800761c <_printf_i+0x1e8>
 80074e0:	6833      	ldr	r3, [r6, #0]
 80074e2:	6820      	ldr	r0, [r4, #0]
 80074e4:	1d19      	adds	r1, r3, #4
 80074e6:	6031      	str	r1, [r6, #0]
 80074e8:	0606      	lsls	r6, r0, #24
 80074ea:	d501      	bpl.n	80074f0 <_printf_i+0xbc>
 80074ec:	681d      	ldr	r5, [r3, #0]
 80074ee:	e003      	b.n	80074f8 <_printf_i+0xc4>
 80074f0:	0645      	lsls	r5, r0, #25
 80074f2:	d5fb      	bpl.n	80074ec <_printf_i+0xb8>
 80074f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80074f8:	2d00      	cmp	r5, #0
 80074fa:	da03      	bge.n	8007504 <_printf_i+0xd0>
 80074fc:	232d      	movs	r3, #45	@ 0x2d
 80074fe:	426d      	negs	r5, r5
 8007500:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007504:	4859      	ldr	r0, [pc, #356]	@ (800766c <_printf_i+0x238>)
 8007506:	230a      	movs	r3, #10
 8007508:	e011      	b.n	800752e <_printf_i+0xfa>
 800750a:	6821      	ldr	r1, [r4, #0]
 800750c:	6833      	ldr	r3, [r6, #0]
 800750e:	0608      	lsls	r0, r1, #24
 8007510:	f853 5b04 	ldr.w	r5, [r3], #4
 8007514:	d402      	bmi.n	800751c <_printf_i+0xe8>
 8007516:	0649      	lsls	r1, r1, #25
 8007518:	bf48      	it	mi
 800751a:	b2ad      	uxthmi	r5, r5
 800751c:	2f6f      	cmp	r7, #111	@ 0x6f
 800751e:	4853      	ldr	r0, [pc, #332]	@ (800766c <_printf_i+0x238>)
 8007520:	6033      	str	r3, [r6, #0]
 8007522:	bf14      	ite	ne
 8007524:	230a      	movne	r3, #10
 8007526:	2308      	moveq	r3, #8
 8007528:	2100      	movs	r1, #0
 800752a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800752e:	6866      	ldr	r6, [r4, #4]
 8007530:	60a6      	str	r6, [r4, #8]
 8007532:	2e00      	cmp	r6, #0
 8007534:	bfa2      	ittt	ge
 8007536:	6821      	ldrge	r1, [r4, #0]
 8007538:	f021 0104 	bicge.w	r1, r1, #4
 800753c:	6021      	strge	r1, [r4, #0]
 800753e:	b90d      	cbnz	r5, 8007544 <_printf_i+0x110>
 8007540:	2e00      	cmp	r6, #0
 8007542:	d04b      	beq.n	80075dc <_printf_i+0x1a8>
 8007544:	4616      	mov	r6, r2
 8007546:	fbb5 f1f3 	udiv	r1, r5, r3
 800754a:	fb03 5711 	mls	r7, r3, r1, r5
 800754e:	5dc7      	ldrb	r7, [r0, r7]
 8007550:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007554:	462f      	mov	r7, r5
 8007556:	42bb      	cmp	r3, r7
 8007558:	460d      	mov	r5, r1
 800755a:	d9f4      	bls.n	8007546 <_printf_i+0x112>
 800755c:	2b08      	cmp	r3, #8
 800755e:	d10b      	bne.n	8007578 <_printf_i+0x144>
 8007560:	6823      	ldr	r3, [r4, #0]
 8007562:	07df      	lsls	r7, r3, #31
 8007564:	d508      	bpl.n	8007578 <_printf_i+0x144>
 8007566:	6923      	ldr	r3, [r4, #16]
 8007568:	6861      	ldr	r1, [r4, #4]
 800756a:	4299      	cmp	r1, r3
 800756c:	bfde      	ittt	le
 800756e:	2330      	movle	r3, #48	@ 0x30
 8007570:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007574:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007578:	1b92      	subs	r2, r2, r6
 800757a:	6122      	str	r2, [r4, #16]
 800757c:	f8cd a000 	str.w	sl, [sp]
 8007580:	464b      	mov	r3, r9
 8007582:	aa03      	add	r2, sp, #12
 8007584:	4621      	mov	r1, r4
 8007586:	4640      	mov	r0, r8
 8007588:	f7ff fee6 	bl	8007358 <_printf_common>
 800758c:	3001      	adds	r0, #1
 800758e:	d14a      	bne.n	8007626 <_printf_i+0x1f2>
 8007590:	f04f 30ff 	mov.w	r0, #4294967295
 8007594:	b004      	add	sp, #16
 8007596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800759a:	6823      	ldr	r3, [r4, #0]
 800759c:	f043 0320 	orr.w	r3, r3, #32
 80075a0:	6023      	str	r3, [r4, #0]
 80075a2:	4833      	ldr	r0, [pc, #204]	@ (8007670 <_printf_i+0x23c>)
 80075a4:	2778      	movs	r7, #120	@ 0x78
 80075a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80075aa:	6823      	ldr	r3, [r4, #0]
 80075ac:	6831      	ldr	r1, [r6, #0]
 80075ae:	061f      	lsls	r7, r3, #24
 80075b0:	f851 5b04 	ldr.w	r5, [r1], #4
 80075b4:	d402      	bmi.n	80075bc <_printf_i+0x188>
 80075b6:	065f      	lsls	r7, r3, #25
 80075b8:	bf48      	it	mi
 80075ba:	b2ad      	uxthmi	r5, r5
 80075bc:	6031      	str	r1, [r6, #0]
 80075be:	07d9      	lsls	r1, r3, #31
 80075c0:	bf44      	itt	mi
 80075c2:	f043 0320 	orrmi.w	r3, r3, #32
 80075c6:	6023      	strmi	r3, [r4, #0]
 80075c8:	b11d      	cbz	r5, 80075d2 <_printf_i+0x19e>
 80075ca:	2310      	movs	r3, #16
 80075cc:	e7ac      	b.n	8007528 <_printf_i+0xf4>
 80075ce:	4827      	ldr	r0, [pc, #156]	@ (800766c <_printf_i+0x238>)
 80075d0:	e7e9      	b.n	80075a6 <_printf_i+0x172>
 80075d2:	6823      	ldr	r3, [r4, #0]
 80075d4:	f023 0320 	bic.w	r3, r3, #32
 80075d8:	6023      	str	r3, [r4, #0]
 80075da:	e7f6      	b.n	80075ca <_printf_i+0x196>
 80075dc:	4616      	mov	r6, r2
 80075de:	e7bd      	b.n	800755c <_printf_i+0x128>
 80075e0:	6833      	ldr	r3, [r6, #0]
 80075e2:	6825      	ldr	r5, [r4, #0]
 80075e4:	6961      	ldr	r1, [r4, #20]
 80075e6:	1d18      	adds	r0, r3, #4
 80075e8:	6030      	str	r0, [r6, #0]
 80075ea:	062e      	lsls	r6, r5, #24
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	d501      	bpl.n	80075f4 <_printf_i+0x1c0>
 80075f0:	6019      	str	r1, [r3, #0]
 80075f2:	e002      	b.n	80075fa <_printf_i+0x1c6>
 80075f4:	0668      	lsls	r0, r5, #25
 80075f6:	d5fb      	bpl.n	80075f0 <_printf_i+0x1bc>
 80075f8:	8019      	strh	r1, [r3, #0]
 80075fa:	2300      	movs	r3, #0
 80075fc:	6123      	str	r3, [r4, #16]
 80075fe:	4616      	mov	r6, r2
 8007600:	e7bc      	b.n	800757c <_printf_i+0x148>
 8007602:	6833      	ldr	r3, [r6, #0]
 8007604:	1d1a      	adds	r2, r3, #4
 8007606:	6032      	str	r2, [r6, #0]
 8007608:	681e      	ldr	r6, [r3, #0]
 800760a:	6862      	ldr	r2, [r4, #4]
 800760c:	2100      	movs	r1, #0
 800760e:	4630      	mov	r0, r6
 8007610:	f7f8 fde6 	bl	80001e0 <memchr>
 8007614:	b108      	cbz	r0, 800761a <_printf_i+0x1e6>
 8007616:	1b80      	subs	r0, r0, r6
 8007618:	6060      	str	r0, [r4, #4]
 800761a:	6863      	ldr	r3, [r4, #4]
 800761c:	6123      	str	r3, [r4, #16]
 800761e:	2300      	movs	r3, #0
 8007620:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007624:	e7aa      	b.n	800757c <_printf_i+0x148>
 8007626:	6923      	ldr	r3, [r4, #16]
 8007628:	4632      	mov	r2, r6
 800762a:	4649      	mov	r1, r9
 800762c:	4640      	mov	r0, r8
 800762e:	47d0      	blx	sl
 8007630:	3001      	adds	r0, #1
 8007632:	d0ad      	beq.n	8007590 <_printf_i+0x15c>
 8007634:	6823      	ldr	r3, [r4, #0]
 8007636:	079b      	lsls	r3, r3, #30
 8007638:	d413      	bmi.n	8007662 <_printf_i+0x22e>
 800763a:	68e0      	ldr	r0, [r4, #12]
 800763c:	9b03      	ldr	r3, [sp, #12]
 800763e:	4298      	cmp	r0, r3
 8007640:	bfb8      	it	lt
 8007642:	4618      	movlt	r0, r3
 8007644:	e7a6      	b.n	8007594 <_printf_i+0x160>
 8007646:	2301      	movs	r3, #1
 8007648:	4632      	mov	r2, r6
 800764a:	4649      	mov	r1, r9
 800764c:	4640      	mov	r0, r8
 800764e:	47d0      	blx	sl
 8007650:	3001      	adds	r0, #1
 8007652:	d09d      	beq.n	8007590 <_printf_i+0x15c>
 8007654:	3501      	adds	r5, #1
 8007656:	68e3      	ldr	r3, [r4, #12]
 8007658:	9903      	ldr	r1, [sp, #12]
 800765a:	1a5b      	subs	r3, r3, r1
 800765c:	42ab      	cmp	r3, r5
 800765e:	dcf2      	bgt.n	8007646 <_printf_i+0x212>
 8007660:	e7eb      	b.n	800763a <_printf_i+0x206>
 8007662:	2500      	movs	r5, #0
 8007664:	f104 0619 	add.w	r6, r4, #25
 8007668:	e7f5      	b.n	8007656 <_printf_i+0x222>
 800766a:	bf00      	nop
 800766c:	08007d79 	.word	0x08007d79
 8007670:	08007d8a 	.word	0x08007d8a

08007674 <memmove>:
 8007674:	4288      	cmp	r0, r1
 8007676:	b510      	push	{r4, lr}
 8007678:	eb01 0402 	add.w	r4, r1, r2
 800767c:	d902      	bls.n	8007684 <memmove+0x10>
 800767e:	4284      	cmp	r4, r0
 8007680:	4623      	mov	r3, r4
 8007682:	d807      	bhi.n	8007694 <memmove+0x20>
 8007684:	1e43      	subs	r3, r0, #1
 8007686:	42a1      	cmp	r1, r4
 8007688:	d008      	beq.n	800769c <memmove+0x28>
 800768a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800768e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007692:	e7f8      	b.n	8007686 <memmove+0x12>
 8007694:	4402      	add	r2, r0
 8007696:	4601      	mov	r1, r0
 8007698:	428a      	cmp	r2, r1
 800769a:	d100      	bne.n	800769e <memmove+0x2a>
 800769c:	bd10      	pop	{r4, pc}
 800769e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076a6:	e7f7      	b.n	8007698 <memmove+0x24>

080076a8 <_sbrk_r>:
 80076a8:	b538      	push	{r3, r4, r5, lr}
 80076aa:	4d06      	ldr	r5, [pc, #24]	@ (80076c4 <_sbrk_r+0x1c>)
 80076ac:	2300      	movs	r3, #0
 80076ae:	4604      	mov	r4, r0
 80076b0:	4608      	mov	r0, r1
 80076b2:	602b      	str	r3, [r5, #0]
 80076b4:	f7fa f8ba 	bl	800182c <_sbrk>
 80076b8:	1c43      	adds	r3, r0, #1
 80076ba:	d102      	bne.n	80076c2 <_sbrk_r+0x1a>
 80076bc:	682b      	ldr	r3, [r5, #0]
 80076be:	b103      	cbz	r3, 80076c2 <_sbrk_r+0x1a>
 80076c0:	6023      	str	r3, [r4, #0]
 80076c2:	bd38      	pop	{r3, r4, r5, pc}
 80076c4:	2000543c 	.word	0x2000543c

080076c8 <memcpy>:
 80076c8:	440a      	add	r2, r1
 80076ca:	4291      	cmp	r1, r2
 80076cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80076d0:	d100      	bne.n	80076d4 <memcpy+0xc>
 80076d2:	4770      	bx	lr
 80076d4:	b510      	push	{r4, lr}
 80076d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076de:	4291      	cmp	r1, r2
 80076e0:	d1f9      	bne.n	80076d6 <memcpy+0xe>
 80076e2:	bd10      	pop	{r4, pc}

080076e4 <_realloc_r>:
 80076e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076e8:	4680      	mov	r8, r0
 80076ea:	4615      	mov	r5, r2
 80076ec:	460c      	mov	r4, r1
 80076ee:	b921      	cbnz	r1, 80076fa <_realloc_r+0x16>
 80076f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076f4:	4611      	mov	r1, r2
 80076f6:	f7ff bc4b 	b.w	8006f90 <_malloc_r>
 80076fa:	b92a      	cbnz	r2, 8007708 <_realloc_r+0x24>
 80076fc:	f7ff fbdc 	bl	8006eb8 <_free_r>
 8007700:	2400      	movs	r4, #0
 8007702:	4620      	mov	r0, r4
 8007704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007708:	f000 f81a 	bl	8007740 <_malloc_usable_size_r>
 800770c:	4285      	cmp	r5, r0
 800770e:	4606      	mov	r6, r0
 8007710:	d802      	bhi.n	8007718 <_realloc_r+0x34>
 8007712:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007716:	d8f4      	bhi.n	8007702 <_realloc_r+0x1e>
 8007718:	4629      	mov	r1, r5
 800771a:	4640      	mov	r0, r8
 800771c:	f7ff fc38 	bl	8006f90 <_malloc_r>
 8007720:	4607      	mov	r7, r0
 8007722:	2800      	cmp	r0, #0
 8007724:	d0ec      	beq.n	8007700 <_realloc_r+0x1c>
 8007726:	42b5      	cmp	r5, r6
 8007728:	462a      	mov	r2, r5
 800772a:	4621      	mov	r1, r4
 800772c:	bf28      	it	cs
 800772e:	4632      	movcs	r2, r6
 8007730:	f7ff ffca 	bl	80076c8 <memcpy>
 8007734:	4621      	mov	r1, r4
 8007736:	4640      	mov	r0, r8
 8007738:	f7ff fbbe 	bl	8006eb8 <_free_r>
 800773c:	463c      	mov	r4, r7
 800773e:	e7e0      	b.n	8007702 <_realloc_r+0x1e>

08007740 <_malloc_usable_size_r>:
 8007740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007744:	1f18      	subs	r0, r3, #4
 8007746:	2b00      	cmp	r3, #0
 8007748:	bfbc      	itt	lt
 800774a:	580b      	ldrlt	r3, [r1, r0]
 800774c:	18c0      	addlt	r0, r0, r3
 800774e:	4770      	bx	lr

08007750 <_init>:
 8007750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007752:	bf00      	nop
 8007754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007756:	bc08      	pop	{r3}
 8007758:	469e      	mov	lr, r3
 800775a:	4770      	bx	lr

0800775c <_fini>:
 800775c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800775e:	bf00      	nop
 8007760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007762:	bc08      	pop	{r3}
 8007764:	469e      	mov	lr, r3
 8007766:	4770      	bx	lr
